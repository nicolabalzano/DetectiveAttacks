from dataclasses import dataclass, field
from typing import List

from src.model.domain.mySTIXObject.AbstractMySTIXObjectWithAttackPatterns import AbstractMySTIXObjectWithAttackPatterns


@dataclass(eq=False, frozen=True, slots=True)
class MyToolMalware(AbstractMySTIXObjectWithAttackPatterns):
    labels: List[str] = field(default_factory=list)
    x_mitre_platforms: List[str] = field(default_factory=list)
    x_mitre_aliases: List[str] = field(default_factory=list)

    def __post_init__(self):
        for er in self.external_references:
            if '/software/' in er.url and 'mitre' in er.source_name:
                object.__setattr__(self, 'x_mitre_id', f"{er.external_id}")
                break
        object.__setattr__(self, 'x_mitre_id', '')

    def __eq__(self, other) -> bool:
        if not isinstance(other, MyToolMalware):
            return False
        return self.id == other.id

    def __hash__(self) -> int:
        return hash(self.id)