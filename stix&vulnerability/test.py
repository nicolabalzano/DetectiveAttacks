

"""
from src.dataProvider.container.mySTIXContainer.AttackPatternsContainer import AttackPatternsContainer
import tiktoken
from src.dataProvider.container.mitreToVulnerabilityContainer.MitreToCVEContainer import MitreToCVEContainer
import pprint
import re
import sys

This function modifies the text to be used as a prompt for the model
Args:
    text (str): text to be modified
Returns:
    str: modified text
"""

"""
def __check_phases_for_mapping(phases: str) -> bool:
        PHASES_TO_DISCARD = []
        
        for phase in phases:
            
            if phase.phase_name.lower() in PHASES_TO_DISCARD:
                return False
        return True

def __modify_text(text: str) -> str:

    text = re.sub(r'\(.*?\)', '', text.split('\n')[0], flags=re.DOTALL)
    text = re.sub(r'\n\n', '\n', text, flags=re.DOTALL)
    text = re.sub(r'\<.*?\>', '', text, flags=re.DOTALL)
    text = re.sub(r'\[', ' ', text, flags=re.DOTALL)
    text = re.sub(r'\]', ' ', text, flags=re.DOTALL)
    text = re.sub(r'\  ', ' ', text, flags=re.DOTALL)
    text = re.sub(r'\ \.', '.', text, flags=re.DOTALL)
    text = re.sub(r'\ \,', ',', text, flags=re.DOTALL)

    return text

def __isSubTechnique(at_id: str) -> bool:
    if at_id.startswith('T'):
        if at_id.count('.') == 0:
            return True
        return False
    elif at_id.startswith('AML'):
        if at_id.count('.') == 1:
            return True
        return False
    return False

messages = "You are a cybersecurity chatbot. You are an expert in identifying and explaining various cybersecurity attack patterns. Here is a list of attack patterns along with their IDs that you are familiar with:"

for at in [at for at in AttackPatternsContainer().get_tuple_data() if 'enterprise-attack' in at.x_mitre_domains and __check_phases_for_mapping(at.kill_chain_phases) and __isSubTechnique(at.x_mitre_id)]:
    messages += ('id:' + at.x_mitre_id + ", name:" + at.name + ', description: ' + __modify_text(at.description)+ ';')

if sys.platform == "win32":
    sys.stdout.reconfigure(encoding='utf-8')
for message in messages.split(';'):
    print()
    print(message)

encoding = tiktoken.encoding_for_model('gpt-3.5-turbo')

tokens = encoding.encode(messages)
num_tokens = len(tokens)

print(f'The prompt contains {num_tokens} tokens.')


dict_phases = {}
dict_platforms = {}
dict_ids = {}
for cve in MitreToCVEContainer().get_data()['mapping_objects']:
    if cve['mapping_type'] == 'exploitation_technique':
        at_id = cve['attack_object_id'].strip()[:-1] if cve['attack_object_id'].strip().endswith('.') else cve['attack_object_id'].strip()
        at = AttackPatternsContainer().get_object_from_data_by_mitre_id(at_id)

        for phase in at.kill_chain_phases:
            
            if phase.phase_name not in dict_phases:
                dict_phases[phase.phase_name] = 0
            
            dict_phases[phase.phase_name] += 1
            
        for platform in at.x_mitre_platforms:
            
            if platform not in dict_platforms:
                dict_platforms[platform] = 0
            
            dict_platforms[platform] += 1
        
        if at_id not in dict_ids:
            dict_ids[at_id] = 0
        dict_ids[at_id] += 1
        
        try:
            print(at_id, at.name, [phase.phase_name for phase in at.kill_chain_phases], [platform for platform in at.x_mitre_platforms])
        except:
            print(cve['capability_id'])
            print(at_id)

print(dict_phases)
print(dict_platforms)
print(dict_ids)
"""
import fsspec
from pathlib import Path

# from src.dataProvider.interfaceToCTI.CTIdata import CAPEC_DATA

# print(CAPEC_DATA.get_capec_by_capec_id('CAPEC-66'))
# print(CAPEC_DATA.get_attack_patterns_mitre_id_by_cwe('CWE-276'))

from src.dataProvider.container.mitreToVulnerabilityContainer.MitreToVulnerabilityContainer import MitreToVulnerabilityContainer
from src.dataProvider.container.mySTIXContainer.AttackPatternsContainer import AttackPatternsContainer

# CVE-2019-15243            --> mapping explorer
# CWE-276 CVE-2024-37038    --> CAPEC
# CWE-89 CVE-2023-37197     --> request capec, no attack patterns mitre for capec
# CVE-2022-0001             --> request cve, no cwe and no mapping explorer
# CWE-1038                  --> request cwe, no capec
print("MAPPING EXPLORER")
MitreToVulnerabilityContainer().get_related_attack_patterns_by_vulnerability_id('CVE-2019-15243', True)
print("---------------------->")
print("\nCAPEC")
MitreToVulnerabilityContainer().get_related_attack_patterns_by_vulnerability_id('CVE-2024-37038', True)
print("---------------------->")
print("\nCAPEC")
MitreToVulnerabilityContainer().get_related_attack_patterns_by_vulnerability_id('CWE-829', True)
print("---------------------->")
print("\nREQUEST CAPEC")
MitreToVulnerabilityContainer().get_related_attack_patterns_by_vulnerability_id('CVE-2023-37197', True)
print("---------------------->")
print("\nREQUEST CVE")
MitreToVulnerabilityContainer().get_related_attack_patterns_by_vulnerability_id('CVE-2022-0001', True)
print("---------------------->")
print("\nREQUEST CWE")
MitreToVulnerabilityContainer().get_related_attack_patterns_by_vulnerability_id('CWE-1038', True)
print("---------------------->")

# print(AttackPatternsContainer().get_object_from_data_by_mitre_id('T1190').name)
# print(AttackPatternsContainer().get_object_from_data_by_mitre_id('T1506').name)
# print(AttackPatternsContainer().get_object_from_data_by_mitre_id('T1506').name)
# print(AttackPatternsContainer().get_object_from_data_by_mitre_id('T1500').name)
# print(AttackPatternsContainer().get_object_from_data_by_mitre_id('T1506').name)
# print(AttackPatternsContainer().get_object_from_data_by_mitre_id('T1190').name)
# print(AttackPatternsContainer().get_object_from_data_by_mitre_id('T1193').name)
