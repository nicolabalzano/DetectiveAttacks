from src.model.container.vulnerabilityContainer.MitreToCWEContainer import MitreToCWEContainer
from src.controller.objectsController.util import remove_empty_values
import src.model.vulnerabilityAPI.CWE as CWE
from src.controller.objectsController.util import format_list_of_string, dict_keys_to_string

def get_CWE_by_id(target_id: str, include_quarantined: bool = False):
    """
    This function gets the CVE by id
    Args:
        target_id (str): id of the CVE
        include_quarantined (bool): include quarantined CVEs
    Returns:
        dict: dictionary with the CVE info
    """
    dict_ = {}
    cwe = CWE.get_CWE_by_id(target_id)
    parents_cwe = CWE.get_CWE_parents(target_id)
    children_cwe = CWE.get_CWE_children(target_id)
    
    if cwe and parents_cwe and children_cwe:
        dict_['ID'] = cwe['id']
        dict_['Name'] = cwe['name']
        dict_['Type'] = 'mapped_vulnerability'
        dict_['Description'] = 'change this when COLELLI SI SBRIGA' # cwe.description
        dict_['Detection Methods'] = 'change this when COLELLI SI SBRIGA' #format_list_of_string([c['description'] for c in cwe['detectionMethods']])
        
        dict_mitigations = {}
        for mit in cwe['mitigations']:
            if isinstance(mit['phase'], str):
                mit['phase'] = [mit['phase']]
            for phase in mit['phase']:
                if phase not in dict_mitigations:
                    dict_mitigations[phase] = []
                dict_mitigations[phase].append('change this when COLELLI SI SBRIGA') #mit['description']
        dict_['Mitigation Methods'] = [
            {
                'Name': key,
                'Description': format_list_of_string(value),
            } for key, value in dict_mitigations.items()
        ]
        
        dict_['Consequences'] = [
            {
                'Name': format_list_of_string(conseq['scope']),
                'Description': format_list_of_string(conseq['impact']),
            } for conseq in cwe['consequences']
        ] 
        
        dict_['Platforms'] = [
            {
                'Name': value['class'],
                'Category': key,
                'Prevalance': value['prevalance'],
            } for key, value in cwe['platforms'].items()
        ]
        dict_['Parent CWEs'] = format_list_of_string([p_cwe['id'] for p_cwe in parents_cwe])
        dict_['Child CWEs'] = format_list_of_string([c_cwe['id'] for c_cwe in children_cwe])
        
        """
        dict_['Related Attack Patterns'] = [
            {
                'ID': at.x_mitre_id,
                'Name': at.name,
                'Type': at.type,
                'Mapping type': mapping_type,
            }
            for mapping_type, ats in MitreToCWEContainer().get_related_at_by_vuln_id(target_id).items()
            for at in ats
        ]
        """

    return remove_empty_values(dict_)
    