from src.model.container.vulnerabilityContainer.MitreToCVEContainer import MitreToCVEContainer
from src.controller.objectsController.util import remove_empty_values
import src.model.vulnerabilityAPI.CVE as CVE
from src.controller.objectsController.util import format_list_of_string

def get_CVE_by_id(target_id: str, include_quarantined: bool = False):
    """
    This function gets the CVE by id
    Args:
        target_id (str): id of the CVE
        include_quarantined (bool): include quarantined CVEs
    Returns:
        dict: dictionary with the CVE info
    """
    dict_ = {}
    cve = CVE.get_CVE_by_id(target_id)
        
    if cve:
        dict_['ID'] = cve['id']
        dict_['Name'] = cve['id']
        dict_['Type'] = 'mapped_vulnerability'
        dict_['Description'] = cve['descriptions'][0]['value']
        dict_['Related CWEs'] = format_list_of_string(list(set(c['description'][0]['value'] for c in cve['weaknesses'])))
        dict_['Related Attack Patterns'] = [
            {
                'ID': at.x_mitre_id,
                'Name': at.name,
                'Type': at.type,
                'Mapping type': mapping_type,
            }
            for mapping_type, ats in MitreToCVEContainer().get_related_at_by_vuln_id(target_id).items()
            for at in ats
        ]

    return remove_empty_values(dict_)
