import nvdlib

from src.dataProvider.Singleton import singleton
from src.dataProvider.container.mySTIXContainer.AttackPatternsContainer import AttackPatternsContainer
from src.dataProvider.container.vulnerabilityContainer.AbstractMitreToVulnerabilityContainer import \
    AbstractMitreToVulnerabilityContainer
from src.dataProvider.interfaceToMitre.conversionType.mitreToVulnerabilityRetriever.MitreToCVERetriever import MitreToCVERetriever
from src.dataProvider.interfaceToMitre.mitreData.utils.FileUtils import check_exist_file_json, save_to_json_file, \
    read_from_json
from src.dataProvider.interfaceToMitre.mitreData.utils.Path import MITRE_TO_CVE_HISTORY, default_path
from src.dataProvider.interfaceToVulnerability.CVE import get_CVE_by_id


@singleton
class MitreToCVEContainer(AbstractMitreToVulnerabilityContainer):
    search_vuln_by_id = get_CVE_by_id
    MitreToVulnerabilityRetriever = MitreToCVERetriever

    def _save_new_mapping(self, cve, list_of_attack_patterns: list):

        # check if file exist
        if not check_exist_file_json(MITRE_TO_CVE_HISTORY, default_path):
            save_to_json_file({'mapping_objects': []}, MITRE_TO_CVE_HISTORY, default_path)

        dict_bert_history = read_from_json(default_path, MITRE_TO_CVE_HISTORY)

        for at in list_of_attack_patterns:
            dict_mapping = {
                "comments": "",
                "attack_object_id": at.x_mitre_id,
                "attack_object_name": at.name,
                "references": [],
                "capability_description": cve.id,
                "capability_id": cve.id,
                "mapping_type": "uncategorized",
                "capability_group": cve.id.split('-')[1],
                "status": "complete"
            }

            dict_bert_history["mapping_objects"].append(dict_mapping)

        # save new mapping
        save_to_json_file(dict_bert_history, MITRE_TO_CVE_HISTORY, default_path)


