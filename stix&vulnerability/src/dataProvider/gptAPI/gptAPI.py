import json
import os
import time
from dotenv import load_dotenv
from openai.lib.azure import AzureOpenAI

from src.dataProvider.utils.Singleton import singleton


@singleton
class GPT_API:

    def __init__(self):
        load_dotenv()

        self.__client = AzureOpenAI(
            api_key=os.getenv("AZURE_OPENAI_API_KEY"),
            api_version="2024-02-01",
            azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT")
        )

        self.__deployment_name = os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME")

    def get_at_related_from_query(self, messages, vuln_desc): #those whose ID starts with 'T' 
        # Add the user message
        messages.append({
            "role": "user",
            "content":
                """
                Based on the attack patterns of NICOLA, identify those that match the following description:
                Description: """ + vuln_desc + """
                Please return the exact attack pattern IDs as a JSON object like this: ["ID", "ID", ...]. 
                For example: ["T1609"], ["T1612"]
                Ensure to find at least one ID that matches the description.
                """
        })

        response = self.make_request(messages)
        
        print("\nResponse for AT request:", response.choices[0].message.content)
        response_content = response.choices[0].message.content
        cleaned_content = response_content.strip().strip("`").replace("json\n", "").replace("\n", "")
        time.sleep(20)

        return json.loads(cleaned_content)

    def make_request(self, messages):
        response = self.__client.chat.completions.create(
            model=self.__deployment_name,
            messages=messages,
        )

        return response

    def get_domain_of_description(self, vuln_desc, list_of_domains):
        messages = [{
            "role": "system",
            "content": """You are a helpful chatbot that specializes in cybersecurity. When people ask you a question:
            'What is the domain of this vulnerability description? 
            Description: <description>', 
            you respond with one of these possible domains: """ + str(list_of_domains) + 
            """, in this format: 'domain'"""
        }, {
            "role": "user",
            "content": "What is the domain of this description? Description: " + vuln_desc
        }]
        print("\nresponse for DOMAIN request:", self.make_request(messages).choices[0].message.content)
        return self.make_request(messages).choices[0].message.content
