from src.dataProvider.container.vulnerabilityContainer.MitreToCWEContainer import MitreToCWEContainer
from src.dataAccesAPI.objectsAPI.util import remove_empty_values
import src.dataProvider.interfaceToVulnerability.CWE as CWE
from src.dataAccesAPI.objectsAPI.util import format_list_of_string, dict_keys_to_string

def get_CWE_by_id(target_id: str, include_quarantined: bool = False):
    """
    This function gets the CVE by id
    Args:
        target_id (str): id of the CVE
        include_quarantined (bool): include quarantined CVEs
    Returns:
        dict: dictionary with the CVE info
    """
    dict_ = {}
    cwe = CWE.get_CWE_by_id(target_id)
    parents_cwe = CWE.get_CWE_parents(target_id)
    children_cwe = CWE.get_CWE_children(target_id)
    
    if cwe and parents_cwe and children_cwe:
        dict_['ID'] = cwe['id']
        dict_['Name'] = cwe['name']
        dict_['Type'] = 'mapped_vulnerability'
        
        if cwe['full_description']:
            dict_['Description'] = cwe['full_description']
        elif cwe['short_description']:
            dict_['Description'] = cwe['short_description']
        
        dict_['Detection Methods'] = []
        for item in cwe['detectionMethods']:
            dict_detection_methods = {
                'Name': item['method'],
                'Effectiveness': item['effectiveness'] if 'effectiveness' in item else None,
                #'ID': item['id'] if 'id' in item else None,
                'Description': item['description'],
            }
            dict_['Detection Methods'].append(dict_detection_methods)
        
        dict_['Mitigation Methods by phase'] = []
        dict_mitigations = {}
        # create a dictionary with the phase as key and the mitigation description as value
        for mit in cwe['mitigations']:
            if isinstance(mit['phase'], str):
                mit['phase'] = [mit['phase']]
            for phase in mit['phase']:
                if phase not in dict_mitigations:
                    dict_mitigations[phase] = []
                dict_mitigations[phase].append(mit['description'])
        for key, value in dict_mitigations.items():
            # if one description has multiple phases, use a key like '1° suggestion: '
            if len(value) > 1:
                dict_more_descriptions = {}
                for index, item in enumerate(value):
                    dict_more_descriptions[f"{index+1}° suggestion"]= item
                dict_more_descriptions['Name'] = key
                dict_['Mitigation Methods by phase'].append(dict_more_descriptions)
            else:
                dict_['Mitigation Methods by phase'].append({
                    'Name': key,
                    'Description': format_list_of_string(value),
                })
        
        previus_key = None
        count = 1
        dict_['Consequences'] = []
        for index, conseq in enumerate(cwe['consequences']):
            dict_consequences = {
                    'Name': format_list_of_string(conseq['scope']),
                    'Impact': format_list_of_string(conseq['impact']),
                    'Description': format_list_of_string(conseq['note']),
                }
            # if the scope is the same as the previous one, add a number to the name
            if conseq['scope'] == previus_key:
                dict_['Consequences'][index-1]['Name'] += f" - {count}"
                count += 1
                dict_consequences['Name'] += f" - {count}"
            else:
                count = 1
                previus_key = conseq['scope']
            dict_['Consequences'].append(dict_consequences)
        
        dict_['Platforms'] = [
            {
                'Name': value['class'] if value['class'] is not None else value['name'],
                'Category': key,
                'Prevalance': value['prevalance'],
            } for key, value in cwe['platforms'].items()
        ]
        dict_['Parent CWEs'] = format_list_of_string([p_cwe['id'] for p_cwe in parents_cwe])
        dict_['Child CWEs'] = format_list_of_string([c_cwe['id'] for c_cwe in children_cwe])
        dict_['Related CAPECs'] = format_list_of_string([capec['id'] for capec in cwe['relatedAttackPatterns']])
        
        dict_['Demonstrative Examples'] = []
        count = 0
        for item in cwe['demonstrativeExamples']:
            count += 1
            dict_demonstrative_examples = {
                'Name': str(count),
                'Description': format_list_of_string(item['Intro_Text'])+ format_list_of_string(item['Body_Text'], ' '),
                'Code Example': item['Example_Code'] if 'Example_Code' in item and item['Example_Code'] else None,
            }
            dict_['Demonstrative Examples'].append(dict_demonstrative_examples)        
        
        """
        dict_['Related Attack Patterns'] = [
            {
                'ID': at.x_mitre_id,
                'Name': at.name,
                'Type': at.type,
                'Mapping type': mapping_type,
            }
            for mapping_type, ats in MitreToCWEContainer().get_related_ats_by_vuln_id(target_id).items()
            for at in ats
        ]
        """

    return remove_empty_values(dict_)

def get_related_cwes_of_cve(target_id):
    """
    This function gets the related cwes of a cwe
    Args:
        target_id (str): id of the cwe
    Returns:
        list: list of related cwe ids
    """
    return MitreToCWEContainer().get_related_vuln_by_vuln_id_mapped(target_id)

def get_related_ats_by_cwe_id_in_mapped(target_id):
    """
    This function gets the related attack patterns by cwe id
    Args:
        target_id (str): id of the cwe
    Returns:
        dict: dictionary with the related attack patterns
    """
    return MitreToCWEContainer().get_related_ats_by_vuln_id(target_id)