from src.dataProvider.container.vulnerabilityContainer.MitreToCVEContainer import MitreToCVEContainer
from src.dataAccesAPI.objectsAPI.util import remove_empty_values
import src.dataProvider.interfaceToVulnerability.CVE as CVE
from src.dataAccesAPI.objectsAPI.util import format_list_of_string
from src.dataAccesAPI.objectsAPI.myStixAPI.AttackPatternAPI import get_keys_values_of_realated_attck_patterns

def get_CVE_by_id(target_id: str, include_quarantined: bool = True):
    """
    This function gets the CVE by id
    Args:
        target_id (str): id of the CVE
        include_quarantined (bool): include quarantined CVEs
    Returns:
        dict: dictionary with the CVE info
    """
    dict_ = {}
    cve = CVE.get_CVE_by_id(target_id, include_quarantined)
        
    if cve:
        dict_['ID'] = cve['id']
        dict_['Name'] = cve['id']
        dict_['Type'] = 'mapped_vulnerability'
        dict_['Description'] = cve['descriptions'][0]['value']
        dict_['Related CWEs'] = format_list_of_string(list(set(c['description'][0]['value'] for c in cve['weaknesses'])))
        
        dict_['Related Attack Patterns'] = [
            {
                'ID': at.x_mitre_id,
                'Name': at.name,
                'Type': at.type,
                'Mapping type': mapping_type,
            }
            for mapping_type, ats in MitreToCVEContainer().get_related_ats_by_vuln_id(target_id).items()
            for at in ats
        ]
        
        dict_.update(get_keys_values_of_realated_attck_patterns([at['ID'] for at in dict_['Related Attack Patterns']]))

    return remove_empty_values(dict_)

def get_related_cves_of_cve(target_id):
    """
    This function gets the related cves of a cve
    Args:
        target_id (str): id of the cve
    Returns: 
        list: list of related cve ids
    """
    return MitreToCVEContainer().get_related_vuln_by_vuln_id_mapped(target_id)


def get_related_ats_by_cve_id_in_mapped(target_id):
    """
    This function gets the related attack patterns by cve id
    Args:
        target_id (str): id of the cve
    Returns:
        dict: dictionary with the related attack patterns
    """
    return MitreToCVEContainer().get_related_ats_by_vuln_id(target_id)