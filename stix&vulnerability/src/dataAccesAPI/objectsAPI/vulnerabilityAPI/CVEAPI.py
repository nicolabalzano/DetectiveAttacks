from src.dataAccesAPI.objectsAPI.util import remove_empty_values
import src.dataProvider.interfaceToVulnerability.CVE as CVE
from src.dataAccesAPI.objectsAPI.util import format_list_of_string
from src.dataAccesAPI.objectsAPI.myStixAPI.AttackPatternAPI import get_keys_values_of_realated_attck_patterns
from src.dataProvider.container.vulnerabilityContainer.MitreToVulnerabilityContainer import MitreToVulnerabilityContainer
from src.dataProvider.container.mySTIXContainer.AssetsContainer import AssetsContainer

def get_CVE_by_id(target_id: str, include_quarantined: bool = True):
    """
    This function gets the CVE by id
    Args:
        target_id (str): id of the CVE
        include_quarantined (bool): include quarantined CVEs
    Returns:
        dict: dictionary with the CVE info
    """
    dict_ = {}
    cve = CVE.get_CVE_by_id(target_id, include_quarantined)
        
    if cve:
        dict_['ID'] = cve['id']
        dict_['Name'] = cve['id']
        dict_['Type'] = 'mapped_vulnerability'
        dict_['Description'] = cve['descriptions'][0]['value']
        dict_['Related CWEs'] = format_list_of_string(list(set(c['description'][0]['value'] for c in cve['weaknesses'])))
        
        dict_['Related Attack Patterns'] = [
            {
                'ID': at.x_mitre_id,
                'Name': at.name,
                'Type': at.type,
                'Mapping type': mapping_type,
            }
            for mapping_type, ats in MitreToVulnerabilityContainer().get_related_attack_patterns_by_vulnerability_id(target_id, True).items()
            for at in ats
        ]
        
        dict_.update(get_keys_values_of_realated_attck_patterns([at['ID'] for at in dict_['Related Attack Patterns']]))

    return remove_empty_values(dict_)


def get_dict_of_cve_assets_by_cve_id(cve_id: str):
    """
    Get dict of CVEs and their assets related to CVE by id

    Args:
        cve_id (str): CVE id

    Returns:
        dict : dict of CVEs and their assets related to CVE by id
    """
    # Get all attack patterns ids from the CVE            
    at_ids_started = [at.x_mitre_id for at in MitreToVulnerabilityContainer().get_list_values_of_dict(
        MitreToVulnerabilityContainer().get_related_attack_patterns_by_vulnerability_id(cve_id))]
    print(at_ids_started)
    cve_assets = {}
    for at_id in at_ids_started:
        # Get all CVEs related to the attack pattern
        print(at_id)
        for cve, mapping_info in MitreToVulnerabilityContainer().get_cve_data().items():
            at_ids_of_cve = MitreToVulnerabilityContainer().get_list_values_of_dict(mapping_info)
            print(at_ids_of_cve)
            if at_id in at_ids_of_cve:
                # if the CVE is not in the final dict, add it
                if cve not in cve_assets:
                    cve_assets[cve] = []
                asset_ids = [asset.x_mitre_id for asset in AssetsContainer().get_objects_related_by_attack_pattern_mitre_id(at_id).keys()]
                cve_assets[cve].extend(asset_ids)
    
    return cve_assets