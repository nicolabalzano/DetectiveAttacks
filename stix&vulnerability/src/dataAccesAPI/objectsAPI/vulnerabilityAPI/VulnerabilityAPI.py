from src.dataAccesAPI.objectsAPI.util import remove_empty_values
from src.dataAccesAPI.objectsAPI.vulnerabilityAPI.CVEAPI import get_CVE_by_id, get_related_cves_of_cve, get_related_ats_by_cve_id_in_mapped
from src.dataAccesAPI.objectsAPI.vulnerabilityAPI.CWEAPI import get_CWE_by_id, get_related_cwes_of_cve, get_related_ats_by_cwe_id_in_mapped
from src.dataProvider.pdfUtility.pdfExtraction.pdfExtraction import check_pdf_for_regular_expressions
from src.dataProvider.container.mySTIXContainer.AssetsContainer import AssetsContainer

import re

def __get_type_of_vulnerability(id: str):
    """
    This function gets the type of the vulnerability
    Args:
        id (str): id of the vulnerability
    Returns:
        str: type of the vulnerability
    """
    if id[:3].lower() == ('CVE').lower():
        return 'CVE'
    elif id[:3].lower() == ('CWE').lower():
        return 'CWE'
    
    
def get_vulnerability_from_id(id: str):
    """
    This function gets the vulnerability from the id

    Args:
        id (str): id of the vulnerability

    Returns:
        dict: dictionary with the vulnerability info
    """
    vuln_type = __get_type_of_vulnerability(id)

    if vuln_type == 'CVE':
        return get_CVE_by_id(id)    
    elif vuln_type == 'CWE':
        return get_CWE_by_id(id)
    else:
        return {}
    
def get_related_vulns_and_assets_of_vuln(target_id: str):
    """
    This function gets the related vulnerabilities and assets of a vulnerability

    Args:
        id: id vulnerability

    Returns:
        dict: dictionary with the related vulnerability id as key and assets list as value
    """
    vuln_ids = []
    
    vuln_type = __get_type_of_vulnerability(target_id)
    if vuln_type == 'CVE':
        vuln_ids = get_related_cves_of_cve(target_id)
        get_related_ats_by_vuln_id_in_mapped = get_related_ats_by_cve_id_in_mapped
    elif vuln_type == 'CWE':
        vuln_ids = get_related_cwes_of_cve(id)
        get_related_ats_by_vuln_id_in_mapped = get_related_ats_by_cwe_id_in_mapped
    
    vuln_ids_assets = {}
    for vuln_id in vuln_ids:
            if vuln_id not in vuln_ids_assets:
                vuln_ids_assets[vuln_id] = []
            # search at ids related to the vuln id to add the assets
            ats_id = [at.x_mitre_id for ats in get_related_ats_by_vuln_id_in_mapped(target_id).values() for at in ats]
            for at_id_of_vuln in ats_id:
                vuln_ids_assets[vuln_id].extend([asset.x_mitre_id for asset in AssetsContainer().get_objects_related_by_attack_pattern_mitre_id(at_id_of_vuln).keys()])
    
    return vuln_ids_assets

    
def get_vulnerability_in_file(file_path: str):
    """
    This function checks the text for vulnerabilities
    
    Args:
        text (file_path): path to the file
        
    Returns:
        list: list of vulnerabilities
    """
    vulnerabilities = []
    cve_pattern = re.compile(r"CVE-\d{4}-\d{4,7}", re.IGNORECASE)
    cwe_pattern = re.compile(r"CWE-\d{1,3}", re.IGNORECASE)
    
    if file_path[-4:].lower() == '.pdf': # if the file is a pdf
        vulnerabilities.extend(check_pdf_for_regular_expressions(file_path, cve_pattern))
        vulnerabilities.extend(check_pdf_for_regular_expressions(file_path, cwe_pattern))
    else: # if the file is a text file
        with open(file_path, 'r') as file:
            text = file.read()
            vulnerabilities.extend(cve_pattern.findall(text))
            vulnerabilities.extend(cwe_pattern.findall(text))
    
    
    vulnerabilities = [v.upper() for v in vulnerabilities if v]
    
    return vulnerabilities
        