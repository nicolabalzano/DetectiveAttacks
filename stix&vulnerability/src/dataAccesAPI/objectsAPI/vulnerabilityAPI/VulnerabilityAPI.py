from src.dataAccesAPI.objectsAPI.util import remove_empty_values
from src.dataAccesAPI.objectsAPI.vulnerabilityAPI.CVEAPI import get_CVE_by_id
from src.dataAccesAPI.objectsAPI.vulnerabilityAPI.CWEAPI import get_CWE_by_id
from src.dataProvider.pdfUtility.pdfExtraction.pdfExtraction import check_pdf_for_regular_expressions

import re

def get_vulnerability_from_id(id: str):
    """
    This function gets the vulnerability from the id

    Args:
        id (str): id of the vulnerability

    Returns:
        dict: dictionary with the vulnerability info
    """
    if id.startswith('CVE'):
        return get_CVE_by_id(id)    
    elif id.startswith('CWE'):
        return get_CWE_by_id(id)
    else:
        return {}
    
 
def get_vulnerability_in_file(file_path: str):
    """
    This function checks the text for vulnerabilities
    
    Args:
        text (file_path): path to the file
        
    Returns:
        list: list of vulnerabilities
    """
    vulnerabilities = []
    cve_pattern = re.compile(r"CVE-\d{4}-\d{4,7}", re.IGNORECASE)
    cwe_pattern = re.compile(r"CWE-\d{1,3}", re.IGNORECASE)
    
    if file_path[-4:].lower() == '.pdf': # if the file is a pdf
        vulnerabilities.extend(check_pdf_for_regular_expressions(file_path, cve_pattern))
        vulnerabilities.extend(check_pdf_for_regular_expressions(file_path, cwe_pattern))
    else: # if the file is a text file
        with open(file_path, 'r') as file:
            text = file.read()
            vulnerabilities.extend(cve_pattern.findall(text))
            vulnerabilities.extend(cwe_pattern.findall(text))
    
    
    vulnerabilities = [v.upper() for v in vulnerabilities if v]
    
    return vulnerabilities
        