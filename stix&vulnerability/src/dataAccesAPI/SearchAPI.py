from src.dataProvider.container.vulnerabilityContainer.MitreToVulnerabilityContainer import MitreToVulnerabilityContainer


from src.dataProvider.container.mySTIXContainer.AttackPatternsContainer import AttackPatternsContainer
from src.dataProvider.container.mySTIXContainer.CampaignsContainer import CampaignsContainer
from src.dataProvider.container.mySTIXContainer.ToolsMalwareContainer import ToolsMalwareContainer
from src.dataProvider.container.mySTIXContainer.AssetsContainer import AssetsContainer
from src.dataProvider.container.mySTIXContainer.IntrusionSetsContainer import IntrusionSetsContainer
from src.dataProvider.interfaceToVulnerability.CWE import get_CWE_by_id
from src.dataProvider.interfaceToVulnerability.CVE import get_CVE_by_id

def get_searched_obj(searched_str: str):
    searched_list_obj = []

    # search in STIX
    searched_list_obj += __get_search_stix(searched_str)

    # search in Vulnerabilities
    searched_list_obj += __get_searched_vulnerability(searched_str)

    return searched_list_obj 



def __get_searched_vulnerability(searched_str: str):
    slicer_description = 35
    
    def __prettify_name_cve(name):
        return name + '...' if len(name) > slicer_description else 'n/a'
    
    def __prettify_name_cwe(name):
        return name or 'n/a'
    

    def __get_name(obj):
        if obj.startswith('CVE'):
            obj = get_CVE_by_id(obj)
            name = obj.get('name', 'n/a')
            return __prettify_name_cve(name)

        elif obj.startswith('CWE'):
            obj = get_CWE_by_id(obj)
            name = obj.get('description', '')[0]['value'] if len(obj.get('description')) > 0 else 'n/a'
            return __prettify_name_cwe(name)
    
    
    """# Retrieve objects based on ID
    if len(searched_str) > 6:     
        objects = get_CVE_by_id(searched_str)
        objects.extended(get_CWE_by_id(searched_str))
        
        # Format the objects and sort them
        formatted_list = sorted(
            [
                [
                    'mapped_vulnerability',
                    obj['id'],
                    __prettify_name_cwe(obj['name'] if 'CWE' in obj['id'] else __prettify_name_cve[obj['description']]),
                    obj['id'][0:3]
                ]
                for obj in objects
            ],
            key=lambda obj: (obj[0])
        )
    else:"""
    objects = MitreToVulnerabilityContainer().get_vulnerabilities_mapped_data_by_str(searched_str, MitreToVulnerabilityContainer().get_cve_data)
    objects.extend(MitreToVulnerabilityContainer().get_vulnerabilities_mapped_data_by_str(searched_str, MitreToVulnerabilityContainer().get_cwe_data))
    
    # Format the objects and sort them
    formatted_list = sorted(
        [
            [
                'mapped_vulnerability',
                obj,
                #__get_name(obj),
                'n/a',
                obj[0:3]
            ]
            for obj in objects
        ],
        key=lambda obj: (obj[0])
    )
    
    

    return formatted_list


def __get_search_stix(searched_str: str):
    searched_dict_obj = {}
    containers = [
        AttackPatternsContainer,
        CampaignsContainer,
        ToolsMalwareContainer,
        AssetsContainer,
        IntrusionSetsContainer
    ]

    for container in containers:
        objects = set()
        objects.update(container().get_object_from_data_by_name(searched_str))
        objects.update(container().get_objects_from_data_by_description(searched_str))
        objects.update(container().get_objects_from_data_by_mitre_id(searched_str))
        
        for obj in objects:
            # use the object ID as the key
            if obj.x_mitre_id.strip() not in searched_dict_obj:
                searched_dict_obj[obj.x_mitre_id.strip()] = obj

    # RETURNED OBJECTS FORMAT: [type, x_mitre_id, name, x_mitre_domains]
    searched_list_obj = [
        [
            obj.type,
            obj.x_mitre_id.strip(),
            obj.name,
            ', '.join([domain.split('-')[0] if '-' in domain else domain for domain in obj.x_mitre_domains]) or 'n/a'
        ]
        for obj in searched_dict_obj.values() if obj.x_mitre_id.strip() and obj.name
    ]

    searched_list_obj = sorted(searched_list_obj, key=lambda obj: (obj[0], obj[2]))

    return searched_list_obj
