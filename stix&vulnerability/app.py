import json
import os

from flask import Flask, render_template, request, jsonify
import sys


current_directory = os.path.dirname(os.path.abspath(__file__))
two_directories_up = os.path.dirname(os.path.dirname(current_directory))

sys.path.append(two_directories_up)

from flask_cors import CORS

from src.dataAccesAPI.objectsAPI.myStixAPI.AssetAPI import get_asset_from_mitre_id
from src.dataAccesAPI.objectsAPI.myStixAPI.CampaignAPI import get_campaign_from_mitre_id
from src.dataAccesAPI.objectsAPI.myStixAPI.ToolMalwareAPI import get_tool_malware_from_mitre_id
from src.dataAccesAPI.objectsAPI.vulnerabilityAPI.VulnerabilityAPI import get_vulnerability_from_id
from src.dataAccesAPI.objectsAPI.vulnerabilityAPI.CVEAPI import get_dict_of_cve_assets_by_cve_id
from src.dataAccesAPI.objectsAPI.myStixAPI.AttackPatternAPI import get_attack_patter_from_mitre_id, \
    get_all_attack_patterns_grouped_by_CKCP, get_all_platforms
from src.dataAccesAPI.SearchAPI import get_searched_obj
from src.dataAccesAPI.objectsAPI.vulnerabilityAPI.VulnerabilityAPI import get_vulnerability_in_file
from src.dataAccesAPI.objectsAPI.myStixAPI.IntrusionSetAPI import get_intrusion_set_from_mitre_id, \
    fetch_report_of_intrusion_set_probability_from_attack_patterns
from src.dataAccesAPI.objectsAPI.util import download_file
from src.dataAccesAPI.objectsAPI.myStixAPI.AttackPatternAPI import AttackPhase

__app = Flask(__name__)
__app.config["JSON_SORT_KEYS"] = False
CORS(__app)

__DICT_OF_FILTER_TYPES = {
    'Attack': 'attack-pattern',
    'Campaign': 'campaign',
    'Tool': 'tool',
    'Malware': 'malware',
    'Asset': 'x-mitre-asset',
    'Group': 'intrusion-set',
    'Mapped Vulnerability': 'mapped_vulnerability'
}

__LIST_OF_FILTER_MITRE_DOMAINS = ['Enterprise', 'Mobile', 'ICS', 'ATLAS']
__LIST_OF_FILTER_DOMAINS = __LIST_OF_FILTER_MITRE_DOMAINS + ['CVE', 'CWE', 'n/a']

@__app.route('/get_filters', methods=["GET"])
def get_filters():
    return jsonify({
        'list_of_filter_types': list(__DICT_OF_FILTER_TYPES.keys()),
        'list_of_filter_domains': __LIST_OF_FILTER_DOMAINS})


@__app.route('/get_data', methods=["GET"])
def get_data():
    search_terms = request.args.get('search')
    checked_types = request.args.get('types')
    checked_domains = request.args.get('domains')

    all_result = get_searched_obj(search_terms)

    # if the user has not selected any type or domain, the default value is ['----'] so nothing matches
    if not checked_domains:
        checked_domains = ['----']
    elif checked_domains == 'all':
        checked_domains = __LIST_OF_FILTER_DOMAINS
    else:
        checked_domains = checked_domains.split(',')

    if not checked_types:
        checked_types = ['----']
    elif checked_types == 'all':
        checked_types = __DICT_OF_FILTER_TYPES.values()
    else:
        checked_types = checked_types.split(',')
        checked_types = [__DICT_OF_FILTER_TYPES[types] for types in checked_types]

    # filter the result by the types
    all_result_filtered_type = []
    for types in checked_types:
        all_result_filtered_type.extend([obj for obj in all_result if types.lower() in obj[0].lower()])

    # filter the result by the domains
    all_result_filtered = []
    for domains in checked_domains:
        all_result_filtered.extend([obj for obj in all_result_filtered_type if domains.lower() in obj[3].lower()])

    results = all_result_filtered

    # filters = "?search=" + search_term + "&type=" + ','.join(checked_types) + "&domain=" + ','.join(checked_domains)

    return jsonify({
        'results': results,
    })
    # , filters=filters


@__app.route('/get_data/get_attack_pattern', methods=["GET"])
def get_attack_pattern():
    searched_id = request.args.get('id')
    searched_result = get_attack_patter_from_mitre_id(searched_id)
    return searched_result


@__app.route('/get_data/get_attack_patterns_grouped_by_CKCP', methods=["GET"])
def get_attack_patterns_grouped_by_CKCP():
    """
    Get all attack patterns grouped by CKC phases
    :return: dict of {CKC_phase: [attack_pattern]}
    """
    return get_all_attack_patterns_grouped_by_CKCP()


@__app.route('/get_data/get_campaign', methods=["GET"])
def get_campaign():
    searched_id = request.args.get('id')
    searched_result = get_campaign_from_mitre_id(searched_id)
    return searched_result


@__app.route('/get_data/get_tool_malware', methods=["GET"])
def get_tool_malware():
    searched_id = request.args.get('id')
    searched_result = get_tool_malware_from_mitre_id(searched_id)
    return searched_result


@__app.route('/get_data/get_asset', methods=["GET"])
def get_asset():
    searched_id = request.args.get('id')
    searched_result = get_asset_from_mitre_id(searched_id)
    return searched_result


@__app.route('/get_data/get_intrusion_set', methods=["GET"])
def get_intrusion_set():
    searched_id = request.args.get('id')
    searched_result = get_intrusion_set_from_mitre_id(searched_id)
    return searched_result


@__app.route('/get_data/get_vulnerability', methods=["GET"])
def get_vulnerability():
    searched_id = request.args.get('id')
    searched_result = get_vulnerability_from_id(searched_id)
    return searched_result


@__app.route('/get_data/get_platforms', methods=["GET"])
def get_platforms():
    """
    Get all platforms
    :return: list of platforms
    """
    return get_all_platforms()


@__app.route('/get_data/get_domains', methods=["GET"])
def get_domains():
    return __LIST_OF_FILTER_MITRE_DOMAINS


@__app.route('/get_data/get_CKC_phases', methods=["GET"])
def get_CKC_phases():
    return list(AttackPhase.get_CKC_mapping_to_phases().keys())


@__app.route('/get_data/get_related_cves_and_assets_of_cve', methods=["GET"])
def get_related_cves_and_assets_of_cve():
    cve_id = request.args.get('id')
    return jsonify(get_dict_of_cve_assets_by_cve_id(cve_id))


@__app.route('/get_data/get_report_groups', methods=["GET"])
def get_report_groups():
    id_list = request.args.get('id_list')
    return download_file(fetch_report_of_intrusion_set_probability_from_attack_patterns(id_list))


@__app.route('/upload_report', methods=["POST"])
def upload_report():
    if request.method == 'POST' and 'file' in request.files and request.files['file']:
        file = request.files['file']
        file_path = f"./temp/{file.filename}"
        file.save(file_path)
        _, file_extension = os.path.splitext(file.filename)
        
        if file_extension.lower() not in ['.pdf', '.txt']:
            return jsonify({"message":"Invalid file extension!"})
        
        vulnerabilties = get_vulnerability_in_file(file_path)
        if not vulnerabilties:
            return jsonify({"message":"No vulnerability found in file!"})
        
        return jsonify({
            "data": get_vulnerability_in_file(file_path),
            "message":"File uploaded successfully!"
            }), 200

    return jsonify({"message":"No file uploaded!"})

@__app.route('/api/get_footer', methods=["GET"])
def get_footer():
    return """
        <!DOCTYPE html>
        <html>
        <head>
        <style>
            .center {
                display: flex;
                justify-content: center;
                align-items: center;
                }
        </style>
        </head>
        <body>
            <div class="center">
            <span>
                <svg version="1.0" xmlns="http://www.w3.org/2000/svg"
                    width="25.000000pt" height="21.000000pt" viewBox="0 0 161.000000 150.000000"
                    fill="#000000"
                    preserveAspectRatio="xMidYMid meet">

                    <!-- Rettangolo di sfondo -->
                    <rect width="100%" height="100%" fill="#fff" rx="30" ry="30"/>

                    <g transform="translate(-15.000000,155.000000) scale(0.120000,-0.120000)" stroke="none">
                        <path d="M590 1163 c-18 -54 -43 -130 -57 -168 l-24 -71 -136 -59 -136 -60 44
                            -8 c24 -5 145 -9 269 -9 218 -1 393 13 705 55 l90 12 -82 19 -83 19 -36 117
                            -37 117 -232 66 c-127 37 -236 67 -242 67 -6 0 -25 -44 -43 -97z"/>
                        <path stroke="#000" stroke-width="30" d="M620 723 c-31 -6 -36 -11 -44 -46 l-7 -28 71 36 c38 19 70 37 70 40
                            0 6 -53 4 -90 -2z"/>
                        <path d="M975 654 c-143 -41 -266 -76 -273 -79 -9 -3 6 -41 48 -126 34 -67 60
                            -123 58 -125 -2 -2 -37 30 -78 71 -63 63 -80 75 -108 75 -44 0 -50 -21 -23
                            -76 33 -69 28 -81 -33 -93 -29 -6 -22 -12 124 -101 85 -51 165 -100 176 -107
                            21 -13 27 -3 184 279 89 161 171 308 182 326 11 17 16 32 11 31 -4 0 -125 -34
                            -268 -75z"/>
                    </g>
                </svg>
            </span>
            </div>
        </body>
        </html>
    """

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5002))
    __app.run(host='0.0.0.0', port=port, debug=True)