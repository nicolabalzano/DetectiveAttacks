from src.dataProvider.container.mySTIXContainer.AttackPatternsContainer import AttackPatternsContainer
from src.dataProvider.container.mitreToVulnerabilityContainer.MitreToVulnerabilityContainer import MitreToVulnerabilityContainer
from src.dataProvider.interfaceToVulnerability.CVE import get_CVE_by_id
from src.dataProvider.interfaceToCTI.CTIdata import MAPPING_EXPLORER_DATA

import sys
import io
import json
#sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

cves= set([dic_mapping['capability_id'].strip() for dic_mapping in MAPPING_EXPLORER_DATA.get_all()])

dict_mapping = {}
fake_positive = 0
fake_negative = 0
for cve in list(cves)[0:10]:
    print("-----------------> ", cve)
    desc = get_CVE_by_id(cve)['descriptions'][0]['value']

    at_ids_mapping_explorer = [at.x_mitre_id for at in MitreToVulnerabilityContainer().get_list_values_of_dict(
        MitreToVulnerabilityContainer().get_related_attack_patterns_by_vulnerability_id(cve))]
    
    at_ids_requests = MitreToVulnerabilityContainer().__get_related_ats_from_requests_by_desc(desc)
    
    if cve not in dict_mapping:
        dict_mapping[cve] = []
    dict_mapping[cve].extend(at_ids_requests)
    
    print("ME -->", cve, ":", str(at_ids_mapping_explorer))
    print("RQ -->", cve, ":", str(at_ids_requests))
    
    for id_ in at_ids_mapping_explorer:
        if id_ not in at_ids_requests:
            fake_negative += 1
    for id_ in at_ids_requests:
        if id_ not in at_ids_mapping_explorer:
            fake_positive += 1        

print(dict_mapping)

print("FAKE NEGATIVE", fake_negative)
print("FAKE POSITIVE", fake_positive)

with open('./temp/test-accurancy-gpt.json', 'w') as file:
    json.dump(dict_mapping, file, indent=4)