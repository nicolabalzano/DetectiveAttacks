from src.model.container.vulnerabilityContainer.MitreToCWEContainer import MitreToCWEContainer
from src.model.vulnerabilityAPI.CVE import search_CVE_by_id
from src.model.vulnerabilityAPI.CWE import search_CWE_by_id
from src.controller.objectsController.util import remove_empty_values
from src.model.container.vulnerabilityContainer.MitreToCVEContainer import MitreToCVEContainer


def get_type_of_vulnerability(id: str):
    """
    This function gets the type of the vulnerability
    Args:
        id (str): id of the vulnerability
    Returns:
        str: type of the vulnerability
    """
    if id.startswith('CVE'):
        return 'CVE'
    elif id.startswith('CWE'):
        return 'CWE'
    
def get_vulnerability_from_id(id: str):
    """
    This function gets the vulnerability from the id

    Args:
        id (str): id of the vulnerability

    Returns:
        dict: dictionary with the vulnerability info
    """
    vuln_type = get_type_of_vulnerability(id)
    if vuln_type == 'CVE':
        return __get_vuln_from_id(id, search_CVE_by_id, MitreToCVEContainer)    
    elif vuln_type == 'CWE':
        return  __get_vuln_from_id(id, search_CWE_by_id, MitreToCWEContainer)
    else:
        return {}

def __get_vuln_from_id(id: str, search_vuln_by_id, MitreToVulnContainer):
    """
    This function gets the vulnerability from the id
    Args:
        id (str): id of the vulnerability
    Returns:
        dict: dictionary with the vulnerability info
    """
    dict_ = {}
    list_of_cve = MitreToVulnContainer().get_objects_from_data_by_vuln_id(id)
    vuln = search_vuln_by_id(id)
    
    if not vuln:
        
        if list_of_cve:
            # TODO: Change all attributes for new colelli collab api
            dict_['ID'] = vuln.id
            dict_['Name'] = 'NAME TO CHANGE'
            dict_['Type'] = 'mapped_vulnerability'
            dict_['Description'] = vuln.descriptions[0].value
            dict_['Related Attack Patterns'] = [
                {
                    'ID': at.x_mitre_id,
                    'Name': at.name,
                    'Type': at.type,
                    'Mapping type': mapping_type,
                }
                for mapping_type, ats in MitreToVulnContainer().get_related_at_by_vuln_id(id).items()
                for at in ats
            ]

        return remove_empty_values(dict_)
    else: 
        return {}