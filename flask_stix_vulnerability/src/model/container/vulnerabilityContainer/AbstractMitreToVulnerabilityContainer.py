import os
import time
from abc import ABC, abstractmethod

import nvdlib
from openai.lib.azure import AzureOpenAI

from src.model.Singleton import singleton
from src.model.container.mySTIXContainer.AttackPatternsContainer import AttackPatternsContainer
from src.model.gptAPI.gptAPI import GPT_API
from src.model.interfaceToMitre.mitreData.attackToVulnerability.SentenceSimilarityModelAPI import \
    SentenceSimilarityModelAPI
from src.model.interfaceToMitre.mitreData.utils.FileUtils import check_exist_file_json, save_to_json_file, \
    read_from_json


class AbstractMitreToVulnerabilityContainer(ABC):
    i = 0
    MIN_SIMILARITY = 0.5
    DICT_OF_DOMAINS = {
        "Artificial Intelligence": "atlas",
        "Industrial Control System": "ics",
        "Enterprise": "enterprise",
        "Mobile": "mobile"
    }

    def __init__(self, objects: dict):
        self._objects = objects

    def reset_dataset(self, objects: dict):
        self._objects = objects

    def get_data(self):
        return self._objects

    def get_object_from_data_by_name(self, target_name: str):
        searched_obj = []
        for obj in self._objects['mapping_objects']:
            if target_name.lower() in obj['capability_description'].lower():

                # if vuln is not yet in the list
                searched_obj_in_list_searched = False
                for obj_in_searched_list in searched_obj:
                    if obj['capability_description'] == obj_in_searched_list['capability_description']:
                        searched_obj_in_list_searched = True

                if not searched_obj_in_list_searched:
                    searched_obj.append(obj)
        return searched_obj

    def get_objects_from_data_by_vuln_id(self, target_id: str):
        searched_obj = []
        for obj in self._objects['mapping_objects']:
            if target_id.lower() in obj['capability_id'].lower():
                searched_obj.append(obj)
                """
                # if vuln is not yet in the list
                searched_obj_in_list_searched = False
                for obj_in_searched_list in searched_obj:
                    if obj['capability_id'] == obj_in_searched_list['capability_id']:
                        searched_obj_in_list_searched = True

                if not searched_obj_in_list_searched:
                    searched_obj.append(obj)
                    """
        return searched_obj

    def get_object_from_data_by_vuln_id(self, target_id: str):
        searched_obj = []
        for obj in self._objects['mapping_objects']:
            if target_id.lower() in obj['capability_id'].lower():

                # if vuln is not yet in the list
                searched_obj_in_list_searched = False
                for obj_in_searched_list in searched_obj:
                    if obj['capability_id'] == obj_in_searched_list['capability_id']:
                        searched_obj_in_list_searched = True

                if not searched_obj_in_list_searched:
                    searched_obj.append(obj)

        return searched_obj

    def __get_attack_pattern_by_vuln_id_in_mapped(self, target_id: str):
        dict_at_type_rel = {}

        # index to get previous vuln ID to stop the iteration
        for index, obj in enumerate(self._objects['mapping_objects']):
            # if the vuln is found
            if obj["capability_id"] == target_id and obj['status'] == 'complete':
                at = AttackPatternsContainer().get_object_from_data_by_mitre_id(obj['attack_object_id'].strip())

                if obj["mapping_type"] not in dict_at_type_rel:
                    # if there is key
                    dict_at_type_rel[obj["mapping_type"]] = [at]
                else:
                    # if there isn't key, add to the list
                    dict_at_type_rel[obj["mapping_type"]].append(at)

        return dict_at_type_rel

    def get_vuln_id_by_attack_pattern_mitre_id(self, attack_pattern_mitre_id: str) -> list[dict]:
        """
        This method get the Vulnerability releated of an attack pattern

        Parameters
        ----------
        attack_pattern_mitre_id : str
            the MITRE ID of the attack pattern

        Returns
        -------
            a list of  {"type of relationship" (ex. primary_impact, secondary_impact, exploitation_technique, uncategorized): vuln_id }
        """
        list_vuln_id = []

        for obj in self._objects['mapping_objects']:
            dict_vuln_id = {}

            # if attack id is found
            if attack_pattern_mitre_id == obj['attack_object_id'] and obj['status'] == 'complete':
                dict_vuln_id[obj["capability_id"]] = [obj["mapping_type"]]

            # if dict is not empty
            if dict_vuln_id:
                list_vuln_id.append(dict_vuln_id)

        return list_vuln_id

    def __search_in_domain(self, vuln_desc: str, domain: str):

        messages = []

        for at in [at for at in AttackPatternsContainer().get_tuple_data() if domain in at.x_mitre_domains]:
            json_data = {
                "role": "system",
                "content": "You are a chatbot specializing in the context of cybersecurity, the attack pattern known with the id \'" + at.x_mitre_id + "\' is: " + at.name + ' .'

            }

            messages.append(json_data)

        at_related = [AttackPatternsContainer().get_object_from_data_by_mitre_id(at['id']) for at in GPT_API().get_at_related_from_query(messages, vuln_desc)]

        return at_related

    def __search_related_at_in_vuln_not_mapped(self, vuln_desc: str):

        domain = GPT_API().get_domain_of_vulnerability(vuln_desc, self.DICT_OF_DOMAINS.keys())

        print(domain)

        time.sleep(60)

        at_related = self.__search_in_domain(vuln_desc, self.DICT_OF_DOMAINS[domain])

        print(len(at_related))
        print([at.name + " " + at.x_mitre_id for at in at_related])

        return at_related

    def _get_attack_pattern_by_vuln_id(self, target_id: str, search_vuln_by_id, MitreToVulnerabilityRetriever) -> dict:
        dict_result = self.__get_attack_pattern_by_vuln_id_in_mapped(target_id)

        # if the vuln is not mapped
        if not dict_result:
            vuln = search_vuln_by_id(target_id)

            at_related = []

            # if Vulnerability isn't map in MITRE ENGENUITY use GPT to determinate
            if not dict_result:
                # if cosine similarity is >= 0.5 add attack to related list of attacks

                at_related = self.__search_related_at_in_vuln_not_mapped(vuln.descriptions[0].value)

                self.i = 0
                dict_result = {'uncategorized': at_related}

                # save new mapping for future research
                self._save_new_mapping(vuln, at_related)

                # update the dataset with new mapping
                self.reset_dataset(MitreToVulnerabilityRetriever().get_all_objects())

        return dict_result

    @abstractmethod
    def _save_new_mapping(self, vulnerability: dict, at_related: list):
        pass
